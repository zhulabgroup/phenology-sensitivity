---
title: "Analysis"
format: html
editor: visual
---


```{r setup, echo=FALSE, message=FALSE}
source("../scripts/_setup_analysis.R")
```

# Prepare data

## Climate data
```{r download_prism, eval=FALSE}
library(prism)
prism_set_dl_dir("~/prismtmp")
prism_download(type = "tmean", years = 1895:2023, mon = 1:12, keep_zip = FALSE)
```

Aggregate monthly prism data to (year)_springmean.tif, (decade)_springmean.tif, complete_period_springmean.tif by doing pixel-wise average. Do this aggregation parallel and save the tif to save time for later extraction. (this part can be used to write a function for parallel do average, more like a optimizationd)
```{r aggregate_prism, eval=FALSE}
source("scripts/prepare_prism.R")
```

(output: yearly and complete period spring mean tifs)

## Herbarium data

### Download the images
Herbarium data is downloaded from the [Global Biodiversity Information Facility (GBIF)](https://www.gbif.org/). We selected the herbaium images following the following criteria and the downloading doi and link are provided here:

Citation
When using this dataset please use the following citation:

GBIF.org (13 May 2024) GBIF Occurrence Download https://doi.org/10.15468/dl.uk96qu

Download Information
DOI: https://doi.org/10.15468/dl.uk96qu (may take some hours before being active)
Creation Date: 16:56:19 13 May 2024
Records included: 259293 records from 307 published datasets
Compressed data size: 122.9 MB
Download format: DWCA
Filter used:

{
  "and" : [
    "BasisOfRecord is Specimen",
    "Country is United States of America",
    "HasCoordinate is true",
    "HasGeospatialIssue is false",
    "TaxonKey is one of (Acer L., Cupressaceae, Morus L., Pinaceae, Ulmus L., Fraxinus Tourn. ex L., Betula L., Populus L., Quercus L.)",
    "Year 1895-2022"
  ]
}

We also put the result in the internal_data. We added gbif.sh which can be used to download the GBIF images. It's aroun 600GB size so we won't provide the raw images here. Instead, we are providing the phenology

(output: occurrence.txt)

### Process the image to get component

Processing the downloaded image using [Leafmachine2](https://github.com/Gene-Weaver/LeafMachine2) can be tested through [colab](https://colab.research.google.com/drive/1LoE62SuiyNy8uar-eKn8qQJ3x_CVr4q_#scrollTo=9KTbaoXba2Qh) or on local machine. We used LeafMachine2 v.2.1 version.

After install Leafmachine2 in colab or local machine, we only need run DetectPhenology.py to generate the phenology table. Before run DetectPhenology.py, remember to change the corresponding DetectPhenology.yaml file lines to the corresponding places you put your image and where you want to store the output:
dir_images_local: (input directory)
dir_output: (output directory)

Other potential adjustment please refer to [Leafmachine2](https://github.com/Gene-Weaver/LeafMachine2). One useful one is to set: do_save_prediction_overlay_images = True for a small test to see how well the phenology component is generated. (supplimentary figure 1).

(output: phenology.csv)

## Field observation data
```{r download_prism, eval=FALSE}
source("scripts/download_npn.R")
```

(output: genus.rds files)

# Analysis
No need to run the downloading process since it will take a long time. All the required data is provided, you can start reproduce the analysis from here:

## Herbarium
```{r}
source("../scripts/prepare_herb.R")
```

*If your meta_data.csv don't have the file_name column, you can use gbifid to join the meta data with phenology data.

(output: herb_flower.csv) (with original doy)

## Field observations
```{r}
source("../scripts/prepare_npn.R")
```

(output: npn_flower.csv) (with original doy)

## Extract climate
```{r warning=FALSE}
source("../scripts/prepare_flowerclimate.R")
```

(output: temperature_data.csv) (with modified doy)

## By species model
```{r}
source("../scripts/model_byspecies_lm.R")
```

(output: species_summary.csv) (only includes species with enough data to model)

## HMM and PMM
### Download pylogenetic data
```{r}
source("../scripts/download_phylo.R")
```
(output: PhyloMaker_tree_scenario1.nwk, taxa_info.csv)

### Fit model
```{r}
source("../scripts/model_hierarchical.R")
```

(output: sample_HMM.rds, sample_PMM.rds)

HMM:2723.19 s PMM 2965.14 s


# check flower synchrony
```{r}
# adapted from complete_npn.qmd in the main branch

## combine genus data --------
folder_path <- .path$npn

# Get list of RDS files in the folder
rds_files <- list.files(path = folder_path, pattern = "\\.rds$", full.names = TRUE)

# Initialize an empty data frame to store the combined data
combined_data <- data.frame()

# Loop through each RDS file and combine the data
for (i in seq_along(rds_files)) {
  # Read the RDS file and append to the combined_data
  data <- read_rds(rds_files[i]) %>%
    mutate(taxa = sub(".*\\/([^/]+)\\.rds$", "\\1", rds_files[i]))
  combined_data <- rbind(combined_data, data)
}

## clean the combined data --------
complete_npn_data <- combined_data %>%
  filter(pheno_class_id == 7) %>% # 22979  # flower
  filter(observed_status_conflict_flag == "-9999") %>% # 20489   # Remove rows with status conflicts
  group_by(individual_id, first_yes_year) %>%
  arrange(first_yes_doy) %>% # Keep only the earlist first yes doy for each individual in each year
  slice(1) %>% # 16086
  ungroup() %>%
  filter(numdays_since_prior_no <= 7 & numdays_since_prior_no > 0) %>% # 8563  #only keep observation with a no observation within 7 days in advance
  dplyr::select(individual_id, first_yes_year, first_yes_doy, species, genus, dataset_id, pheno_class_id, longitude, latitude, taxa, site_id) %>%
  rename(lat = latitude, lon = longitude, year = first_yes_year, doy = first_yes_doy) %>%
  mutate(species = paste(genus, species, sep = " ")) 

```

```{r}
complete_npn_data %>% 
  mutate(doy = doy + 61) %>%
  mutate(
    year = ifelse(doy > 365, year + 1, year),
    doy = ifelse(doy > 365, doy - 365, doy)
  ) %>% 
  group_by(site_id, year, species) %>% 
  summarise(
    count = n_distinct(individual_id),
    variance = var(doy),
    .groups = "drop"
  ) %>% 
  filter(count > 10)
# select speceis with more than two years observations
# do a boxplot showing by species by year doy distribution

```


```{r}

result <- complete_npn_data %>%
  mutate(doy = doy + 61) %>%
  mutate(
    year = ifelse(doy > 365, year + 1, year),
    doy = ifelse(doy > 365, doy - 365, doy)
  ) %>%
  group_by(site_id, year, species) %>%
  summarise(
    count = n_distinct(individual_id),
    variance = var(doy, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  filter(count > 10) %>%
  # Add species-level filtering
  group_by(species) %>%
  filter(
    n_distinct(year) > 2 |  # Species has >2 distinct years
    n_distinct(site_id) > 2  # OR species has >2 distinct sites
  ) %>%
  ungroup()

# Generate boxplot
ggplot(result, aes(x = factor(species), y = doy, fill = factor(year))) +
  geom_boxplot() +
  labs(title = " ",
       x = "Species",
       y = "Day of Year since Nov 1st",
       fill = "Year") +
  scale_fill_viridis_d() + # Color palette for better distinction
    theme(
    axis.text.x = element_text(face = "italic", angle = 45, hjust = 1)
  )
```

```{r}
library(dplyr)
library(ggplot2)

# 1. Prepare data with filtering criteria
filtered_data <- complete_npn_data %>%
  mutate(doy = doy + 61) %>%
  mutate(
    year = ifelse(doy > 365, year + 1, year),
    doy = ifelse(doy > 365, doy - 365, doy)
  ) %>%
  # Filter groups with >10 observations
  group_by(site_id, year, species) %>%
  filter(n_distinct(individual_id) > 10) %>%
  ungroup() %>%
  # Filter species with >2 years OR >2 sites
  group_by(species) %>%
  filter(n_distinct(year) > 2 | n_distinct(site_id) > 2) %>%
  ungroup()

# 2. Create boxplot with aesthetics
ggplot(filtered_data, aes(x = species, y = doy)) +
  geom_boxplot(
    aes(fill = factor(site_id), color = factor(year)),
    position = position_dodge(width = 0.8),
    alpha = 0.7
  ) +
  scale_fill_viridis_d(name = "Site ID") +
  scale_color_brewer(palette = "Set1", name = "Year") +
  labs(
    title = " ",
    subtitle = " ",
    x = "Species",
    y = "Day of Year (doy)"
  ) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "bottom"
  )

```

```{r}
filtered_data %>% 
  filter(species == "Quercus montana") %>% 
  group_by(year, site_id) %>% 
  summarise(count = n())
```

```{r}
filtered_data %>% 
  filter(species == "Quercus montana", year ==2018) 
```

```{r}
library(dplyr)
library(ggplot2)

# Create modified site IDs per species
filtered_data <- complete_npn_data %>%
  mutate(doy = doy + 61) %>%
  mutate(
    year = ifelse(doy > 365, year + 1, year),
    doy = ifelse(doy > 365, doy - 365, doy)
  ) %>%
  group_by(site_id, year, species) %>%
  filter(n_distinct(individual_id) > 10) %>%
  ungroup() %>%
  group_by(species) %>%
  filter(n_distinct(year) > 2 | n_distinct(site_id) > 2) %>%
  # Create sequential site IDs per species
  mutate(site_num = as.integer(factor(site_id, levels = unique(site_id)))) %>%
  ungroup()

```


```{r fig.width=15, fig.height=15}
# Create boxplot
ggplot(filtered_data, aes(x = species, y = doy)) +
  geom_boxplot(
    aes(color = factor(site_num),fill = factor(year)),  # Use sequential site numbers
    position = position_dodge(width = 0.8),
    alpha = 0.8
  ) +
    facet_wrap(~ genus, scales = "free", ncol = 2) +  # 3 columns for species panels
  scale_fill_viridis_d(
    name = "Year",
    option = "D",
    begin = 0.2,
    end = 0.8
  ) +
  labs(
    title = " ",
    subtitle = " ",
    x = "Species",
    y = "Day of Year (doy)",
    color = "Site"
  ) +
    theme(
    axis.text.x = element_text(face = "italic"),
    strip.text = element_text(face = "italic"), # Italicize facet panel labels
    legend.text = element_markdown(),
    legend.position = "top"
  )
```

