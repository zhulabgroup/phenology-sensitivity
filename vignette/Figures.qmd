---
title: "Figures"
format: 
  html:
    toc: true
    toc-float: true
editor: visual
---

The equations are from: https://www.overleaf.com/project/65b42fb90c6d0147c620e820 

```{r setup, echo=FALSE, message=FALSE}
source("../scripts/_setup_figures.R")
```

# Figure 1 SFTS concept

## Figure 1a
```{r}
temperature_data <- read.csv(.path$temperature_data)

red_maple <- temperature_data %>% filter(dataset == "herb",species == "Acer rubrum")

# Load US states as sf object
us_states <- st_as_sf(maps::map("state", plot = FALSE, fill = TRUE))


map_plot <- ggplot() +
  geom_sf(data = us_states, fill = NA, color = "grey") +
  geom_point(data = red_maple, aes(x = lon, y = lat), alpha = 0.5, size = 2) +
  xlim(-97, -66) +
  ylim(24, 50) +
  theme(
    legend.position = c(0.9, 0.3),
        plot.title = element_text(face = "italic")
  ) +
  labs(
    x = "Longitude",
    y = "Latitude",
    title = "Acer rubrum"
  )

print(map_plot)
```

## Figure 1b
```{r}
normality_plot <- red_maple %>% 
  ggplot(aes(x = norm, y = as.Date(doy, origin = "2024-11-01"))) +
  geom_point(alpha = 0.5) +
  geom_smooth(aes(group = dataset), method = "lm", se = FALSE, size = 1, color = "red") +
  labs(
    title = " ",
    x = "Temperature norm (°C)",
    y = "Flowering day"
  ) +
  scale_y_date(date_labels = "%b") + # Format y-axis as months
  theme(
    legend.position = "none"
  )

print(normality_plot)
```

## Figure 1c
```{r}
anomaly_plot <- red_maple %>% 
  ggplot(aes(x = anom, y = as.Date(doy, origin = "2024-11-01"))) +
  geom_point(alpha = 0.5) +
  geom_smooth(aes(group = dataset), method = "lm", se = FALSE, size = 2, color = "purple") +
  labs(
    title = " ",
    x = "Temperature anomaly (°C)",
    y = "Flowering day"  ) +
  scale_y_date(date_labels = "%b") + # Format y-axis as months
  theme(
    legend.position = "none"
  )

print(anomaly_plot)
```

## Figure 1d

```{r}
purple <- data.frame(x = c(0, 3), y = c(3, 0))/3
red_co <- data.frame(x = c(1, 2), y = c(3, 0))/3
red_counter <- data.frame(x = c(0, 3), y = c(2, 1))/3
```


```{r fig.width=4, fig.height=3}
spa_sen <- ggplot(data = purple) +
  # geom_point(aes(x = x, y = y)) +
  geom_line(mapping = aes(x = x, y = y), color = "red") +
  theme(
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.line = element_line(color = "black")
  ) +
  xlim(-0.3, 1) +
  ylim(-0.1, 1) +
  labs(
    # x = expression("Temperature normality" ~ t[norm]),
    # y = expression("Flowering day normality" ~ d[norm]),
    x = "Temperature norm",
    y = "Flowering day norm",
    title = " "
  ) +
  annotate("text", x = -0.12, y = 0.1, label = "Early\nflowering", size = 4, hjust = 0.7) +
  annotate("text", x = -0.12, y = 0.92, label = "Late\nflowering", size = 4, hjust = 0.7) +
  annotate("text", x = 0.1, y = -0.1, label = "Cool site", size = 4, vjust = 0.2) +
  annotate("text", x = 0.85, y = -0.1, label = "Warm site", size = 4, vjust = 0.2)

print(spa_sen)
```

## Figure 1e

```{r fig.width=4, fig.height=3}
tem_sen <- ggplot(data = purple) +
  # geom_point(aes(x = x, y = y)) +
  geom_line(mapping = aes(x = x, y = y), color = "purple", size = 2) +
  theme(
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.line = element_line(color = "black")
  ) +
  xlim(-0.3, 1) +
  ylim(-0.1, 1) +
  labs(
    # x = expression("Temperature anomaly" ~ t[anom]),
    # y = expression("Flowering day anomaly" ~ d[anom]),
    x = "Temperature anomaly",
    y = "Flowering day anomaly",
    title = " "
  ) +
  annotate("text", x = -0.12, y = 0.1, label = "Early\nflowering", size = 4, hjust = 0.7) +
  annotate("text", x = -0.12, y = 0.92, label = "Late\nflowering", size = 4, hjust = 0.7) +
  annotate("text", x = 0.1, y = -0.1, label = "Cool year", size = 4, vjust = 0.2) +
  annotate("text", x = 0.8, y = -0.1, label = "Warm year", size = 4, vjust = 0.2) +
  # add a horizontal and vertical dash line cross 0,0 and label that they represent 0,0
  geom_point(aes(x = 0.5, y = 0.5), color = "purple", size = 4) +
  geom_hline(yintercept = 0.5, linetype = "dashed") +
  geom_vline(xintercept = 0.5, linetype = "dashed") +
  annotate("text", x = 0.65, y = 0.6, label = "(0, 0)", size = 4)

print(tem_sen)
```

## Figure 1f

```{r}
# Plot
co_gradient <- ggplot(mapping = aes(x = x, y = y)) +
  geom_line(data = purple, color = "purple", size = 3) +
    geom_line(data = red_co, color = "red") +
  # geom_hline(yintercept = 0.4, linetype = "dashed") +
  # geom_vline(xintercept = 0.6, linetype = "dashed") +
  labs(
    # x = expression(t[observe]),
    #    y = expression(d[observe]),
    x = "Temperature observed",
    y = "Flowering day observed",
    title = "Co-gradient adaptation"
  ) +
    geom_text(aes(x = 0.9, y = 0.9, label = "+"), size = 10, color = "black") +
  theme(
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.line = element_line(color = "black")
  )
print(co_gradient)
```
## Figure 1g

```{r}
# Plot
no_adaptation <- ggplot() +
  geom_line(data = purple, aes(x = x, y = y), color = "purple", size = 3) +
    geom_line(data = purple, aes(x = x, y = y+0.04), color = "red") +
  # geom_hline(yintercept = 0.4, linetype = "dashed") +
  # geom_vline(xintercept = 0.6, linetype = "dashed") +
  labs(
    # x = expression(t[observe]),
    #    y = expression(d[observe]),
    x = "Temperature observed",
    y = "Flowering day observed",
    title = "No adaptation"
  ) +
  theme(
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.line = element_line(color = "black")
  )
print(no_adaptation)
```

## Figure 1h

```{r}
# Plot
counter_gradient <- ggplot(mapping = aes(x = x, y = y)) +
  geom_line(data = purple, color = "purple", size = 3) +
    geom_line(data = red_counter, color = "red") +
  # geom_hline(yintercept = 0.4, linetype = "dashed") +
  # geom_vline(xintercept = 0.6, linetype = "dashed") +
  labs(
    # x = expression(t[observe]),
    #    y = expression(d[observe]),
    x = "Temperature observed",
    y = "Flowering day observed",
    title = "Counter-gradient adaptation"
  ) +
      geom_text(aes(x = 0.9, y = 0.9, label = "−"), size = 10, color = "black") +
  theme(
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.line = element_line(color = "black")
  )
print(counter_gradient)
```
For poster:
```{r fig.width=10, fig.height=3}
# Adjust the margins and layout
combined_plot <-co_gradient +  no_adaptation + counter_gradient 
  

# Print the combined plot
print(combined_plot)
```


## Combined

```{r}
layout <- c(
  patchwork::area(t = 1, l = 1, b = 6, r = 5),
  patchwork::area(t = 1, l = 6, b = 3, r = 7),
  patchwork::area(t = 4, l = 6, b = 6, r = 7),
  patchwork::area(t = 1, l = 8, b = 3, r = 9),
  patchwork::area(t = 4, l = 8, b = 6, r = 9),
  patchwork::area(t = 7, l = 1, b = 9, r = 3),
  patchwork::area(t = 7, l = 4, b = 9, r = 6),
  patchwork::area(t = 7, l = 7, b = 9, r = 9)
)

plot(layout)
```

```{r fig.width=16, fig.height=12}
# Adjust the margins and layout
combined_plot <- map_plot + normality_plot + anomaly_plot + spa_sen + tem_sen + 
   free(co_gradient) + free(no_adaptation) + free(counter_gradient) +
  plot_layout(design = layout) +
  plot_annotation(tag_levels = "a") 
  

# Print the combined plot
print(combined_plot)
```


# Figure 2: the by group result from the two datasets

## Prepare data

```{r}
by_species <- read_csv(.path$byspecies_summary)
taxa_info <- read_csv(.path$taxa_info)

by_species_wtaxa <- by_species %>%
  left_join(taxa_info) 

by_species_wtaxa_st <- by_species_wtaxa %>%
  mutate(sensitivity_type = "Spatial", estimate_combined = norm_estimate, conf_low_combined = norm_conf_low, conf_high_combined = norm_conf_high) %>%
  bind_rows(
    by_species_wtaxa %>% 
      mutate(sensitivity_type = "Temporal", estimate_combined = anom_estimate, conf_low_combined = anom_conf_low, conf_high_combined = anom_conf_high)
  ) %>%
  mutate(simple_name = str_replace(species, "^([A-Za-z])[^ ]+", "\\1.")) %>% 
  # Arrange alphabetically by taxa and species
  arrange(taxa, species) %>%
  # Abbreviate genus names (e.g., Acer → A.)
  mutate(species_name = forcats::fct_inorder(simple_name),
    label = case_when(
      equal == 0 & anom_estimate < norm_estimate ~ "−",
      equal == 0 & anom_estimate > norm_estimate ~ "+",
      TRUE ~ ""
    )
  )    
```


## Figure 2a & b

```{r}
# Example: split taxa into two groups (adjust as needed)
taxa_levels <- unique(by_species_wtaxa_st$taxa)
group1 <- taxa_levels[1:(length(taxa_levels)/2)]
group2 <- taxa_levels[(length(taxa_levels)/2 + 1):length(taxa_levels)]

plot1 <- by_species_wtaxa_st %>%
  filter(dataset == "herb", taxa %in% group1) %>%
  ggplot(aes(x = species_name, y = estimate_combined, color = sensitivity_type)) +
  # define the color
  scale_color_manual(values = c("Spatial" = "red", "Temporal" = "purple")) +

  # Points with dodging for groups
  geom_point(size = 2, position = position_dodge(width = 0.5), shape = 20) +

  # Error bars with the same dodging as points
  geom_errorbar(aes(ymin = conf_low_combined, ymax = conf_high_combined),
    width = 0, position = position_dodge(width = 0.5)
  ) +
    geom_text(aes(y = -38, label = label), vjust = 0, color = "black", size = 8) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
  facet_grid(. ~ taxa, scales = "free_x", space = "free_x") +
    labs(
    title = "",
    x = "Species",
    y = "Sensitivity (days/°C)",
    color = "Sensitivity type"
  ) +
  coord_cartesian(ylim = c(-39, 15)) +
    theme(
    axis.text.x = element_text(face = "italic", angle = 45, hjust = 1),
    strip.text = element_text(face = "italic"), # Italicize facet panel labels
    legend.text = element_markdown(),
    legend.position = "top"
  )

plot2 <- by_species_wtaxa_st %>%
  filter(dataset == "herb", taxa %in% group2) %>%
  ggplot(aes(x = species_name, y = estimate_combined, color = sensitivity_type)) +
  # define the color
  scale_color_manual(values = c("Spatial" = "red", "Temporal" = "purple")) +

  # Points with dodging for groups
  geom_point(size = 2, position = position_dodge(width = 0.5), shape = 20) +

  # Error bars with the same dodging as points
  geom_errorbar(aes(ymin = conf_low_combined, ymax = conf_high_combined),
    width = 0, position = position_dodge(width = 0.5)
  ) +
    geom_text(aes(y = -38, label = label), vjust = 0, color = "black", size = 8) +
  # Add horizontal line at sensitivity = 0
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
  facet_grid(. ~ taxa, scales = "free_x", space = "free_x") +
    labs(
    title = "",
    x = "Species",
    y = "Sensitivity (days/°C)",
    color = "Sensitivity type"
  ) +
  coord_cartesian(ylim = c(-39, 15)) +
    theme(
    axis.text.x = element_text(face = "italic", angle = 45, hjust = 1),
    strip.text = element_text(face = "italic"), # Italicize facet panel labels
    legend.text = element_markdown(),
    legend.position = "top"
  )

```
```{r fig.width= 12, fig.height=5}
print(plot1)
```

```{r fig.width= 16, fig.height=5}
print(plot2)
```

## Figure 2c
```{r fig.width=4, fig.height=4}
# Plot
byspecies_scatter <- by_species_wtaxa_st%>%
  filter(dataset == "herb") %>%
  ggplot(aes(x = norm_estimate, y = anom_estimate)) +
  geom_point(alpha = 0.7, size = 3) +
  geom_text(aes(label = label), vjust = -1, color = "black", size = 7) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "grey50") +
  labs(
    x = "Spatial Sensitivity (days/°C)",
    y = "Temporal Sensitivity (days/°C)",
    color = "Dataset"
  ) +
  ylim(-25,8) +
  xlim(-25,8) +
  theme(legend.position = "top",
            panel.border = element_rect(color = "black", fill = NA, size = 2)  
        )+ 
  coord_fixed(ratio = 1)


print(byspecies_scatter)
```


```{r}

sum((by_species_wtaxa_st %>% filter(dataset == "herb"))$norm_estimate < (by_species_wtaxa_st %>% filter(dataset == "herb"))$anom_estimate)/2
```


## Combined

```{r}
layout <- c(
  patchwork::area(t = 1, l = 1, b = 1, r = 1),
  patchwork::area(t = 1, l = 2, b = 1, r = 4),
  patchwork::area(t = 2, l = 1, b = 2, r = 4)
)

plot(layout)
```


```{r fig.width=15, fig.height=9}
# Adjust the margins and layout
Figure_2 <- free(byspecies_scatter, type = "space", side = "b") + plot1 + plot2 +
  plot_layout(design = layout, guides = "collect") + # Example: change heights as needed
  plot_annotation(tag_levels = "a") &
  theme(legend.position = "top")

# Print the combined plot
print(Figure_2)
```


# Table 1
```{r}
table1 <- by_species_wtaxa_st %>% 
  filter(dataset=="herb") %>% 
  group_by(genus) %>% 
  summarise(
    count = n()/2,
    equal = sum(equal)/2,
    pro_euqal = equal/count,
    neg = sum(label=="-")/2,
    pos = sum(label=="+")/2)

print(table1)
```


# Figure 3 compare two dataset sensitivity

```{r}
by_species_wtaxa_dataset <- by_species_wtaxa_st %>%
  group_by(species) %>%
  filter(all(c("herb", "npn") %in% dataset)) %>%
  group_by(species, sensitivity_type) %>%
  mutate(
    # Indicator for non-overlapping confidence intervals
    equal = as.integer(max(conf_low_combined) < min(conf_high_combined)),
    # Extract estimates for each dataset
    npn_estimate = estimate_combined[dataset == "npn"],
    herb_estimate = estimate_combined[dataset == "herb"],
    # Assign label: "+" if npn < herb, "-" if herb < npn, "" otherwise
    dataset_label = case_when(
      equal == 0 & npn_estimate < herb_estimate ~ "+",
      equal == 0 & herb_estimate < npn_estimate ~ "−",
      TRUE ~ ""
    )
  )

```


```{r fig.width=12, fig.height=7}
by_species_wtaxa_dataset %>%
  ggplot(aes(y = estimate_combined, x = species_name, color = dataset)) +
  scale_color_manual(
    values = c("npn" = "#0751f1", "herb" = "#582800"),
    labels = c("npn" = "Field observation", "herb" = "Herbarium")
  ) +
  geom_point(shape = 20, size = 2, position = position_dodge(width = 0.5)) +
  coord_cartesian(ylim = c(-26, 15)) + # Now set limits for y-axis
  geom_errorbar(aes(ymin = conf_low_combined, ymax = conf_high_combined), width = 0, position = position_dodge(width = 0.5)) +
  geom_hline(yintercept = 0, linetype = "dashed") + # Horizontal line at y=0
      geom_text(aes(y = -25, label = dataset_label), vjust = 0, color = "black", size = 8) +
  labs(
    title = "",
    y = "Sensitivity (days/°C)",  # y and x labels swapped
    x = "Species",
    color = "Dataset"
  ) +
  facet_grid(sensitivity_type ~ taxa , scales = "free_x", space = "free_x") + # free_x instead of free_y
  theme(
    axis.text.x = element_text(face = "italic", angle = 45, hjust = 1), # Now italicize x-axis labels
    legend.text = element_markdown(),
    legend.position = "top",
    strip.text.x = element_text(face = "italic")  # Targets column strips (taxa)
  )


```

# Table 2 & 3
```{r}
table2_sp <- by_species_wtaxa_dataset %>% 
  filter(sensitivity_type=="Spatial") %>% 
  group_by(genus) %>% 
  summarise(
    count = n()/2,
    equal = sum(equal)/2,
    pro_euqal = equal/count,
    neg = sum(dataset_label=="-")/2,
    pos = sum(dataset_label=="+")/2)

print(table2_sp)
```

```{r}
table2_te <- by_species_wtaxa_dataset %>% 
  filter(sensitivity_type=="Temporal") %>% 
  group_by(genus) %>% 
  summarise(
    count = n()/2,
    equal = sum(equal)/2,
    pro_euqal = equal/count,
    neg = sum(dataset_label=="-")/2,
    pos = sum(dataset_label=="+")/2)

print(table2_te)
```

```{r}
by_species_wtaxa_dataset %>%
  filter(sensitivity_type == "Spatial", npn_estimate > herb_estimate) %>%
  nrow()/2 #decreasing sensitivity

by_species_wtaxa_dataset %>%
  filter(sensitivity_type == "Temporal", npn_estimate < herb_estimate) %>%
  nrow()/2
```


# Table 4


## Prepare PMM data

```{r}
# Load PMM object
PMM <- read_rds(.path$sample_pmm)

# Summarize results
PMM_summary <- summary(PMM)
PMM_group <- as.data.frame(PMM_summary$summary)

# Calculate parameter differences
PMM_samples <- as.data.frame(PMM)
n_groups <- 74#82

PMM_b_diff <- sapply(1:n_groups, function(i) {
  PMM_samples[[paste0("b_spatial[", i, "]")]] - PMM_samples[[paste0("b_temporal[", i, "]")]]
}) # spatial-temporal, negative number means co

PMM_b_diff_summary <- apply(PMM_b_diff, 2, function(x) {
  c(mean = mean(x), sd = sd(x), quantile(x, c(0.025, 0.5, 0.975)))
})
PMM_b_diff_summary <- t(PMM_b_diff_summary)
```

## Prepare HMM data

```{r}
# Load HMM data
HMM <- read_rds(.path$sample_hmm)

# Summarize results
HMM_summary <- summary(HMM)
HMM_group <- as.data.frame(HMM_summary$summary)

# Calculate parameter differences
HMM_samples <- as.data.frame(HMM)
n_groups <- 74  # Adjust group count as needed

HMM_b_diff <- sapply(1:n_groups, function(i) {
  HMM_samples[[paste0("b_spatial[", i, "]")]] - HMM_samples[[paste0("b_temporal[", i, "]")]]
})

HMM_b_diff_summary <- apply(HMM_b_diff, 2, function(x) {
  c(mean = mean(x), sd = sd(x), quantile(x, c(0.025, 0.5, 0.975)))
})
HMM_b_diff_summary <- t(HMM_b_diff_summary)

```


## generate table

```{r}
by_species_herb <- by_species%>%
  filter(dataset == "herb") 
# Temporal table
temporal_table <- data.frame(
  Model = c("By Species", "HMM", "PMM"),
  Mean = c(
    mean(by_species_herb$anom_estimate, na.rm = TRUE),
    HMM_group["b_zt", "mean"],
    PMM_group["b_zt", "mean"]
  ),
  SD = c(
    sd(by_species_herb$anom_estimate, na.rm = TRUE),
    HMM_group["sigma_interceptsbt", "mean"],
    PMM_group["sigma_interceptsbt", "mean"]
  )
)

# Spatial table
spatial_table <- data.frame(
  Model = c("By Species", "HMM", "PMM"),
  Mean = c(
    mean(by_species_herb$norm_estimate, na.rm = TRUE),
    HMM_group["b_zs", "mean"],
    PMM_group["b_zs", "mean"]
  ),
  SD = c(
    sd(by_species_herb$norm_estimate, na.rm = TRUE),
    HMM_group["sigma_interceptsbs", "mean"],
    PMM_group["sigma_interceptsbs", "mean"]
  )
)

print(temporal_table)
print(spatial_table)

```



# Figure 4: Estimated sensitivity for wind pollinated trees flower time with their phylogenetic signal


## Prepare phylogeny data

```{r}
tree <- read.tree(.path$tree)

tree_species <- rownames(vcv(tree, corr = TRUE)) %>%
  gsub("_", " ", .)

phylo_species_id <- data.frame(species = tree_species, sppid = seq_along(tree_species))
```

## Prepare PMM data
```{r}
PMM_species_data_wci <- PMM_group %>%
  tibble::rownames_to_column("parameter") %>%
  filter(grepl("b_spatial\\[|b_temporal\\[", parameter)) %>%
  mutate(
    param_type = gsub("\\[\\d+\\]", "", parameter),
    group = as.numeric(gsub(".*\\[(\\d+)\\]", "\\1", parameter))
  ) %>%
  dplyr::select(group, param_type, mean, `2.5%`, `97.5%`) %>%
  tidyr::pivot_longer(
    cols = c(mean, `2.5%`, `97.5%`),
    names_to = "statistic",
    values_to = "value"
  ) %>%
  tidyr::pivot_wider(
    names_from = c(statistic, param_type),
    values_from = value,
    names_glue = "{statistic}_{param_type}"
  ) %>%
  cbind(PMM_b_diff_summary %>% as.data.frame() %>% dplyr::select("mean", "2.5%", "97.5%"))

species_sensitivity_PMM <- PMM_species_data_wci %>%
  cbind(phylo_species_id) %>%
  left_join(taxa_info, by = "species") %>%
  mutate(simple_name = str_replace(species, "^([A-Za-z])[^ ]+", "\\1."))
```

##Plot tree
```{r fig.height=8, fig.width=10}
tree$tip.label <- tree$tip.label %>% gsub("_", " ", .)

diff_color <- data.frame(
  species = species_sensitivity_PMM$species,
  diff = species_sensitivity_PMM$mean_b_spatial ##################
) 

# Step 1: Create a named vector for the lambda values (`lam_bc_pmm`), with species names as names
lambda_tips <- setNames(diff_color$diff, tree$tip.label) # Assuming `lam_bc_pmm` contains species' lambda values

# Step 2: Use `fastAnc` to calculate ancestral states (lambda values) for internal nodes
lambda_nodes <- fastAnc(tree, diff_color$diff) # Computes the ancestral values by averaging the lambda values of descendants

# Step 3: Combine tip and node lambda values into one vector for plotting
lambda_all <- c(lambda_tips, lambda_nodes)


tree_plot <- ggtree(tree, aes(color = lambda_all), layout = "circular") + 
  geom_tree(size = 1.5) +
  scale_color_gradient2(
    low = "#d7191c",     # Deep red
    mid = "#fee08b",     # Brighter yellow
    high = "#2c7bb6",     # Deep blue
    midpoint = mean(lambda_all, na.rm = TRUE),
    name = "Spatial sensitivity \ndays/°C",
    na.value = "grey50"   # Color for internal nodes
  ) +
  geom_tiplab(aes(label = label),   # Now uses attached data
              color = "black",
    offset = 0.02,       # Distance from tips
        fontface = "italic",  # Added italic directly here
    align = TRUE          # Radial alignment
  ) + 
  theme_tree() +
    theme(legend.position = c(1.07, 0.02),
              plot.margin = margin(40, 60, 50, 60))  # top, right, bottom, left (in "pt" by default))       # Adjust legend placement

print(tree_plot)
```


# Supplementary Table 1 (simple linear regression):

need to prepare the simple linear regression data later if necessary
```{r}
table1 <- by_species_wtaxa_st %>% 
  filter(dataset=="herb") %>% 
  group_by(genus) %>% 
  summarise(
    count = n()/2,
    equal = sum(equal)/2,
    pro_euqal = equal/count,
    neg = sum(label=="-")/2,
    pos = sum(label=="+")/2)

print(table1)
```

# Supplementary Table 2 (PMM):

```{r}
species_sensitivity_PMM %>%
  group_by(genus) %>%
  summarise(
    count = n(),
    equal = sum(`2.5%` * `97.5%` < 0),
    pro_equal = equal / count,
    counter = sum(`2.5%` * `97.5%` > 0 & `2.5%` > 0),
    co = sum(`2.5%` * `97.5%` > 0 & `2.5%` < 0)
  )
```


#Supplementary Figure 4a: temporal tree

```{r fig.width=6, fig.height=15}
source("../scripts/plot_temporal_tree.R")
temporal_tree <- gridExtra::grid.arrange(tree_plot, sensitivity_plot, nrow = 1, widths = c(1, 2))
```

#Supplementary Figure 4b: spatial tree

```{r fig.width=6, fig.height=15}
source("../scripts/plot_spatial_tree.R")
spatial_tree <- gridExtra::grid.arrange(tree_plot, sensitivity_plot, nrow = 1, widths = c(1, 2))
```
