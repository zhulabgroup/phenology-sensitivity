---
title: "Figures"
format: 
  html:
    toc: true
    toc-float: true
editor: visual
---

The equations are from: https://www.overleaf.com/project/65b42fb90c6d0147c620e820 

```{r setup, echo=FALSE, message=FALSE}
source("../scripts/_setup_figures.R")
```

# Figure 1 SFTS concept

## Figure 1a
```{r}
temperature_data <- read.csv(.path$temperature_data)

red_maple <- temperature_data %>% filter(dataset == "herb",species == "Acer rubrum")

# Load US states as sf object
us_states <- st_as_sf(maps::map("state", plot = FALSE, fill = TRUE))


map_plot <- ggplot() +
  geom_sf(data = us_states, fill = NA, color = "grey") +
  geom_point(data = red_maple, aes(x = lon, y = lat, color = lat), alpha = 0.5, size = 2) +
  xlim(-97, -66) +
  ylim(24, 50) +
  theme(
    legend.position = c(0.9, 0.3),
        plot.title = element_text(face = "italic")
  ) +
  labs(
    color = "Latitude",
    x = "Longitude",
    y = "Latitude",
    title = "Acer rubrum"
  )

print(map_plot)
```

## Figure 1b
```{r}
normality_plot <- red_maple %>% 
  ggplot(aes(x = norm, y = as.Date(doy, origin = "2024-11-01"), color = lat)) +
  geom_point(alpha = 0.5) +
  geom_smooth(aes(group = dataset), method = "lm", se = FALSE, size = 1, color = "red") +
  labs(
    title = " ",
    x = "Temperature normality (°C)",
    y = "Flowering day",
    color = "Latitude"
  ) +
  scale_y_date(date_labels = "%b") + # Format y-axis as months
  theme(
    legend.position = "none"
  )

print(normality_plot)
```

## Figure 1c
```{r}
anomaly_plot <- red_maple %>% 
  ggplot(aes(x = anom, y = as.Date(doy, origin = "2024-11-01"), color = lat)) +
  geom_point(alpha = 0.5) +
  geom_smooth(aes(group = dataset), method = "lm", se = FALSE, size = 2, color = "purple") +
  labs(
    title = " ",
    x = "Temperature anomaly (°C)",
    y = "Flowering day",
    color = "Latitude"
  ) +
  scale_y_date(date_labels = "%b") + # Format y-axis as months
  theme(
    legend.position = "none"
  )

print(anomaly_plot)
```

## Figure 1d

```{r}
purple <- data.frame(x = c(0, 3), y = c(3, 0))/3
red_co <- data.frame(x = c(1, 2), y = c(3, 0))/3
red_counter <- data.frame(x = c(0, 3), y = c(2, 1))/3
```


```{r}
spa_sen <- ggplot(data = purple) +
  # geom_point(aes(x = x, y = y)) +
  geom_line(mapping = aes(x = x, y = y), color = "red") +
  theme(
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.line = element_line(color = "black")
  ) +
  xlim(-0.3, 1) +
  ylim(-0.1, 1) +
  labs(
    # x = expression("Temperature normality" ~ t[norm]),
    # y = expression("Flowering day normality" ~ d[norm]),
    x = "Temperature normality",
    y = "Flowering day normality",
    title = " "
  ) +
  annotate("text", x = -0.12, y = 0.1, label = "Early\nflowering", size = 4, hjust = 0.7) +
  annotate("text", x = -0.12, y = 0.92, label = "Late\nflowering", size = 4, hjust = 0.7) +
  annotate("text", x = 0.1, y = -0.1, label = "Cool site", size = 4, vjust = 0.2) +
  annotate("text", x = 0.85, y = -0.1, label = "Warm site", size = 4, vjust = 0.2)

print(spa_sen)
```

## Figure 1e



```{r}
tem_sen <- ggplot(data = purple) +
  # geom_point(aes(x = x, y = y)) +
  geom_line(mapping = aes(x = x, y = y), color = "purple", size = 2) +
  theme(
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.line = element_line(color = "black")
  ) +
  xlim(-0.3, 1) +
  ylim(-0.1, 1) +
  labs(
    # x = expression("Temperature anomaly" ~ t[anom]),
    # y = expression("Flowering day anomaly" ~ d[anom]),
    x = "Temperature anomaly",
    y = "Flowering day anomaly",
    title = " "
  ) +
  annotate("text", x = -0.12, y = 0.1, label = "Early\nflowering", size = 4, hjust = 0.7) +
  annotate("text", x = -0.12, y = 0.92, label = "Late\nflowering", size = 4, hjust = 0.7) +
  annotate("text", x = 0.1, y = -0.1, label = "Cool year", size = 4, vjust = 0.2) +
  annotate("text", x = 0.8, y = -0.1, label = "Warm year", size = 4, vjust = 0.2) +
  # add a horizontal and vertical dash line cross 0,0 and label that they represent 0,0
  geom_point(aes(x = 0.5, y = 0.5), color = "purple", size = 4) +
  geom_hline(yintercept = 0.5, linetype = "dashed") +
  geom_vline(xintercept = 0.5, linetype = "dashed") +
  annotate("text", x = 0.65, y = 0.6, label = "(0, 0)", size = 4)

print(tem_sen)
```

## Figure 1f

```{r}
# Plot
co_gradient <- ggplot(mapping = aes(x = x, y = y)) +
  geom_line(data = purple, color = "purple", size = 3) +
    geom_line(data = red_co, color = "red") +
  # geom_hline(yintercept = 0.4, linetype = "dashed") +
  # geom_vline(xintercept = 0.6, linetype = "dashed") +
  labs(
    # x = expression(t[observe]),
    #    y = expression(d[observe]),
    x = "Temperature observed",
    y = "Flowering day observed",
    title = "Co-gradient adaptation"
  ) +
    geom_text(aes(x = 0.9, y = 0.9, label = "+"), size = 10, color = "black") +
  theme(
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.line = element_line(color = "black")
  )
print(co_gradient)
```
## Figure 1g

```{r}
# Plot
no_adaptation <- ggplot(mapping = aes(x = x, y = y)) +
  geom_line(data = purple, color = "purple", size = 3) +
    geom_line(data = purple, aes(group = 1), color = "red") +
  # geom_hline(yintercept = 0.4, linetype = "dashed") +
  # geom_vline(xintercept = 0.6, linetype = "dashed") +
  labs(
    # x = expression(t[observe]),
    #    y = expression(d[observe]),
    x = "Temperature observed",
    y = "Flowering day observed",
    title = "No adaptation"
  ) +
  theme(
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.line = element_line(color = "black")
  )
print(no_adaptation)
```

## Figure 1h

```{r}
# Plot
counter_gradient <- ggplot(mapping = aes(x = x, y = y)) +
  geom_line(data = purple, color = "purple", size = 3) +
    geom_line(data = red_counter, color = "red") +
  # geom_hline(yintercept = 0.4, linetype = "dashed") +
  # geom_vline(xintercept = 0.6, linetype = "dashed") +
  labs(
    # x = expression(t[observe]),
    #    y = expression(d[observe]),
    x = "Temperature observed",
    y = "Flowering day observed",
    title = "Counter-gradient adaptation"
  ) +
      geom_text(aes(x = 0.9, y = 0.9, label = "-"), size = 10, color = "black") +
  theme(
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.line = element_line(color = "black")
  )
print(counter_gradient)
```
## Combined

```{r}
layout <- c(
  patchwork::area(t = 1, l = 1, b = 6, r = 5),
  patchwork::area(t = 1, l = 6, b = 3, r = 7),
  patchwork::area(t = 4, l = 6, b = 6, r = 7),
  patchwork::area(t = 1, l = 8, b = 3, r = 9),
  patchwork::area(t = 4, l = 8, b = 6, r = 9),
  patchwork::area(t = 7, l = 1, b = 9, r = 3),
  patchwork::area(t = 7, l = 4, b = 9, r = 6),
  patchwork::area(t = 7, l = 7, b = 9, r = 9)
)

plot(layout)
```

```{r fig.width=16, fig.height=12}
# Adjust the margins and layout
combined_plot <- map_plot + normality_plot + anomaly_plot + spa_sen + tem_sen + 
   free(co_gradient) + free(no_adaptation) + free(counter_gradient) +
  plot_layout(design = layout) +
  plot_annotation(tag_levels = "a") 
  

# Print the combined plot
print(combined_plot)
```





# Figure 2: the by group result from the two datasets

## Prepare data

```{r}
by_species <- read_csv(.path$byspecies_summary)
taxa_info <- read_csv(.path$taxa_info)

by_species_wtaxa <- by_species %>%
  left_join(taxa_info) 

by_species_wtaxa_st <- by_species_wtaxa %>%
  mutate(sensitivity_type = "Spatial", estimate_combined = norm_estimate, conf_low_combined = norm_conf_low, conf_high_combined = norm_conf_high) %>%
  bind_rows(
    by_species_wtaxa %>% 
      mutate(sensitivity_type = "Temporal", estimate_combined = anom_estimate, conf_low_combined = anom_conf_low, conf_high_combined = anom_conf_high)
  ) %>%
  mutate(simple_name = str_replace(species, "^([A-Za-z])[^ ]+", "\\1.")) %>% 
  # Arrange alphabetically by taxa and species
  arrange(taxa, species) %>%
  # Abbreviate genus names (e.g., Acer → A.)
  mutate(species_name = forcats::fct_inorder(simple_name),
    label = case_when(
      equal == 0 & anom_estimate < norm_estimate ~ "-",
      equal == 0 & anom_estimate > norm_estimate ~ "+",
      TRUE ~ ""
    )
  )
```


## Figure 2a & b

```{r}
# Example: split taxa into two groups (adjust as needed)
taxa_levels <- unique(by_species_wtaxa_st$taxa)
group1 <- taxa_levels[1:(length(taxa_levels)/2)]
group2 <- taxa_levels[(length(taxa_levels)/2 + 1):length(taxa_levels)]

plot1 <- by_species_wtaxa_st %>%
  filter(dataset == "herb", taxa %in% group1) %>%
  ggplot(aes(x = species_name, y = estimate_combined, color = sensitivity_type)) +
  # define the color
  scale_color_manual(values = c("Spatial" = "red", "Temporal" = "purple")) +

  # Points with dodging for groups
  geom_point(size = 2, position = position_dodge(width = 0.5), shape = 20) +

  # Error bars with the same dodging as points
  geom_errorbar(aes(ymin = conf_low_combined, ymax = conf_high_combined),
    width = 0, position = position_dodge(width = 0.5)
  ) +
    geom_text(aes(y = -26, label = label), vjust = 0, color = "black", size = 8) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
  facet_grid(. ~ taxa, scales = "free_x", space = "free_x") +
    labs(
    title = "",
    x = "Species",
    y = "Sensitivity (days/°C)",
    color = "Sensitivity type"
  ) +
  coord_cartesian(ylim = c(-25, 10)) +
    theme(
    axis.text.x = element_text(face = "italic", angle = 45, hjust = 1),
    strip.text = element_text(face = "italic"), # Italicize facet panel labels
    legend.text = element_markdown(),
    legend.position = "top"
  )

plot2 <- by_species_wtaxa_st %>%
  filter(dataset == "herb", taxa %in% group2) %>%
  ggplot(aes(x = species_name, y = estimate_combined, color = sensitivity_type)) +
  # define the color
  scale_color_manual(values = c("Spatial" = "red", "Temporal" = "purple")) +

  # Points with dodging for groups
  geom_point(size = 2, position = position_dodge(width = 0.5), shape = 20) +

  # Error bars with the same dodging as points
  geom_errorbar(aes(ymin = conf_low_combined, ymax = conf_high_combined),
    width = 0, position = position_dodge(width = 0.5)
  ) +
    geom_text(aes(y = -26, label = label), vjust = 0, color = "black", size = 8) +
  # Add horizontal line at sensitivity = 0
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
  facet_grid(. ~ taxa, scales = "free_x", space = "free_x") +
    labs(
    title = "",
    x = "Species",
    y = "Sensitivity (days/°C)",
    color = "Sensitivity type"
  ) +
  coord_cartesian(ylim = c(-25, 10)) +
    theme(
    axis.text.x = element_text(face = "italic", angle = 45, hjust = 1),
    strip.text = element_text(face = "italic"), # Italicize facet panel labels
    legend.text = element_markdown(),
    legend.position = "top"
  )

print(plot1)
print(plot2)

```


## Figure 2c
```{r}
# Plot
byspecies_scatter <- by_species_wtaxa_st%>%
  filter(dataset == "herb") %>%
  ggplot(aes(x = norm_estimate, y = anom_estimate)) +
  geom_point(alpha = 0.7, size = 3) +
  geom_text(aes(label = label), vjust = -1, color = "black", size = 7) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "grey50") +
  labs(
    x = "Spatial Sensitivity (days/°C)",
    y = "Temporal Sensitivity (days/°C)",
    color = "Dataset"
  ) +
  ylim(-25,10) +
  xlim(-25,3) +
  theme(legend.position = "top")


print(byspecies_scatter)
```


## Combined

```{r}
layout <- c(
  patchwork::area(t = 1, l = 1, b = 1, r = 1),
  patchwork::area(t = 1, l = 2, b = 1, r = 4),
  patchwork::area(t = 2, l = 1, b = 2, r = 4)
)

plot(layout)
```


```{r fig.width=20, fig.height=12}
# Adjust the margins and layout
Figure_2 <- free(byspecies_scatter, type = "space", side = "b") + plot1 + plot2 +
  plot_layout(design = layout, guides = "collect") + # Example: change heights as needed
  plot_annotation(tag_levels = "a") &
  theme(legend.position = "top")

# Print the combined plot
print(Figure_2)
```


# Table 1
```{r}
table1 <- by_species_wtaxa_st %>% 
  filter(dataset=="herb") %>% 
  group_by(genus) %>% 
  summarise(
    count = n()/2,
    equal = sum(equal)/2,
    pro_euqal = equal/count,
    neg = sum(label=="-")/2,
    pos = sum(label=="+")/2)

print(table1)
```


# Figure 3 compare two dataset sensitivity

```{r}
by_species_wtaxa_dataset <- by_species_wtaxa_st %>%
  group_by(species) %>%
  filter(all(c("herb", "npn") %in% dataset)) %>%
  group_by(species, sensitivity_type) %>%
  mutate(
    # Indicator for non-overlapping confidence intervals
    equal = as.integer(max(conf_low_combined) < min(conf_high_combined)),
    # Extract estimates for each dataset
    npn_estimate = estimate_combined[dataset == "npn"],
    herb_estimate = estimate_combined[dataset == "herb"],
    # Assign label: "+" if npn < herb, "-" if herb < npn, "" otherwise
    dataset_label = case_when(
      equal == 0 & npn_estimate < herb_estimate ~ "+",
      equal == 0 & herb_estimate < npn_estimate ~ "-",
      TRUE ~ ""
    )
  )

```


```{r fig.width=15, fig.height=9}
by_species_wtaxa_dataset %>%
  ggplot(aes(y = estimate_combined, x = species_name, color = dataset)) +
  scale_color_manual(
    values = c("npn" = "#0751f1", "herb" = "#582800"),
    labels = c("npn" = "Field observation", "herb" = "Herbarium")
  ) +
  geom_point(shape = 20, size = 2, position = position_dodge(width = 0.5)) +
  coord_cartesian(ylim = c(-20, 10)) + # Now set limits for y-axis
  geom_errorbar(aes(ymin = conf_low_combined, ymax = conf_high_combined), width = 0, position = position_dodge(width = 0.5)) +
  geom_hline(yintercept = 0, linetype = "dashed") + # Horizontal line at y=0
      geom_text(aes(y = -19, label = dataset_label), vjust = 0, color = "black", size = 8) +
  labs(
    title = "",
    y = "Sensitivity (days/°C)",  # y and x labels swapped
    x = "Species",
    color = "Dataset"
  ) +
  facet_grid(sensitivity_type ~ taxa , scales = "free_x", space = "free_x") + # free_x instead of free_y
  theme(
    axis.text.x = element_text(face = "italic", angle = 45, hjust = 1), # Now italicize x-axis labels
    legend.text = element_markdown(),
    legend.position = "top"
  )


```

# Table 2
```{r}
table2_sp <- by_species_wtaxa_dataset %>% 
  filter(sensitivity_type=="Spatial") %>% 
  group_by(genus) %>% 
  summarise(
    count = n()/2,
    equal = sum(equal)/2,
    pro_euqal = equal/count,
    neg = sum(dataset_label=="-")/2,
    pos = sum(dataset_label=="+")/2)

print(table2_sp)
```

```{r}
table2_te <- by_species_wtaxa_dataset %>% 
  filter(sensitivity_type=="Temporal") %>% 
  group_by(genus) %>% 
  summarise(
    count = n()/2,
    equal = sum(equal)/2,
    pro_euqal = equal/count,
    neg = sum(dataset_label=="-")/2,
    pos = sum(dataset_label=="+")/2)

print(table2_te)
```


# Figure 4: the HMM and PMM results

## Figure 4a: byspeceis boxplot
```{r}
by_species_herb <- by_species %>%
  filter(dataset == "herb")

byspecies_boxplot_spatial <- by_species_herb %>% 
  ggplot() +
  geom_boxplot(aes(x = norm_estimate))
# remove y axis
# label mean and sd

PMM_mean_spatial <- PMM_samples %>% 
  ggplot() +
  geom_density(aes(x = b_zs), alpha = 0.5) 

PMM_variance_spatial <- PMM_samples %>% 
  ggplot() +
  geom_density(aes(x = sigma_interceptsbs), alpha = 0.5) 
  


```

```{r}
# Load PMM object
PMM <- read_rds(.path$sample_pmm)

# Summarize results
PMM_summary <- summary(PMM)
PMM_group <- as.data.frame(PMM_summary$summary)

# Calculate parameter differences
PMM_samples <- as.data.frame(PMM)
n_groups <- 74#82

PMM_b_diff <- sapply(1:n_groups, function(i) {
  PMM_samples[[paste0("b_spatial[", i, "]")]] - PMM_samples[[paste0("b_temporal[", i, "]")]]
})

PMM_b_diff_summary <- apply(PMM_b_diff, 2, function(x) {
  c(mean = mean(x), sd = sd(x), quantile(x, c(0.025, 0.5, 0.975)))
})
PMM_b_diff_summary <- t(PMM_b_diff_summary)

# Reshape for spatial/temporal comparison
PMM_species_data <- PMM_group %>%
  tibble::rownames_to_column("parameter") %>%
  filter(grepl("b_spatial\\[|b_temporal\\[", parameter)) %>%
  mutate(
    param_type = gsub("\\[\\d+\\]", "", parameter),
    group = as.numeric(gsub(".*\\[(\\d+)\\]", "\\1", parameter))
  ) %>%
  dplyr::select(group, param_type, mean) %>%
  tidyr::pivot_wider(
    names_from = param_type,
    values_from = mean
  )

```

```{r}
PMM_species_data_wci <- PMM_group %>%
  tibble::rownames_to_column("parameter") %>%
  filter(grepl("b_spatial\\[|b_temporal\\[", parameter)) %>%
  mutate(
    param_type = gsub("\\[\\d+\\]", "", parameter),
    group = as.numeric(gsub(".*\\[(\\d+)\\]", "\\1", parameter))
  ) %>%
  dplyr::select(group, param_type, mean, `2.5%`, `97.5%`) %>%
  tidyr::pivot_longer(
    cols = c(mean, `2.5%`, `97.5%`),
    names_to = "statistic",
    values_to = "value"
  ) %>%
  tidyr::pivot_wider(
    names_from = c(statistic, param_type),
    values_from = value,
    names_glue = "{statistic}_{param_type}"
  ) %>%
  cbind(PMM_b_diff_summary %>% as.data.frame() %>% dplyr::select("mean", "2.5%", "97.5%"))

species_sensitivity_PMM <- PMM_species_data_wci %>%
  cbind(phylo_species_id) %>%
  left_join(taxa_info, by = "species") %>%
  mutate(simple_name = str_replace(species, "^([A-Za-z])[^ ]+", "\\1."))
```


```{r}
# Boxplot: Spatial sensitivity by species (herb only), mean & SD labeled
mean_norm <- mean(by_species_herb$norm_estimate, na.rm = TRUE)
sd_norm <- sd(by_species_herb$norm_estimate, na.rm = TRUE)

byspecies_boxplot_spatial <- by_species_herb %>%
  ggplot(aes(x = norm_estimate)) +
  geom_boxplot() +
  theme(
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  ) +
  labs(
    x = "Spatial sensitivity (days/°C)",
    title = " "
  ) +
  geom_vline(xintercept = mean_norm, color = "red", linetype = "dashed") +
  annotate("text", x = mean_norm, y = 0.6, 
           label = paste0("Mean = ", round(mean_norm, 2)), 
           vjust = 0, hjust = -0.1, size = 3) +
  annotate("text", x = mean_norm, y = 0.5, 
           label = paste0("SD = ", round(sd_norm, 2)), 
           vjust = 0, hjust = -0.1, size = 3)

print(byspecies_boxplot_spatial)
```

```{r}
# Calculate mean
mean_b <- mean(PMM_samples$b_zs, na.rm = TRUE)

# Calculate mode (for continuous data, use kernel density estimate)
find_mode <- function(x) {
  d <- density(x, na.rm = TRUE)
  d$x[which.max(d$y)]
}
mode_b <- find_mode(PMM_samples$b_zs)

# Calculate 95% credible interval (2.5% and 97.5% quantiles)
ci_lower <- quantile(PMM_samples$b_zs, 0.025, na.rm = TRUE)
ci_upper <- quantile(PMM_samples$b_zs, 0.975, na.rm = TRUE)

ggplot(PMM_samples, aes(x = b_zs)) +
  geom_density() +
  # Add mean line
  geom_vline(xintercept = mean_b, color = "red", linetype = "dashed", size = 1) +
  # Add 95% credible interval lines
  geom_vline(xintercept = ci_lower, color = "darkgreen", linetype = "dotdash", size = 1) +
  geom_vline(xintercept = ci_upper, color = "darkgreen", linetype = "dotdash", size = 1) +
  labs(
    x = "Posterior of spatial sensitivity mean",
    y = "Density",
    title = ""
  ) +
  annotate("text", x = mean_b, y = 0, label = paste0("Mean = ", round(mean_b, 2)), hjust = 0, color = "red") +
  annotate("text", x = ci_lower, y = 0, label = paste0("2.5% = ", round(ci_lower, 2)), hjust = 0, color = "darkgreen") +
  annotate("text", x = ci_upper, y = 0, label = paste0("97.5% = ", round(ci_upper, 2)), hjust = 0, color = "darkgreen")

```

```{r}
# Calculate mean
mean_b <- mean(PMM_samples$sigma_interceptsbs, na.rm = TRUE)

# Calculate mode (for continuous data, use kernel density estimate)
find_mode <- function(x) {
  d <- density(x, na.rm = TRUE)
  d$x[which.max(d$y)]
}
mode_b <- find_mode(PMM_samples$sigma_interceptsbs)

# Calculate 95% credible interval (2.5% and 97.5% quantiles)
ci_lower <- quantile(PMM_samples$sigma_interceptsbs, 0.025, na.rm = TRUE)
ci_upper <- quantile(PMM_samples$sigma_interceptsbs, 0.975, na.rm = TRUE)

ggplot(PMM_samples, aes(x = sigma_interceptsbs)) +
  geom_density() +
  # Add mean line
  geom_vline(xintercept = mean_b, color = "red", linetype = "dashed", size = 1) +
  geom_vline(xintercept = mode_b, color = "blue", linetype = "dashed", size = 1) +
  # Add 95% credible interval lines
  geom_vline(xintercept = ci_lower, color = "darkgreen", linetype = "dotdash", size = 1) +
  geom_vline(xintercept = ci_upper, color = "darkgreen", linetype = "dotdash", size = 1) +
  labs(
    x = "Posterior of spatial sensitivity standard deviation",
    y = "Density",
    title = ""
  ) +
  annotate("text", x = mean_b, y = 0, label = paste0("Mean = ", round(mean_b, 2)), hjust = 0, color = "red") +
  annotate("text", x = mode_b, y = 0, label = paste0("Mode = ", round(mode_b, 2)), hjust = 0, vjust = -1, color = "blue") +
  annotate("text", x = ci_lower, y = 0, label = paste0("2.5% = ", round(ci_lower, 2)), hjust = 0, color = "darkgreen") +
  annotate("text", x = ci_upper, y = 0, label = paste0("97.5% = ", round(ci_upper, 2)), hjust = 0, color = "darkgreen")

```

```{r}
# Calculate mean
mean_b <- mean(PMM_samples$lam_interceptsbs, na.rm = TRUE)

# Calculate mode (for continuous data, use kernel density estimate)
find_mode <- function(x) {
  d <- density(x, na.rm = TRUE)
  d$x[which.max(d$y)]
}
mode_b <- find_mode(PMM_samples$lam_interceptsbs)

# Calculate 95% credible interval (2.5% and 97.5% quantiles)
ci_lower <- quantile(PMM_samples$lam_interceptsbs, 0.025, na.rm = TRUE)
ci_upper <- quantile(PMM_samples$lam_interceptsbs, 0.975, na.rm = TRUE)

ggplot(PMM_samples, aes(x = lam_interceptsbs)) +
  geom_density() +
  # Add mean line
  geom_vline(xintercept = mean_b, color = "red", linetype = "dashed", size = 1) +
  geom_vline(xintercept = mode_b, color = "blue", linetype = "dashed", size = 1) +
  # Add 95% credible interval lines
  geom_vline(xintercept = ci_lower, color = "darkgreen", linetype = "dotdash", size = 1) +
  geom_vline(xintercept = ci_upper, color = "darkgreen", linetype = "dotdash", size = 1) +
  labs(
    x = "Posterior of spatial sensitivity standard deviation",
    y = "Density",
    title = ""
  ) +
  annotate("text", x = mean_b, y = 0, label = paste0("Mean = ", round(mean_b, 2)), hjust = 0, color = "red") +
  annotate("text", x = mode_b, y = 0, label = paste0("Mode = ", round(mode_b, 2)), hjust = 1, vjust = -1, color = "blue") +
  annotate("text", x = ci_lower, y = 0, label = paste0("2.5% = ", round(ci_lower, 2)), hjust = 0, color = "darkgreen") +
  annotate("text", x = ci_upper, y = 0, label = paste0("97.5% = ", round(ci_upper, 2)), hjust = 1, vjust = -2, color = "darkgreen")

```


```{r}
byspecies_PMM <- by_species_herb %>%
  select(species, anom_estimate, norm_estimate, count) %>%
  inner_join(
    species_sensitivity_PMM %>%
      select(species, mean_b_spatial, mean_b_temporal),
    by = "species"
  ) %>%
  inner_join(
    species_sensitivity_HMM %>%
      select(species, mean_b_spatial, mean_b_temporal) %>%
      rename(
        norm_estimate_HMM = mean_b_spatial,
        anom_estimate_HMM = mean_b_temporal
      ),
    by = "species"
  )

ggplot(byspecies_PMM) +
  # Draw segments with arrows
  geom_segment(
    aes(
      x = norm_estimate,
      y = anom_estimate,
      xend = mean_b_spatial,
      yend = mean_b_temporal,
          size = count

    ),
    arrow = arrow(length = unit(0.2, "cm")),
    color = "gray40",
    alpha = 0.2
  ) +
  # Start points (e.g., blue)
  geom_point(
    aes(x = norm_estimate, y = anom_estimate),
    color = "blue",
    size = 3
  ) +
  # End points (e.g., red)
  geom_point(
    aes(x = mean_b_spatial, y = mean_b_temporal),
    color = "red",
    size = 3
  ) +
    labs(
    x = "Spatial sensitivity (days/°C)",
    y = "Temporal sensitivity (days/°C)",
    title = "From by-speceis model (blue) to PMM (red)"
  )
  
```


```{r}
ggplot(byspecies_PMM) +
  # Draw segments with arrows
  geom_segment(
    aes(
      x = norm_estimate_HMM,
      y = anom_estimate_HMM,
      xend = mean_b_spatial,
      yend = mean_b_temporal,
          size = count

    ),
    arrow = arrow(length = unit(0.2, "cm")),
    color = "gray40",
    alpha = 0.2
  ) +
  # Start points (e.g., blue)
  geom_point(
    aes(x = norm_estimate_HMM, y = anom_estimate_HMM),
    color = "blue",
    size = 3
  ) +
  # End points (e.g., red)
  geom_point(
    aes(x = mean_b_spatial, y = mean_b_temporal),
    color = "red",
    size = 3
  )+
    labs(
    x = "Spatial sensitivity (days/°C)",
    y = "Temporal sensitivity (days/°C)",
    title = "From HMM (blue) to PMM (red)"
  )
```


## Combined

```{r fig.width=14, fig.height=9}
combined_hier <- HMM_density + HMM_diff + HMM_scatter +
  PMM_density + PMM_diff + PMM_scatter +
  plot_annotation(tag_levels = "a")

print(combined_hier)
```


## Table

```{r}
# Temporal table
temporal_table <- data.frame(
  Model = c("By Species", "HMM", "PMM"),
  Mean = c(
    mean(by_species_herb$anom_estimate, na.rm = TRUE),
    HMM_group["b_zt", "mean"],
    PMM_group["b_zt", "mean"]
  ),
  SD = c(
    sd(by_species_herb$anom_estimate, na.rm = TRUE),
    HMM_group["sigma_interceptsbt", "mean"],
    PMM_group["sigma_interceptsbt", "mean"]
  )
)

# Spatial table
spatial_table <- data.frame(
  Model = c("By Species", "HMM", "PMM"),
  Mean = c(
    mean(by_species_herb$norm_estimate, na.rm = TRUE),
    HMM_group["b_zs", "mean"],
    PMM_group["b_zs", "mean"]
  ),
  SD = c(
    sd(by_species_herb$norm_estimate, na.rm = TRUE),
    HMM_group["sigma_interceptsbs", "mean"],
    PMM_group["sigma_interceptsbs", "mean"]
  )
)

print(temporal_table)
print(spatial_table)


```


# Figure 5: Estimated sensitivity for wind pollinated trees flower time with their phylogenetic signal

## Prepare data

```{r}
tree <- read.tree(.path$tree)

tree_species <- rownames(vcv(tree, corr = TRUE)) %>%
  gsub("_", " ", .)

phylo_species_id <- data.frame(species = tree_species, sppid = seq_along(tree_species))
```



## Figure 5a: temporal tree

```{r fig.width=6, fig.height=15}
source("../scripts/plot_temporal_tree.R")
temporal_tree <- gridExtra::grid.arrange(tree_plot, sensitivity_plot, nrow = 1, widths = c(1, 2))
```

## Figure 5b: spatial tree

```{r fig.width=6, fig.height=15}
source("../scripts/plot_spatial_tree.R")
spatial_tree <- gridExtra::grid.arrange(tree_plot, sensitivity_plot, nrow = 1, widths = c(1, 2))
```

## Combined

```{r fig.width=12, fig.height=15}
Figure_5 <- spatial_tree + temporal_tree
  plot_annotation(tag_levels = "a") 

# Print the combined plot
print(Figure_5)
```



# Supplementary Figure 2: sensitivity consistency among species

```{r}
by_species_wtaxa_combined %>%
  ggplot(aes(x = sensitivity_type, y = estimate_combined, fill = sensitivity_type)) +
  geom_half_boxplot(side = "l", alpha = 0.6, width = 0.3) + # From ggpol
  geom_half_violin(side = "r", alpha = 0.6, width = 1) + # From ggdist
  facet_grid(~dataset,
    scales = "free",
    labeller = labeller(dataset = c(herb = "Herbarium", npn = "Field observations"))
  ) +
  scale_fill_manual(values = c("Spatial" = "red", "Temporal" = "purple")) +
  labs(x = "Sensitivity type", y = "Sensitivity (days/°C)") +
  theme_classic() +
  theme(legend.position = "none")
```


# Supplimentary Figure 3: compare two dataset raw data

```{r}
raw_compare <- temperature_data %>%
  group_by(species) %>%
  filter(
    all(c("herb", "npn") %in% dataset) & # Both datasets present
      sum(dataset == "herb") > 30 & # >30 herb records
      sum(dataset == "npn") > 30 # >30 npn records
  ) %>%
  ungroup()
```

```{r fig.width=10, fig.height=8}
raw_compare %>%
  ggplot(aes(x = yeart, y = as.Date(doy, origin = "2024-11-01"), color = dataset)) +
  scale_color_manual(
    values = c("npn" = "#0751f1", "herb" = "#582800"),
    labels = c("npn" = "Field observation", "herb" = "Herbarium")
  ) +
  geom_point(alpha = 0.1) +
  geom_smooth(aes(group = dataset), method = "lm", se = FALSE, size = 1) +
  labs(
    title = " ",
    x = "Spring average temperature (°C)",
    y = "Month",
    color = "Dataset"
  ) +
  facet_wrap(~species) +
  scale_y_date(date_labels = "%b") + # Format y-axis as months
  theme_classic() +
  theme(
    legend.position = "top", # c(0.8, 0.05),
    strip.text = element_text(face = "italic"),
    legend.text = element_markdown()
  )
```

# Supplimentary Figure 4: speceis composition

```{r fig.width=10, fig.height=6}
# Create the plot
temperature_data %>%
  filter(species %in% taxa_info$species) %>%
  mutate(simple_name = str_replace(species, "^([A-Za-z])[^ ]+", "\\1.")) %>%
  ggplot(aes(x = simple_name, fill = dataset)) +
  geom_bar(position = "dodge", stat = "count") + # Adjust bar width
  scale_y_log10() +
  facet_grid(. ~ taxa, scales = "free_x", space = "free_x") +
  scale_fill_manual(
    values = c("npn" = "#0751f1", "herb" = "#582800"),
    labels = c("npn" = "Field observation", "herb" = "Herbarium")
  ) +
  labs(
    x = "Species",
    y = "Number of records",
    fill = "Dataset"
  ) +
  theme_classic() +
  theme(
    axis.text.x = element_text(face = "italic", angle = 90, hjust = 1, vjust = 0.5),
    strip.text = element_text(face = "italic", angle = 90), # Italicize facet panel labels
    legend.text = element_markdown(),
    legend.position = "top"
  )
```
