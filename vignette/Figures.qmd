---
title: "Figures"
format: 
  html:
    toc: true
    toc-float: true
editor: visual
---

```{r setup, echo=FALSE, message=FALSE}
source("../scripts/_setup_figures.R")
```

# Figure 1 SFTS concept

## Figure 1a

```{r}
anom <- read.csv(.path$norm_anom) %>%
  slice(1:(n() - 1))

temperature_data <- read.csv(.path$temperature_data)

count_data <- temperature_data %>%
  group_by(dataset, year) %>%
  summarize(count = n())
```

```{r}
# Create a double y-axis plot
temperature_plot <- ggplot() +
  geom_line(data = anom, aes(x = year, y = avg_anomaly), color = "purple") +
  geom_point(data = anom, aes(x = year, y = avg_anomaly), color = "purple") +
  labs(
    x = "Year",
    y = "Temperature\nanomaly (°C)"
  ) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "black") # Add dashed horizontal line

# Second plot: Number of records
records_plot <- ggplot() + # "Field observation" = "#0751f1", "Herbarium" = "#582800"
  geom_col(data = count_data %>% filter(dataset == "npn"), aes(x = year, y = count), fill = "#0751f1", alpha = 0.5) +
  geom_col(data = count_data %>% filter(dataset == "herb"), aes(x = year, y = count), fill = "#582800", alpha = 0.5) +
  labs(
    x = "Year",
    y = "Number of\nrecords"
  )

# Combine the two plots with a shared x-axis using patchwork
double_y_plot <- temperature_plot / records_plot


# Display the plot
print(double_y_plot)
```

## Figure 1b

### Get latidude temperature normality data

```{r}
prism_raster <- raster(.path$prism_norm)

# Extract temperature values by latitude
lat_values <- seq(24, 50, by = 0.5) # Adjust range as needed
long_values <- rep(-98, length(lat_values)) # Use a central longitude

temp_by_lat <- raster::extract(prism_raster, cbind(long_values, lat_values))

# Create a data frame with latitude and temperature
norm <- data.frame(latitude = lat_values, temperature = temp_by_lat)
```

```{r}
# Optional: Create a plot of temperature by latitude
normality_plot <- ggplot(norm, aes(x = temperature, y = latitude)) +
  geom_line(color = "red") +
  theme(
    axis.text.y = element_blank(),
    axis.title.y = element_blank(),
    axis.ticks.y = element_blank(),
    plot.margin = margin(t = 20, r = 5, b = 40, l = 0, unit = "pt")
  ) +
  labs(
    x = "Temperature normality (°C)"
  ) +
  scale_y_continuous(limits = c(24, 50))

print(normality_plot)
```

```{r}
# Load US states as sf object
us_states <- st_as_sf(maps::map("state", plot = FALSE, fill = TRUE))


map_plot <- ggplot() +
  geom_sf(data = us_states, fill = NA, color = "grey") +
  geom_point(data = temperature_data, aes(x = lon, y = lat, color = dataset), alpha = 0.5, size = 0.5) +
  scale_color_manual(
    values = c("herb" = "#582800", "npn" = "#0751f1"),
    labels = c("herb" = "Herbarium", "npn" = "Field observation")
  ) +
  xlim(-127, -66) +
  ylim(24, 50) +
  theme(
    legend.position = c(0.15, 0.15)
  ) +
  labs(
    color = "Data source",
    x = "Longitude",
    y = "Latitude",
    title = " "
  )

print(map_plot)
```

## Figure 1c

```{r}
black <- data.frame(x = c(0, 1), y = c(1, 0), color = "black")
purple_center <- data.frame(x = seq(0.2, 0.8, by = 0.2), y = 1 - seq(0.2, 0.8, by = 0.2))
```

```{r}
tem_sen <- ggplot(data = black) +
  # geom_point(aes(x = x, y = y)) +
  geom_line(mapping = aes(x = x, y = y), color = "purple", size = 2) +
  theme(
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.line = element_line(color = "black")
  ) +
  xlim(-0.3, 1) +
  ylim(-0.1, 1) +
  labs(
    # x = expression("Temperature anomaly" ~ t[anom]),
    # y = expression("Flowering day anomaly" ~ d[anom]),
    x = "Temperature anomaly",
    y = "Flowering day anomaly",
    title = " "
  ) +
  annotate("text", x = -0.12, y = 0.1, label = "Early\nflowering", size = 4, hjust = 0.7) +
  annotate("text", x = -0.12, y = 0.92, label = "Late\nflowering", size = 4, hjust = 0.7) +
  annotate("text", x = 0.1, y = -0.1, label = "Cold year", size = 4, vjust = 0.2) +
  annotate("text", x = 0.9, y = -0.1, label = "Hot year", size = 4, vjust = 0.2) +
  # add a horizontal and vertical dash line cross 0,0 and label that they represent 0,0
  geom_point(aes(x = 0.5, y = 0.5), color = "purple", size = 4) +
  geom_hline(yintercept = 0.5, linetype = "dashed") +
  geom_vline(xintercept = 0.5, linetype = "dashed") +
  annotate("text", x = 0.65, y = 0.6, label = "(0, 0)", size = 4)

print(tem_sen)
```

## Figure 1d

```{r}
spa_sen <- ggplot(data = black) +
  # geom_point(aes(x = x, y = y)) +
  geom_line(mapping = aes(x = x, y = y), color = "red") +
  theme(
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.line = element_line(color = "black")
  ) +
  xlim(-0.3, 1) +
  ylim(-0.1, 1) +
  labs(
    # x = expression("Temperature normality" ~ t[norm]),
    # y = expression("Flowering day normality" ~ d[norm]),
    x = "Temperature normality",
    y = "Flowering day normality",
    title = " "
  ) +
  annotate("text", x = -0.12, y = 0.1, label = "Early\nflowering", size = 4, hjust = 0.7) +
  annotate("text", x = -0.12, y = 0.92, label = "Late\nflowering", size = 4, hjust = 0.7) +
  annotate("text", x = 0.1, y = -0.1, label = "Cold place", size = 4, vjust = 0.2) +
  annotate("text", x = 0.85, y = -0.1, label = "Hot place", size = 4, vjust = 0.2)

print(spa_sen)
```

## Figure 1e

```{r}
#
# Function to calculate line segments
calculate_segments <- function(center, slope, length) {
  start_x <- center$x - length / 2 * cos(atan(slope))
  start_y <- center$y - length / 2 * sin(atan(slope))
  end_x <- center$x + length / 2 * cos(atan(slope))
  end_y <- center$y + length / 2 * sin(atan(slope))

  tibble(start_x = start_x, start_y = start_y, end_x = end_x, end_y = end_y)
}

# Apply the function to all centers
segments_1 <- bind_rows(lapply(1:nrow(purple_center), function(i) {
  calculate_segments(purple_center[i, ], -1.5, 0.18)
}))
segments_2 <- bind_rows(lapply(1:nrow(purple_center), function(i) {
  calculate_segments(purple_center[i, ], -1, 0.18)
}))
segments_3 <- bind_rows(lapply(1:nrow(purple_center), function(i) {
  calculate_segments(purple_center[i, ], -0.5, 0.18)
}))
```

plot

```{r}
# Plot
spa_tem <- ggplot(mapping = aes(x = x, y = y)) +
  geom_line(data = black, aes(group = 1), color = "red") +
  geom_point(data = purple_center, color = "purple", size = 3) +
  geom_segment(data = segments_2, aes(x = start_x, y = start_y, xend = end_x, yend = end_y), color = "purple", size = 2) +
  # geom_hline(yintercept = 0.4, linetype = "dashed") +
  # geom_vline(xintercept = 0.6, linetype = "dashed") +
  labs(
    # x = expression(t[observe]),
    #    y = expression(d[observe]),
    x = "Temperature observed",
    y = "Flowering day observed",
    title = " "
  ) +
  theme(
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.line = element_line(color = "black")
  )
print(spa_tem)
```

## Combined

```{r}
layout <- c(
  patchwork::area(t = 1, l = 1, b = 1, r = 12),
  patchwork::area(t = 2, l = 1, b = 2, r = 12),
  patchwork::area(t = 3, l = 1, b = 6, r = 10),
  patchwork::area(t = 3, l = 11, b = 6, r = 12),
  patchwork::area(t = 1, l = 13, b = 2, r = 16),
  patchwork::area(t = 3, l = 13, b = 4, r = 16),
  patchwork::area(t = 5, l = 13, b = 6, r = 16)
)

plot(layout)
```

```{r fig.width=18, fig.height=11}
# Adjust the margins and layout
combined_plot <- double_y_plot + map_plot + normality_plot +
  tem_sen + spa_sen + spa_tem +
  plot_layout(design = layout) +
  plot_annotation(tag_levels = "a")

# Print the combined plot
print(combined_plot)
```

# Figure 2: the by group result from the two datasets

## Prepare data

```{r}
by_species <- read_csv(.path$byspecies_summary)
taxa_info <- read_csv(.path$taxa_info)

by_species_wtaxa_combined <- by_species %>%
  left_join(taxa_info) %>%
  mutate(sensitivity_type = "Spatial", estimate_combined = norm_estimate, conf_low_combined = norm_conf_low, conf_high_combined = norm_conf_high) %>%
  bind_rows(
    by_species %>%
      left_join(taxa_info) %>%
      mutate(sensitivity_type = "Temporal", estimate_combined = anom_estimate, conf_low_combined = anom_conf_low, conf_high_combined = anom_conf_high)
  ) %>%
  mutate(simple_name = str_replace(species, "^([A-Za-z])[^ ]+", "\\1."))

by_species_wtaxa_combined_h <- by_species_wtaxa_combined %>%
  # Arrange alphabetically by taxa and species
  arrange(taxa, species) %>%
  # Abbreviate genus names (e.g., Acer → A.)
  mutate(species_name = forcats::fct_inorder(simple_name))
```

## Figure 2a
```{r fig.width=15, fig.height=6}
herb_byspecies_plot <- by_species_wtaxa_combined_h %>%
  # Fix: Remove desc() to maintain alphabetical order
  filter(dataset == "herb") %>%
  ggplot(aes(x = species_name, y = estimate_combined, color = sensitivity_type)) +
  # define the color
  scale_color_manual(values = c("Spatial" = "red", "Temporal" = "purple")) +

  # Points with dodging for groups
  geom_point(size = 2, position = position_dodge(width = 0.5), shape = 3) +

  # Error bars with the same dodging as points
  geom_errorbar(aes(ymin = conf_low_combined, ymax = conf_high_combined),
    width = 0, position = position_dodge(width = 0.5)
  ) +
  geom_text(aes(y = -26, label = ifelse(equal == 0, "*", "")), vjust = 0.75, color = "black") +

  # Add horizontal line at sensitivity = 0
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +

  # Facet by taxa to group species
  facet_grid(. ~ taxa, scales = "free_x", space = "free_x") +

  # Clip the plot to specific y-limits
  coord_cartesian(ylim = c(-25, 10)) +

  # Set axis labels, title, and color legend
  labs(
    title = "",
    x = "Species",
    y = "Sensitivity (days/°C)",
    color = "Sensitivity type"
  ) +

  # Apply themes for classic look, italics, and markdown legend
  theme(
    axis.text.x = element_text(face = "italic", angle = 45, hjust = 1),
    strip.text = element_text(face = "italic"), # Italicize facet panel labels
    legend.text = element_markdown(),
    legend.position = "top"
  )

print(herb_byspecies_plot)
```

## Figure 2b
```{r fig.width=15, fig.height=6}
npn_byspecies_plot <- by_species_wtaxa_combined_h %>%
  filter(dataset == "npn") %>%
  ggplot(aes(x = species_name, y = estimate_combined, color = sensitivity_type)) +
  # define the color
  scale_color_manual(values = c("Spatial" = "red", "Temporal" = "purple")) +

  # Points with dodging for groups
  geom_point(size = 2, position = position_dodge(width = 0.5), shape = 3) +

  # Error bars with the same dodging as points
  geom_errorbar(aes(ymin = conf_low_combined, ymax = conf_high_combined),
    width = 0, position = position_dodge(width = 0.5)
  ) +
  geom_text(aes(y = -26, label = ifelse(equal == 0, "*", "")), vjust = 0.75, color = "black") +

  # Add horizontal line at sensitivity = 0
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +

  # Facet by taxa to group species
  facet_grid(. ~ taxa, scales = "free_x", space = "free_x") +

  # Clip the plot to specific y-limits
  coord_cartesian(ylim = c(-25, 10)) +

  # Set axis labels, title, and color legend
  labs(
    title = " ",
    x = "Species",
    y = "Sensitivity (days/°C)",
    color = "Sensitivity type"
  ) +

  # Apply themes for classic look, italics, and markdown legend
  theme(
    axis.text.x = element_text(face = "italic", angle = 45, hjust = 1),
    strip.text = element_text(face = "italic"), # Italicize facet panel labels
    legend.text = element_markdown(),
    legend.position = "none"
  )

print(npn_byspecies_plot)
```

## Figure 2c
```{r}
byspecies_scatter <- by_species %>%
  ggplot() +
  geom_point(aes(x = norm_estimate, y = anom_estimate, color = dataset), alpha = 0.7) +
  scale_color_manual(
    values = c("npn" = "#0751f1", "herb" = "#582800"),
    labels = c("npn" = "Field observation", "herb" = "Herbarium")
  ) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "grey50") +
  labs(
    x = "Spatial Sensitivity (days/°C)",
    y = "Temporal Sensitivity (days/°C)",
    color = "Dataset"
  ) +
  theme(legend.position = "top")

print(byspecies_scatter)
```


## Combined

```{r}
layout <- c(
  patchwork::area(t = 1, l = 1, b = 1, r = 4),
  patchwork::area(t = 2, l = 1, b = 2, r = 3),
  patchwork::area(t = 2, l = 4, b = 2, r = 4)
)

plot(layout)
```

```{r fig.width=20, fig.height=12}
# Adjust the margins and layout
Figure_2 <- herb_byspecies_plot + npn_byspecies_plot + byspecies_scatter +
  plot_layout(design = layout, guides = "collect") + # Example: change heights as needed
  plot_annotation(tag_levels = "a") &
  theme(legend.position = "top")


# Print the combined plot
print(Figure_2)
```


# Figure 3 compare two dataset sensitivity

```{r}
by_species_wtaxa_combined_dataset <- by_species_wtaxa_combined %>%
  # Arrange alphabetically by taxa and species
  arrange(taxa, species) %>%
  # Abbreviate genus names (e.g., Acer → A.)
  mutate(species_name = forcats::fct_reorder(simple_name, desc(simple_name))) %>%
  # Fix spelling and filter species present in both datasets
  group_by(species) %>%
  filter(all(c("herb", "npn") %in% dataset)) %>%
  # Group by species and sensitivity type
  group_by(species, sensitivity_type) %>%
  # Calculate overlap indicator
  mutate(
    equal = as.integer(max(conf_low_combined) < min(conf_high_combined))
  )
```

```{r fig.width=9, fig.height=10}
by_species_wtaxa_combined_dataset %>%
  ggplot(aes(x = estimate_combined, y = species_name, color = dataset)) +
  scale_color_manual(
    values = c("npn" = "#0751f1", "herb" = "#582800"),
    labels = c("npn" = "Field observation", "herb" = "Herbarium")
  ) +
  geom_point(shape = 3, size = 2, position = position_dodge(width = 0.5)) + # Adjust width as needed
  coord_cartesian(xlim = c(-20, 10)) + # This will clip the error bars instead of removing them
  geom_errorbar(aes(xmin = conf_low_combined, xmax = conf_high_combined), width = 0, position = position_dodge(width = 0.5)) +
  geom_vline(xintercept = 0, linetype = "dashed") +
  geom_text(aes(x = -21, label = ifelse(equal == 0, "*", "")), vjust = 0.75, color = "black") +
  labs(
    title = "",
    x = "Sensitivity (days/°C)",
    y = "Species",
    color = "Dataset"
  ) +
  facet_grid(taxa ~ sensitivity_type, scales = "free_y", space = "free_y") +
  theme(
    axis.text.y = element_text(face = "italic"),
    legend.text = element_markdown() # Italicize legend text
  ) +
  # Apply themes for classic look, italics, and markdown legend
  theme(
    axis.text.y = element_text(face = "italic"),
    legend.position = "top"
  )
```

# Figure 4: the HMM and PMM results

## HMM
```{r}
# Load HMM object
HMM <- read_rds(.path$sample_hmm)

# Summarize results
HMM_summary <- summary(HMM)
HMM_group <- as.data.frame(HMM_summary$summary)

# Calculate parameter differences
HMM_samples <- as.data.frame(HMM)
n_groups <- 82

HMM_b_diff <- sapply(1:n_groups, function(i) {
  HMM_samples[[paste0("b_spatial[", i, "]")]] - HMM_samples[[paste0("b_temporal[", i, "]")]]
})

HMM_b_diff_summary <- apply(HMM_b_diff, 2, function(x) {
  c(mean = mean(x), sd = sd(x), quantile(x, c(0.025, 0.5, 0.975)))
})
HMM_b_diff_summary <- t(HMM_b_diff_summary)

# Reshape for spatial/temporal comparison
HMM_species_data <- HMM_group %>%
  tibble::rownames_to_column("parameter") %>%
  filter(grepl("b_spatial\\[|b_temporal\\[", parameter)) %>%
  mutate(
    param_type = gsub("\\[\\d+\\]", "", parameter),
    group = as.numeric(gsub(".*\\[(\\d+)\\]", "\\1", parameter))
  ) %>%
  dplyr::select(group, param_type, mean) %>%
  tidyr::pivot_wider(
    names_from = param_type,
    values_from = mean
  )

# Create plots
HMM_samples_long <- HMM_samples %>%
  dplyr::select(b_zs, b_zt) %>%
  pivot_longer(
    cols = c(b_zs, b_zt),
    names_to = "sensitivity_type",
    values_to = "value"
  )

HMM_density <- ggplot(HMM_samples_long) +
  geom_density(aes(x = value, fill = sensitivity_type), alpha = 0.5) +
  scale_fill_manual(
    values = c(b_zs = "red", b_zt = "purple"),
    labels = c(b_zs = "Spatial Sensitivity", b_zt = "Temporal Sensitivity")
  ) +
  labs(x = "Sensitivity (days/°C)", y = "", fill = "Sensitivity type") +
  theme(legend.position = "none")

HMM_scatter <- ggplot(HMM_species_data, aes(x = b_spatial, y = b_temporal)) +
  geom_point(alpha = 0.7, color = "black") +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "grey50") +
  labs(x = "Spatial Sensitivity (days/°C)", y = "Temporal Sensitivity (days/°C)")

HMM_samples_diff <- data.frame(diff = HMM_samples$b_zs - HMM_samples$b_zt)

ci <- quantile(HMM_samples_diff$diff, probs = c(0.025, 0.975))

HMM_diff <- ggplot(HMM_samples_diff, aes(x = diff)) +
  geom_density(fill = "grey", alpha = 0.5) +
  geom_vline(xintercept = ci, linetype = "dashed", color = "black") +
  annotate("text",
    x = mean(ci),
    y = Inf,
    label = paste0("95% CI: [", round(ci[1], 2), ", ", round(ci[2], 2), "]"),
    vjust = 1.5,
    color = "black"
  ) +
  labs(x = "Difference (Spatial - Temporal, days/°C)", y = "") +
  xlim(-6, 4)

print(HMM_density)
print(HMM_scatter)
print(HMM_diff)
```

## PMM
```{r}
# Load PMM object
PMM <- read_rds(.path$sample_pmm)

# Summarize results
PMM_summary <- summary(PMM)
PMM_group <- as.data.frame(PMM_summary$summary)

# Calculate parameter differences
PMM_samples <- as.data.frame(PMM)
n_groups <- 82

PMM_b_diff <- sapply(1:n_groups, function(i) {
  PMM_samples[[paste0("b_spatial[", i, "]")]] - PMM_samples[[paste0("b_temporal[", i, "]")]]
})

PMM_b_diff_summary <- apply(PMM_b_diff, 2, function(x) {
  c(mean = mean(x), sd = sd(x), quantile(x, c(0.025, 0.5, 0.975)))
})
PMM_b_diff_summary <- t(PMM_b_diff_summary)

# Reshape for spatial/temporal comparison
PMM_species_data <- PMM_group %>%
  tibble::rownames_to_column("parameter") %>%
  filter(grepl("b_spatial\\[|b_temporal\\[", parameter)) %>%
  mutate(
    param_type = gsub("\\[\\d+\\]", "", parameter),
    group = as.numeric(gsub(".*\\[(\\d+)\\]", "\\1", parameter))
  ) %>%
  dplyr::select(group, param_type, mean) %>%
  tidyr::pivot_wider(
    names_from = param_type,
    values_from = mean
  )

# Create plots
PMM_samples_long <- PMM_samples %>%
  dplyr::select(b_zs, b_zt) %>%
  pivot_longer(
    cols = c(b_zs, b_zt),
    names_to = "sensitivity_type",
    values_to = "value"
  )


PMM_density <- ggplot(PMM_samples_long) +
  geom_density(aes(x = value, fill = sensitivity_type), alpha = 0.5) +
  scale_fill_manual(
    values = c(b_zs = "red", b_zt = "purple"),
    labels = c(b_zs = "Spatial Sensitivity", b_zt = "Temporal Sensitivity")
  ) +
  labs(x = "Sensitivity (days/°C)", y = "", fill = "Sensitivity type") +
  theme(legend.position = "none")

PMM_scatter <- ggplot(PMM_species_data, aes(x = b_spatial, y = b_temporal)) +
  geom_point(alpha = 0.7, color = "black") +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "grey50") +
  labs(x = "Spatial Sensitivity (days/°C)", y = "Temporal Sensitivity (days/°C)")

PMM_samples_diff <- data.frame(diff = PMM_samples$b_zs - PMM_samples$b_zt)

PMM_ci <- quantile(PMM_samples_diff$diff, probs = c(0.025, 0.975))

PMM_diff <- ggplot(PMM_samples_diff, aes(x = diff)) +
  geom_density(fill = "grey", alpha = 0.5) +
  geom_vline(xintercept = PMM_ci, linetype = "dashed", color = "black") +
  annotate("text",
    x = mean(PMM_ci),
    y = Inf,
    label = paste0("95% CI: [", round(PMM_ci[1], 2), ", ", round(PMM_ci[2], 2), "]"),
    vjust = 1.5,
    color = "black"
  ) +
  labs(x = "Difference (Spatial - Temporal, days/°C)", y = "") +
  xlim(-6, 4)

print(PMM_density)
print(PMM_scatter)
print(PMM_diff)
```


## Combined

```{r fig.width=14, fig.height=9}
combined_hier <- HMM_density + HMM_diff + HMM_scatter +
  PMM_density + PMM_diff + PMM_scatter +
  plot_annotation(tag_levels = "a")

print(combined_hier)
```

# Figure 5: Estimated sensitivity for wind pollinated trees flower time with their phylogenetic signal


## Tree

```{r}
tree <- read.tree(.path$tree)

tree_species <- rownames(vcv(tree, corr = TRUE)) %>%
  gsub("_", " ", .)

phylo_species_id <- data.frame(species = tree_species, sppid = seq_along(tree_species))


# Reshape for spatial/temporal comparison (but not only mean, but also 2.5% and 97.5%)
HMM_species_data_wci <- HMM_group %>%
  tibble::rownames_to_column("parameter") %>%
  filter(grepl("b_spatial\\[|b_temporal\\[", parameter)) %>%
  mutate(
    param_type = gsub("\\[\\d+\\]", "", parameter),
    group = as.numeric(gsub(".*\\[(\\d+)\\]", "\\1", parameter))
  ) %>%
  dplyr::select(group, param_type, mean, `2.5%`, `97.5%`) %>%
  tidyr::pivot_longer(
    cols = c(mean, `2.5%`, `97.5%`),
    names_to = "statistic",
    values_to = "value"
  ) %>%
  tidyr::pivot_wider(
    names_from = c(statistic, param_type),
    values_from = value,
    names_glue = "{statistic}_{param_type}"
  ) %>%
  cbind(HMM_b_diff_summary %>% as.data.frame() %>% dplyr::select("mean", "2.5%", "97.5%"))


species_sensitivity_HMM <- HMM_species_data_wci %>%
  cbind(phylo_species_id) %>%
  left_join(taxa_info, by = "species") %>%
  mutate(simple_name = str_replace(species, "^([A-Za-z])[^ ]+", "\\1."))
```

```{r}
PMM_species_data_wci <- PMM_group %>%
  tibble::rownames_to_column("parameter") %>%
  filter(grepl("b_spatial\\[|b_temporal\\[", parameter)) %>%
  mutate(
    param_type = gsub("\\[\\d+\\]", "", parameter),
    group = as.numeric(gsub(".*\\[(\\d+)\\]", "\\1", parameter))
  ) %>%
  dplyr::select(group, param_type, mean, `2.5%`, `97.5%`) %>%
  tidyr::pivot_longer(
    cols = c(mean, `2.5%`, `97.5%`),
    names_to = "statistic",
    values_to = "value"
  ) %>%
  tidyr::pivot_wider(
    names_from = c(statistic, param_type),
    values_from = value,
    names_glue = "{statistic}_{param_type}"
  ) %>%
  cbind(PMM_b_diff_summary %>% as.data.frame() %>% dplyr::select("mean", "2.5%", "97.5%"))

species_sensitivity_PMM <- PMM_species_data_wci %>%
  cbind(phylo_species_id) %>%
  left_join(taxa_info, by = "species") %>%
  mutate(simple_name = str_replace(species, "^([A-Za-z])[^ ]+", "\\1."))
```


```{r fig.width=5, fig.height=15}
tree$tip.label <- tree$tip.label %>% gsub("_", " ", .)

diff_color <- data.frame(
  species = species_sensitivity_PMM$species,
  diff = species_sensitivity_PMM$mean
)
# Assuming `tree` is a phylogenetic tree object and `lam_bc_pmm` contains the lambda values for the leaves
# You can use the `phytools` package to compute ancestral node values by averaging over descendant leaves.



# Step 1: Create a named vector for the lambda values (`lam_bc_pmm`), with species names as names
lambda_tips <- setNames(diff_color$diff, tree$tip.label) # Assuming `lam_bc_pmm` contains species' lambda values

# Step 2: Use `fastAnc` to calculate ancestral states (lambda values) for internal nodes
lambda_nodes <- fastAnc(tree, diff_color$diff) # Computes the ancestral values by averaging the lambda values of descendants

# Step 3: Combine tip and node lambda values into one vector for plotting
lambda_all <- c(lambda_tips, lambda_nodes)

# Step 4: Create the ggtree plot and color the tips and nodes based on their lambda values
tree_plot <- ggtree(tree, aes(color = lambda_all)) + # Shrink branch lengths with xscale
  geom_tree() +
  scale_color_gradient2(
    low = "blue", mid = "black", high = "red", midpoint = 0,
    name = "Difference\n(Temporal - Spatial,\ndays/°C)"
  ) + # Darker color gradient
  theme_tree() +
  theme(
    plot.margin = margin(t = 5, r = 0, b = 30, l = 0),
    legend.position = c(0.05, 0.95), # Position legend inside plot area
    legend.justification = c(0, 1), # Align legend to top-left
    legend.direction = "horizontal", # Display legend vertically
    legend.background = element_rect(fill = "white", color = NA), # Optional: add background
    legend.title = element_text(size = 10), # Adjust title size if needed
    legend.key = element_rect(color = NA), # Remove key borders
    legend.margin = margin(0, 0, 0, 0) # Remove legend margins
  ) +
  guides(color = guide_colorbar(title.position = "top", title.hjust = 0.5, label.position = "bottom"))

print(tree_plot)
```

## PMM

```{r}
# Extract the order of tip labels as they are plotted
tip_order <- tree_plot$data %>%
  filter(isTip) %>%
  arrange(y) %>%
  pull(label)

# Use this order to reorder your species in the second figure
species_sensitivity_PMM$species <- factor(species_sensitivity_PMM$species, levels = tip_order)


sensitivity_plot <- species_sensitivity_PMM %>%
  ggplot(aes(x = mean, y = species, color = mean)) +
  geom_point(shape = 20, size = 2, position = position_dodge(width = 0.5)) +
  geom_errorbar(aes(xmin = `2.5%`, xmax = `97.5%`), width = 0.2) + # Removed redundant color
  scale_color_gradient2(
    low = "blue", mid = "black", high = "red", midpoint = 0,
    name = "Difference\n(Spatial - Temporal,\ndays/°C)"
  ) +
  geom_vline(xintercept = 0, linetype = "dashed") +
  labs(
    title = NULL, # Clearer to use NULL for an empty title
    y = NULL, # Clearer to use NULL for an empty y-axis label
    x = "Difference (Spatial - Temporal, days/°C)"
  ) +
  xlim(10, -10) + # Optional: adjust if needed
  # facet_grid(genus ~ ., scales = "free_y", space = "free_y") + # Optional facet
  theme_classic() +
  theme(
    legend.position = "none",
    axis.text.y = element_text(face = "italic"), # Ensure italics for species names
    legend.text = element_text() # Use element_text instead of element_markdown
  )
```

## HMM

```{r}
# Use this order to reorder your species in the second figure
species_sensitivity_HMM$species <- factor(species_sensitivity_HMM$species, levels = tip_order)


HMM_sensitivity_plot <- species_sensitivity_HMM %>%
  ggplot(aes(x = mean, y = species, color = mean)) +
  geom_point(shape = 20, size = 2, position = position_dodge(width = 0.5), color = "black") +
  geom_errorbar(aes(xmin = `2.5%`, xmax = `97.5%`), width = 0.2, color = "black") + # Removed redundant color
  geom_vline(xintercept = 0, linetype = "dashed") +
  labs(
    title = NULL, # Clearer to use NULL for an empty title
    y = NULL, # Clearer to use NULL for an empty y-axis label
    x = "Difference (Spatial - Temporal, days/°C)"
  ) +
  xlim(10, -10) + # Optional: adjust if needed
  # facet_grid(genus ~ ., scales = "free_y", space = "free_y") + # Optional facet
  theme_classic() +
  theme(
    legend.position = "none",
    axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(),
    legend.text = element_text() # Use element_text instead of element_markdown
  )
```

## Combined
```{r fig.width=10, fig.height=15}
gridExtra::grid.arrange(tree_plot, sensitivity_plot, HMM_sensitivity_plot, nrow = 1, widths = c(1, 2, 1.5))
```

# Supplementary Figure 2: sensitivity consistency among species

```{r}
by_species_wtaxa_combined %>%
  ggplot(aes(x = sensitivity_type, y = estimate_combined, fill = sensitivity_type)) +
  geom_half_boxplot(side = "l", alpha = 0.6, width = 0.3) + # From ggpol
  geom_half_violin(side = "r", alpha = 0.6, width = 1) + # From ggdist
  facet_grid(~dataset,
    scales = "free",
    labeller = labeller(dataset = c(herb = "Herbarium", npn = "Field observations"))
  ) +
  scale_fill_manual(values = c("Spatial" = "red", "Temporal" = "purple")) +
  labs(x = "Sensitivity type", y = "Sensitivity (days/°C)") +
  theme_classic() +
  theme(legend.position = "none")
```


# Supplimentary Figure 3: compare two dataset raw data

```{r}
raw_compare <- temperature_data %>%
  group_by(species) %>%
  filter(
    all(c("herb", "npn") %in% dataset) & # Both datasets present
      sum(dataset == "herb") > 30 & # >30 herb records
      sum(dataset == "npn") > 30 # >30 npn records
  ) %>%
  ungroup()
```

```{r fig.width=10, fig.height=8}
raw_compare %>%
  ggplot(aes(x = yeart, y = as.Date(doy, origin = "2024-11-01"), color = dataset)) +
  scale_color_manual(
    values = c("npn" = "#0751f1", "herb" = "#582800"),
    labels = c("npn" = "Field observation", "herb" = "Herbarium")
  ) +
  geom_point(alpha = 0.1) +
  geom_smooth(aes(group = dataset), method = "lm", se = FALSE, size = 1) +
  labs(
    title = " ",
    x = "Spring average temperature (°C)",
    y = "Month",
    color = "Dataset"
  ) +
  facet_wrap(~species) +
  scale_y_date(date_labels = "%b") + # Format y-axis as months
  theme_classic() +
  theme(
    legend.position = "top", # c(0.8, 0.05),
    strip.text = element_text(face = "italic"),
    legend.text = element_markdown()
  )
```

# Supplimentary Figure 4: speceis composition

```{r fig.width=10, fig.height=6}
# Create the plot
temperature_data %>%
  filter(species %in% taxa_info$species) %>%
  mutate(simple_name = str_replace(species, "^([A-Za-z])[^ ]+", "\\1.")) %>%
  ggplot(aes(x = simple_name, fill = dataset)) +
  geom_bar(position = "dodge", stat = "count") + # Adjust bar width
  scale_y_log10() +
  facet_grid(. ~ taxa, scales = "free_x", space = "free_x") +
  scale_fill_manual(
    values = c("npn" = "#0751f1", "herb" = "#582800"),
    labels = c("npn" = "Field observation", "herb" = "Herbarium")
  ) +
  labs(
    x = "Species",
    y = "Number of records",
    fill = "Dataset"
  ) +
  theme_classic() +
  theme(
    axis.text.x = element_text(face = "italic", angle = 90, hjust = 1, vjust = 0.5),
    strip.text = element_text(face = "italic", angle = 90), # Italicize facet panel labels
    legend.text = element_markdown(),
    legend.position = "top"
  )
```
# Supplimentary Figure 5: temporal tree

```{r fig.width=10, fig.height=15}
source("../scripts/plot_temporal_tree.R")
gridExtra::grid.arrange(tree_plot, sensitivity_plot, HMM_sensitivity_plot, nrow = 1, widths = c(1, 2, 1.5))
```

# Supplimentary Figure 6: spatial tree

```{r fig.width=10, fig.height=15}
source("../scripts/plot_spatial_tree.R")
gridExtra::grid.arrange(tree_plot, sensitivity_plot, HMM_sensitivity_plot, nrow = 1, widths = c(1, 2, 1.5))
```
