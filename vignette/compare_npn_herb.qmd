---
title: 'npn_herbarium together'
embed-resources: true
author: "Yi Liu"
date: "`r format(Sys.Date(), '%m/%d/%Y')`"
format:
  html:
    code-folding: show
    highlight: textmate
    number-sections: true
    theme: flatly
    toc: TRUE
    toc-depth: 4
    toc-float:
      collapsed: false
      smooth-scroll: true
---
```{r}
library(readr)
library(dplyr)
library(ggplot2)
library(patchwork)
library(ggtext)
```

# compare species composition

## by species and genus
```{r cache=TRUE}
species_composition <- read_rds("../data/us_species_composition.rds")

by_speceis <- species_composition %>%
  group_by(COMMON_NAME) %>%
  summarise(n = n()) %>%
  arrange(desc(n))

by_genus <- species_composition %>%
  group_by(GENUS) %>%
  summarise(n = n()) %>%
  arrange(desc(n)) 
```

## get family
```{r eval=FALSE}
library(taxize)

family_list <- vector("list", length(by_genus$GENUS))

# Loop through each genus and get the family name
for (i in 1:length(by_genus$GENUS)) {
  genus_name <- by_genus$GENUS[i]
  
  # Use tryCatch to handle errors
  tryCatch({
    # Query the taxonomic information for the given genus
    tax_info <- tax_name(query = genus_name, get = "family", db = "ncbi")
    
    # Check if the query returned a result
    if (!is.null(tax_info) && nrow(tax_info) > 0) {
      family_list[[i]] <- tax_info$family[1]
    } else {
      family_list[[i]] <- NA
    }
  }, error = function(e) {
    family_list[[i]] <- NA
  })
}

# Add the family names to the by_genus data frame
by_genus$FAMILY <- family_list

write.csv(by_genus, "../data/genus_family.csv")

# then do some manual check to fill the missing family name
```

## by family
```{r}
genus_family <- read.csv("../data/genus_family.csv")

by_family <- species_composition %>%
  left_join(genus_family, by = c("GENUS" = "GENUS")) %>%
  group_by(FAMILY) %>%
  summarise(n = n()) %>%
  arrange(desc(n))
```

## compare three composition

```{r}
# Define the data
taxas <- c("Quercus", "Cupressaceae", "Morus", "Pinaceae", "Ulmus", "Fraxinus", "Betula", "Acer", "Populus")

herb_genus <- read.csv("../data/herb_temperature_data.csv") %>%
  group_by(genus) %>%
  summarise(n = n()) %>%
  mutate(dataset = "Herbarium") %>%
  rename(taxa = genus)

# Read and process the NPN data
npn_genus <- read.csv("../data/npn_temperature_data.csv") %>%
  group_by(taxa) %>%
  summarise(n = n()) %>%
  mutate(dataset = "NPN")

# Assuming 'by_genus' and 'by_family' are already defined
# Read and process the FIA data
FIA_genus <- rbind(by_genus %>% rename(taxa = GENUS), by_family %>% rename(taxa = FAMILY)) %>%
  filter(taxa %in% taxas) %>%
  mutate(dataset = "FIA")

# Combine the datasets
combined_data <- bind_rows(
  herb_genus,
  npn_genus,
  FIA_genus 
) %>%
  tidyr::pivot_wider(names_from = dataset, values_from = c(n), values_fill = 0)

# Calculate the percentage for each column
data_percentage <- combined_data %>%
  mutate(npn_perc = NPN / sum(NPN) * 100,
         Herbarium_perc = Herbarium / sum(Herbarium) * 100,
         FIA_perc = FIA / sum(FIA) * 100)

# Melt the data frame for easier plotting
data_melted <- data_percentage %>%
  dplyr::select(taxa, npn_perc, Herbarium_perc, FIA_perc) %>%
  tidyr::gather(key = "Source", value = "Percentage", -taxa)


# Plot the percentages
ggplot(data_melted, aes(x = taxa, y = Percentage, fill = Source)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "",
       x = "Taxa",
       y = "Percentage",
       fill = "Dataset") +
  theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
chisq.test(data_percentage[, c("NPN", "FIA")])
chisq.test(data_percentage[, c("Herbarium", "FIA")])

data_percentage_herb_fia <- data_percentage %>%
  filter(taxa %in% c("Quercus", "Morus", "Ulmus", "Fraxinus", "Betula", "Acer", "Populus"))
chisq.test(data_percentage_herb_fia[, c("NPN", "FIA")])
chisq.test(data_percentage_herb_fia[, c("Herbarium", "FIA")])
chisq.test(data_percentage_herb_fia[, c("Herbarium", "NPN")])


```


# compare spatial and temporal sensitivity
```{r}
herbarium_data <- read.csv("../data/species_summary_herb.csv") %>% 
  mutate(dataset = "Herbarium")
npn_data <- read.csv("../data/species_summary_npn.csv") %>% 
  mutate(dataset = "Field observation") 
species_list <- inner_join(herbarium_data, npn_data, by = "species") %>%
  dplyr::select(species) %>%
  distinct()



temperature_data <- read.csv("../data/npn_temperature_data.csv")

joint_data <- temperature_data %>% distinct(species, taxa) %>%
  right_join(rbind(herbarium_data, npn_data), by = "species") %>% 
  filter(species %in% species_list$species) 

joint_data_long <- joint_data %>%
  mutate(sensitivity_type = "Spatial", estimate_combined = norm_estimate, conf_low_combined = norm_conf_low, conf_high_combined = norm_conf_high) %>%
  bind_rows(
    joint_data %>%
      mutate(sensitivity_type = "Temporal", estimate_combined = anom_estimate, conf_low_combined = anom_conf_low, conf_high_combined = anom_conf_high)
  ) %>% 
  dplyr::select(species, taxa, dataset, sensitivity_type, estimate_combined, conf_low_combined, conf_high_combined, residual) %>% 
  group_by(species, sensitivity_type) %>%
  mutate(equal = ifelse(max(conf_low_combined) < min(conf_high_combined), 1, 0)) %>%
  arrange(taxa, species) %>%
  mutate(species_name = forcats::fct_reorder(species, desc(species))) # Reorder species alphabetically within taxa


```

```{r fig.width=9, fig.height=10}


joint_data_long %>% 
  ggplot(aes(x = estimate_combined, y = species_name, color = dataset)) +
    scale_color_manual(values = c("Herbarium" = "blue", "Field observation" = "red")) +
  geom_point(shape = 3, size = 2, position = position_dodge(width = 0.5)) + # Adjust width as needed
  coord_cartesian(xlim = c(-20, 10)) +  # This will clip the error bars instead of removing them
  geom_errorbar(aes(xmin = conf_low_combined, xmax = conf_high_combined), width = 0, position = position_dodge(width = 0.5)) +
  geom_vline(xintercept = 0, linetype = "dashed") +
  geom_text(aes(x = -21, label = ifelse(equal == 0, "*", "")), vjust = 0.75, color = "black") +
  labs(
    title = "",
    x = "Sensitivity (days/°C)",
    y = "Species",
    color = "Dataset"
  ) +
  facet_grid(taxa ~ sensitivity_type, scales = "free_y", space = "free_y") + 
  theme_minimal() +
  theme(
    axis.text.y = element_text(face = "italic"),
    legend.text = element_markdown() # Italicize legend text
  )  +
  # Apply themes for classic look, italics, and markdown legend
  theme_classic() +
  theme(
    axis.text.y = element_text(face = "italic"), 
    legend.position = "top"
  ) 
```

# compare by pair
```{r fig.width=8, fig.height=8}
joint_data %>%  
  mutate(alpha_level = factor(case_when(
    diff_var <= 5 ~ "Low",
    diff_var <= 10 ~ "Medium",
    TRUE ~ "High"
  ))) %>%
  
  ggplot(aes(x = norm_estimate, y = anom_estimate, color = dataset, alpha = factor(alpha_level), shape = as.factor(equal))) +
    geom_point(size = 2) +
    # Add a line connecting pairs with the same species name
#    geom_line(aes(group = species), color = "black", alpha = 0.5) +
    scale_alpha_manual(values = c("Low" = 1, "Medium" = 0.5, "High" = 0.2), labels = c("Low", "Medium", "High")) +
  scale_shape_manual(values = c("0" = 3, "1" = 16), labels = c("0" = "Yes", "1" = "No")) +

    geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
    labs(
    title = "",
    x = "Temporal sensitivity (days/°C)",
    y = "Spatial sensitivity (days/°C)",
    shape = "Significant difference",
    alpha = "Variance",
    color = "Dataset"
  ) +
    theme_classic() +
  # x y axies with equal scale
  coord_fixed(ratio = 1) 
```


# build 1 model to include both datasets

```{r}
npn_data <- read.csv("../data/npn_temperature_data.csv") %>% 
  mutate(dataset = "Field observation") %>% 
  dplyr::select(yeart, norm, anom, doy, species, genus, dataset)
herb_data <- read.csv("../data/herb_temperature_data.csv") %>% 
  mutate(dataset = "Herbarium") %>%
  dplyr::select(yeart, norm, anom, doy, species, genus, dataset)

shared_species <- inner_join(npn_data %>% distinct(species), herb_data %>% distinct(species)) 

joint_data <- rbind(npn_data, herb_data) %>%
  filter(species %in% shared_species$species) %>%
  mutate(dataset = factor(dataset, levels = c("Field observation", "Herbarium")))
```


```{r}
species_data <- joint_data %>% 
  filter(species == "Acer rubrum") 
model <- rlm(doy ~ (anom + norm)*dataset, data = species_data)
summary(model)

```
the result is consistent with our separate model then compare confidence interval

```{r}
# Ensure 'Herbarium' is set as the baseline for 'dataset'
joint_data$dataset <- relevel(joint_data$dataset, ref = "Herbarium")

# Fit the model with 'Herbarium' as the baseline
temporal_model <- blmer(doy ~ (anom + norm)*dataset + ((anom + norm)*dataset | species),
                        data = joint_data,
                        cov.prior = invwishart(df = 6, scale = diag(c(200, 20, 20, 200, 20, 20), 6)))

summary(temporal_model)
```

```{r}
```

