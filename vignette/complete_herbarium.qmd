---
title: 'complete herbarium data'
embed-resources: true
author: "Yi Liu"
date: "`r format(Sys.Date(), '%m/%d/%Y')`"
format:
  html:
    code-folding: show
    highlight: textmate
    number-sections: true
    theme: flatly
    toc: TRUE
    toc-depth: 4
    toc-float:
      collapsed: false
      smooth-scroll: true
---

```{r}
library(dplyr)
library(ggplot2)
```

# get herbarium data

```{r eval=FALSE}
raw <- read.csv("/Volumes/seas-zhukai/phenology/phenology_leaf_flower_lag/Herbarim_flower/combined_occ_img_downloaded.csv") %>% 
  dplyr::select(day, month, year, startDayOfYear, coordinateUncertaintyInMeters, decimalLongitude, decimalLatitude, filename_image, species, genus,family)

phenology <- read.csv("/Volumes/seas-zhukai/phenology/phenology_leaf_flower_lag/Herbarim_flower/phenology.csv") %>% 
  mutate(filename_image = gsub(".txt", "", file_name))

joint_data <- left_join(phenology,raw, by = "filename_image")

```

## fillter flowering time
```{r eval=FALSE}
joint_data_flower <- joint_data %>% #116805
  filter(flower_one > 0 & flower_many > 0) %>% 
  filter(!is.na(startDayOfYear)) %>% 
  filter(year>=1895) %>% 
  dplyr::select(decimalLongitude, decimalLatitude, startDayOfYear, year, species, genus, family, file_name,filename_image) %>%
  # delete family Pinaceae and Cupressaceae
  filter(family!="Pinaceae" & family!="Cupressaceae") %>%
  rename(lon = decimalLongitude, lat = decimalLatitude, doy = startDayOfYear) %>% 
  distinct()  # clear herbarium data for repeat file and repeat file with different phenology

# two repeated component:
# 1. completely the same ~300
# 2. same specimen (different name) with different phenology (as long as the flower is consistent, we will keep them) ~2000

```

# extract the climate normality

```{r eval=FALSE}
library(raster)

# extract the climate normality
complete_period_raster <- raster("../data/prism/complete_period_springmean.tif")

joint_data_flower_normality <- joint_data_flower %>%
  dplyr::select(lat, lon) %>%
  distinct() %>%
  mutate(complete_period_temp = extract(complete_period_raster, cbind(lon, lat)))

# extract the climate anormality
# Initialize an empty data frame to store the results
joint_data_flower_anormality <- data.frame()

# Loop through the specified years
for (fo_year in 1895:2023) {
  # Load the yearly raster file
  yearly_raster <- raster(paste0("../data/prism/", fo_year, "_springmean.tif"))
  
  # Process the joint_data_flower for the current year
  yearly_data <- joint_data_flower %>%
    dplyr::select(year, lat, lon) %>%
    distinct() %>%
    filter(year == fo_year) %>%
    mutate(yearly_temp = extract(yearly_raster, cbind(lon, lat)))
  
  # Append the yearly data to the cumulative data frame
  joint_data_flower_anormality <- rbind(joint_data_flower_anormality, yearly_data)
}

# Combine the normality and anormality data
temperature_data <- joint_data_flower_normality %>%
  right_join(joint_data_flower_anormality, by = c("lat", "lon")) %>%
  rename(norm = complete_period_temp, yeart = yearly_temp) %>%
  mutate(anom = yeart - norm) %>%
  right_join(joint_data_flower, by = c("lat", "lon", "year")) %>%
  filter(!is.na(anom)) 

write.csv(temperature_data, "../data/herb_temperature_data.csv")
```

# fit the model

## remove outlier
```{r}
library(mvoutlier)

temperature_data <- read.csv("../data/herb_temperature_data.csv")

temperature_data_clean <- temperature_data %>%
  group_by(species) %>%
  filter(n() > 30) %>%
  group_modify(~ {
    data_matrix <- dplyr::select(.x, yeart, doy) %>% as.matrix()
    outlier_result <- aq.plot(data_matrix)
    .x %>% mutate(outliers = outlier_result$outliers)
  }) %>%
  ungroup()
```

```{r}
temperature_data_outlier <- temperature_data_clean %>%
  filter(outliers) %>% 
  dplyr::select(file_name) 

write.csv(temperature_data_outlier, "../data/herb_temperature_data_outlier.csv")
```


## keep record of number of observation deleted and left

```{r}
temperature_data_clean %>% 
  group_by(species) %>%
  summarise(total = n(),
            num_outliers = sum(outliers),
            delete_p = num_outliers/total) %>%
  arrange(desc(delete_p))

```
## get data for model by requiring 10 observations for each parameter
```{r}
temperature_data_model <- temperature_data_clean %>%
  filter(!outliers) %>%  # Correctly referencing the outliers column
  group_by(species) %>%
  filter(n_distinct(doy) > 10) %>%  # Use n_distinct() for distinct counting
  filter(n_distinct(anom) > 10) %>%  # Use n_distinct() for distinct counting
  filter(n_distinct(norm) > 10) %>%  # Use n_distinct() for distinct counting
  filter(n_distinct(doy, norm, anom) > 30) %>%  # Use n_distinct() for distinct counting
  ungroup() 

# by species colinearity
temperature_data_model %>%
  group_by(species) %>%
  summarise(cor_anom_norm = cor(anom, norm, use = "complete.obs")) %>% 
  arrange(desc(abs(cor_anom_norm)))

# by species unique value of doy, norm, anom and combination
# test <- temperature_data_model %>%
#   group_by(species) %>%
#   summarise(n_doy = n_distinct(doy),
#             n_norm = n_distinct(norm),
#             n_anom = n_distinct(anom),
#             n_comb = n_distinct(paste(doy, norm, anom))) %>%
#   arrange(desc(n_comb))

```

## fit and plot the model

```{r eval=FALSE}
source("../scripts/function_visionalize_summmary_MLmodel.R")

# Apply the function to each species and store the results
results <- list()
unique_species <- unique(temperature_data_model$species)

for (species_name in unique_species) {
  results[[species_name]] <- analyze_species(temperature_data_model, species_name)
}

# Combine all summary rows into a single data frame
summary_results <- bind_rows(lapply(results, function(res) res$summary))

# Save all plots to a single PDF file
pdf("../data/species_plots_herb.pdf", width = 8, height = 6)
for (species_name in unique_species) {
  print(results[[species_name]]$plot)
}
dev.off()

write.csv(summary_results, "../species_summary_herb.csv", row.names = FALSE)
```


# get spices composition

```{r}
library(data.tree)
# Example data
species_data <- temperature_data_model %>%
  group_by(species, genus, family) %>%
  summarise(specimen_count = n())

# Aggregate data at genus level
genus_data <- species_data %>%
  group_by(family, genus) %>%
  summarise(specimen_count = sum(specimen_count))

# Aggregate data at family level
family_data <- species_data %>%
  group_by(family) %>%
  summarise(specimen_count = sum(specimen_count))

# Total specimen count
total_specimen_count <- sum(species_data$specimen_count)

# Create hierarchical data
hierarchical_data <- species_data %>%
  mutate(level = "species") %>%
  bind_rows(genus_data %>% mutate(species = "", level = "genus")) %>%
  bind_rows(family_data %>% mutate(genus = "", species = "", level = "family")) %>%
  ungroup() %>%
  arrange(family, genus, species)

# Create a data tree structure
tree_data <- hierarchical_data %>%
  mutate(pathString = paste("Total", family, genus, species, sep = "/")) %>%
  dplyr::select(pathString, specimen_count)

tree <- as.Node(tree_data)
tree$specimen_count <- total_specimen_count

# Print the tree structure to console
print(tree, "specimen_count")
```


# compare spatial and temporal sensitivity
```{r}
summary_results <- read.csv("../species_summary_herb.csv")

summary_results_wtaxa <- temperature_data_model %>%
  distinct(species, genus, family) %>% 
  right_join(summary_results, by = "species") 
```

## all species
### all species plot
```{r}

# plot a figure to show the comparasion of anom slope and norm lope with confidence interval and model fitting
ggplot(summary_results_wtaxa, aes(x = anom_estimate, y = norm_estimate, color = genus)) +
  geom_errorbar(aes(ymin = norm_conf_low, ymax = norm_conf_high, alpha = r_squared), width = 0) +
  geom_errorbarh(aes(xmin = anom_conf_low, xmax = anom_conf_high, alpha = r_squared), height = 0) +
  geom_point(aes(alpha = r_squared), size = 3) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +  # Add 1:1 line
  scale_alpha_continuous(range = c(0.2, 1)) +  # Adjust alpha range for better visualization
  labs(
    title = "",
    x = "Temporal sensitivity (days/celsius degree)",
    y = "Spatial sensiticity (days/celsius degree)",
    alpha = "R^2",
    color = "Genus"
  ) +
  theme_minimal() +
  theme(legend.position = "right")

```

### propotion of spatial stronger than temporal
```{r}
summary_results_wtaxa %>%
  mutate(spatial_stronger = ifelse(anom_estimate > norm_estimate, TRUE, FALSE)) %>%
  group_by(genus) %>%
  summarise(prop_spatial_stronger = mean(spatial_stronger, na.rm = TRUE)) %>%
  arrange(desc(prop_spatial_stronger))
```


## kick the r^2 less than 0.2
### plot
```{r}
summary_results_wtaxa <- summary_results_wtaxa %>% filter(r_squared>0.3)
ggplot(summary_results_wtaxa, aes(x = anom_estimate, y = norm_estimate, color = genus)) +
  geom_errorbar(aes(ymin = norm_conf_low, ymax = norm_conf_high, alpha = r_squared), width = 0) +
  geom_errorbarh(aes(xmin = anom_conf_low, xmax = anom_conf_high, alpha = r_squared), height = 0) +
  geom_point(aes(alpha = r_squared), size = 3) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +  # Add 1:1 line
  scale_alpha_continuous(range = c(0.2, 1)) +  # Adjust alpha range for better visualization
  labs(
    title = "",
    x = "Temporal sensitivity (days/celsius degree)",
    y = "Spatial sensiticity (days/celsius degree)",
    alpha = "R^2",
    color = "Genus"
  ) +
  theme_minimal() +
  theme(legend.position = "right")
  
```

### propotion of spatial stronger than temporal
```{r}
summary_results_wtaxa %>%
  mutate(spatial_stronger = ifelse(anom_estimate > norm_estimate, TRUE, FALSE)) %>%
  group_by(genus) %>%
  summarise(prop_spatial_stronger = mean(spatial_stronger, na.rm = TRUE)) %>%
  arrange(desc(prop_spatial_stronger))

length(unique(summary_results_wtaxa$species))

```
### check the not overlap species
```{r}
to_check <- summary_results_wtaxa %>% 
#filter for the species that the anom slope and norm slope confidence interval do not overlap
  filter(anom_conf_low > norm_conf_high | anom_conf_high < norm_conf_low) %>%
  arrange(desc(r_squared))

print(to_check)
```

# check us species composition

## by species and genus
```{r}
library(readr)
species_composition <- read_rds("../data/us_species_composition.rds")

by_speceis <- species_composition %>%
  group_by(COMMON_NAME) %>%
  summarise(total = n()) %>%
  arrange(desc(total))

by_genus <- species_composition %>%
  group_by(GENUS) %>%
  summarise(total = n()) %>%
  arrange(desc(total)) 
```

## get family
```{r eval=FALSE}
library(taxize)

family_list <- vector("list", length(by_genus$GENUS))

# Loop through each genus and get the family name
for (i in 1:length(by_genus$GENUS)) {
  genus_name <- by_genus$GENUS[i]
  
  # Use tryCatch to handle errors
  tryCatch({
    # Query the taxonomic information for the given genus
    tax_info <- tax_name(query = genus_name, get = "family", db = "ncbi")
    
    # Check if the query returned a result
    if (!is.null(tax_info) && nrow(tax_info) > 0) {
      family_list[[i]] <- tax_info$family[1]
    } else {
      family_list[[i]] <- NA
    }
  }, error = function(e) {
    family_list[[i]] <- NA
  })
}

# Add the family names to the by_genus data frame
by_genus$FAMILY <- family_list

write.csv(by_genus, "../data/genus_family.csv")

# then do some manual check to fill the missing family name
```

## by family
```{r}
genus_family <- read.csv("../data/genus_family.csv")

by_family <- species_composition %>%
  left_join(genus_family, by = c("GENUS" = "GENUS")) %>%
  group_by(FAMILY) %>%
  summarise(total = n()) %>%
  arrange(desc(total))
```

## compare three composition

```{r}
# Define the data
taxa <- c("Quercus", "Cupressaceae", "Morus", "Pinaceae", "Ulmus", "Fraxinus", "Betula", "Acer", "Populus")
npn <- c(4044, 644, 0, 1890, 618, 270, 1067, 5696, 912)
Herbarium <- c(2314, 5165, 289, 3507, 164, 929, 1314, 2499, 952)
FIA <- c(493859, 335469, 5685, 2143326, 80362, 104135, 104714, 388776, 196312)

# Create a data frame
data <- data.frame(taxa, npn, Herbarium, FIA)

# Calculate the percentage for each column
data_percentage <- data %>%
  mutate(npn_perc = npn / sum(npn) * 100,
         Herbarium_perc = Herbarium / sum(Herbarium) * 100,
         FIA_perc = FIA / sum(FIA) * 100)

# Melt the data frame for easier plotting
data_melted <- data_percentage %>%
  select(taxa, npn_perc, Herbarium_perc, FIA_perc) %>%
  tidyr::gather(key = "Source", value = "Percentage", -taxa)

# Plot the percentages
ggplot(data_melted, aes(x = taxa, y = Percentage, fill = Source)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Percentage of Each Taxa for Each Data Source",
       x = "Taxa",
       y = "Percentage",
       fill = "Source") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

