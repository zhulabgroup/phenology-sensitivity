---
title: 'complete herbarium data'
embed-resources: true
author: "Yi Liu"
date: "`r format(Sys.Date(), '%m/%d/%Y')`"
format:
  html:
    code-folding: show
    highlight: textmate
    number-sections: true
    theme: flatly
    toc: TRUE
    toc-depth: 4
    toc-float:
      collapsed: false
      smooth-scroll: true
---

```{r setup, include=FALSE}
library(dplyr)
library(ggplot2)
library(patchwork)
library(ggtext)

```

# get herbarium data

```{r eval=FALSE}
raw <- read.csv("../data/Herbarim_flower/combined_occ_img_downloaded.csv") %>% 
  dplyr::select(day, month, year, startDayOfYear, coordinateUncertaintyInMeters, decimalLongitude, decimalLatitude, filename_image, species, genus,family)

phenology <- read.csv("../data/Herbarim_flower/phenology.csv") %>% 
  mutate(filename_image = gsub(".txt", "", file_name))

joint_data <- left_join(phenology,raw, by = "filename_image")

```

## fillter flowering time
```{r eval=FALSE}
joint_data_flower <- joint_data %>% #116805
  filter(flower_one > 0 & flower_many > 0) %>% 
  filter(!is.na(startDayOfYear)) %>% 
  filter(year>=1895) %>% 
  dplyr::select(decimalLongitude, decimalLatitude, startDayOfYear, year, species, genus, family, file_name,filename_image) %>%
  # delete family Pinaceae and Cupressaceae
  filter(family!="Pinaceae" & family!="Cupressaceae") %>%
  rename(lon = decimalLongitude, lat = decimalLatitude, doy = startDayOfYear) %>% 
  distinct()  # clear herbarium data for repeat file and repeat file with different phenology

# two repeated component:
# 1. completely the same ~300
# 2. same specimen (different name) with different phenology (as long as the flower is consistent, we will keep them) ~2000

```
## reshape doy to number of days since 11.1
```{r eval = FALSE}
joint_data_flower <- joint_data_flower %>%
  mutate(doy = doy + 61) %>%
  mutate(year = ifelse(doy > 365, year+1, year),
         doy = ifelse(doy > 365, doy - 365, doy)) 
```


# extract the climate normality

```{r eval=FALSE}
library(raster)

# extract the climate normality
complete_period_raster <- raster("../data/prism/complete_period_springmean.tif")

joint_data_flower_normality <- joint_data_flower %>%
  dplyr::select(lat, lon) %>%
  distinct() %>%
  mutate(complete_period_temp = extract(complete_period_raster, cbind(lon, lat)))

# extract the climate anormality
# Initialize an empty data frame to store the results
joint_data_flower_anormality <- data.frame()

# Loop through the specified years
for (fo_year in 1895:2023) {
  # Load the yearly raster file
  yearly_raster <- raster(paste0("../data/prism/", fo_year, "_springmean.tif"))
  
  # Process the joint_data_flower for the current year
  yearly_data <- joint_data_flower %>%
    dplyr::select(year, lat, lon) %>%
    distinct() %>%
    filter(year == fo_year) %>%
    mutate(yearly_temp = extract(yearly_raster, cbind(lon, lat)))
  
  # Append the yearly data to the cumulative data frame
  joint_data_flower_anormality <- rbind(joint_data_flower_anormality, yearly_data)
}

# Combine the normality and anormality data
temperature_data <- joint_data_flower_normality %>%
  right_join(joint_data_flower_anormality, by = c("lat", "lon")) %>%
  rename(norm = complete_period_temp, yeart = yearly_temp) %>%
  mutate(anom = yeart - norm) %>%
  right_join(joint_data_flower, by = c("lat", "lon", "year")) %>%
  filter(!is.na(anom)) 

write.csv(temperature_data, "../data/herb_temperature_data.csv")
```

# fit the model
```{r}
temperature_data <- read.csv("../data/herb_temperature_data.csv")
```

## get data for model by requiring 10 observations for each parameter
```{r}
temperature_data_model <- temperature_data %>%
  group_by(species) %>%
  # filter(n_distinct(doy) > 10) %>%  # hard to justify
  filter(n_distinct(anom) > 10) %>%  # Use n_distinct() for distinct counting
  filter(n_distinct(norm) > 10) %>%  # Use n_distinct() for distinct counting
  filter(n_distinct(doy, norm, anom) > 30) %>%  # Use n_distinct() for distinct counting
  ungroup() 

# by species colinearity
temperature_data_model %>%
  group_by(species) %>%
  summarise(cor_anom_norm = cor(anom, norm, use = "complete.obs")) %>% 
  arrange(desc(abs(cor_anom_norm)))

# by species unique value of doy, norm, anom and combination
# test <- temperature_data_model %>%
#   group_by(species) %>%
#   summarise(n_doy = n_distinct(doy),
#             n_norm = n_distinct(norm),
#             n_anom = n_distinct(anom),
#             n_comb = n_distinct(paste(doy, norm, anom))) %>%
#   arrange(desc(n_comb))

```

## fit and plot the model

```{r eval=FALSE}
source("../scripts/function_visionalize_summmary_MLmodel.R")

# Apply the function to each species and store the results
results <- list()
unique_species <- unique(temperature_data_model$species)

for (species_name in unique_species) {
  results[[species_name]] <- analyze_species(temperature_data_model, species_name)
}

# Combine all summary rows into a single data frame
summary_results <- bind_rows(lapply(results, function(res) res$summary))

# Save all plots to a single PDF file
pdf("../data/species_plots_herb.pdf", width = 8, height = 6)
for (species_name in unique_species) {
  print(results[[species_name]]$plot)
}
dev.off()

write.csv(summary_results, "../data/species_summary_herb.csv", row.names = FALSE)
```
# compare spatial and temporal sensitivity
```{r}
summary_results <- read.csv("../data/species_summary_herb.csv")

summary_results_wtaxa <- temperature_data_model %>%
  distinct(species, genus, family) %>% 
  right_join(summary_results, by = "species") %>%
  mutate(anom_large = (anom_estimate > norm_estimate)) %>%
  mutate(model_fit = case_when(
    residual <= 20 ~ "Good",
    residual <= 40 ~ "Moderate",
    TRUE ~ "Poor"
  )) %>% # variance of difference
  mutate(alpha_level = case_when(
    diff_var <= 5 ~ "Low",
    diff_var <= 10 ~ "Medium",
    TRUE ~ "High"
  ))

```

## summary figure

### marginal comparason

```{r fig.width=6, fig.height=9}

# Create the density plot
p_density <- ggplot(summary_results_wtaxa) +
  geom_density(aes(x = norm_estimate, fill = "Spatial"), alpha = 0.5, color = NA) +
  geom_density(aes(x = anom_estimate, fill = "Temporal"), alpha = 0.5, color = NA) +
  xlim(-30, 10) +
  labs(
    title = "",
    x = "",
    y = "",
    fill = "Sensitivity type"
  ) +
  scale_fill_manual(values = c("blue", "red")) +
  theme_minimal() +
  theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(),
        axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(),
        panel.grid = element_blank())

# Combine the datasets for the scatter/errorbar plot
summary_results_wtaxa_combined <- summary_results_wtaxa %>%
  mutate(sensitivity_type = "Spatial", estimate_combined = norm_estimate, conf_low_combined = norm_conf_low, conf_high_combined = norm_conf_high) %>%
  bind_rows(
    summary_results_wtaxa %>%
      mutate(sensitivity_type = "Temporal", estimate_combined = anom_estimate, conf_low_combined = anom_conf_low, conf_high_combined = anom_conf_high)
  )



# Create the combined scatter/errorbar plot
p_combined <- summary_results_wtaxa_combined %>% 
    mutate(species_name = forcats::fct_reorder(species, desc(species))) %>%
ggplot(aes(x = estimate_combined, y = species_name, color = genus, alpha = model_fit, shape = sensitivity_type)) +
  geom_point(size = 2, position = position_dodge(width = 0.5)) + # Adjust width as needed
  coord_cartesian(xlim = c(-30, 10)) +  # This will clip the error bars instead of removing them
  geom_errorbar(aes(xmin = conf_low_combined, xmax = conf_high_combined, alpha = model_fit), width = 0, position = position_dodge(width = 0.5)) +
  scale_alpha_manual(values = c("Good" = 1, "Moderate" = 0.5, "Poor" = 0.2), labels = c("Good", "Moderate", "Poor")) +
  scale_color_discrete(
    labels = function(x) {
      sapply(x, function(label) paste0("*", label, "*"))
    }
  ) +
  labs(
    title = "",
    x = "Sensitivity (days/°C)",
    y = "Species",
    color = "Genus",
    shape = "Sensitivity type"
  ) +
  theme_minimal() +
  theme(
    axis.text.y = element_text(face = "italic"),
    legend.text = element_markdown() # Italicize legend text
  )

# Stack the plots vertically using patchwork
combined_plot <- p_density / plot_spacer() / p_combined + plot_layout(heights = c(1, -2, 30))
print(combined_plot)
```


### joint comparason
```{r}
# Ensure alpha_level is a factor with the correct level order
summary_results_wtaxa$alpha_level <- factor(summary_results_wtaxa$alpha_level, levels = c("Low", "Medium", "High"))
# this is weird but happened a lot

ggplot(summary_results_wtaxa, aes(x = anom_estimate, y = norm_estimate, color = genus, alpha = factor(alpha_level), shape = as.factor(equal + 3))) +
  geom_point(size = 3) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
    scale_alpha_manual(values = c("Low" = 1, "Medium" = 0.5, "High" = 0.2), labels = c("Low", "Medium", "High")) +
  scale_shape_manual(values = c("3" = 16, "4" = 17), labels = c("3" = "False", "4" = "True")) +
  scale_color_discrete(
    labels = function(x) {
      sapply(x, function(label) paste0("*", label, "*"))
    }
  ) +
  labs(
    title = "",
    x = "Temporal sensitivity (days/°C)",
    y = "Spatial sensitivity (days/°C)",
    shape = "Significant difference",
    alpha = "Variance",
    color = "Genus"
  ) +
  theme_minimal() +
  theme(legend.position = "right",
        legend.text = element_markdown()) # Italicize legend text
```

### check the range VS sensitivity
generate range data
```{r}
rang_data <- temperature_data_model %>% 
  group_by(species) %>%
  summarise(low_norm = quantile(norm, 0.25), high_norm = quantile(norm, 0.75), low_anom = quantile(anom, 0.25), high_anom = quantile(anom, 0.75), mean_norm = mean(norm)) %>%
  left_join(summary_results_wtaxa, by = "species") %>% 
  mutate(range_norm = high_norm - low_norm) 

rang_data_long <- rang_data%>% 
  tidyr::pivot_longer(cols = c("mean_norm", "range_norm"), names_to = "variable", values_to = "value") 
  
```

#### spatial range vs spatial sensitivity
```{r}
rang_data %>% 
  ggplot()+
  geom_errorbar(aes(xmin = low_norm, xmax = high_norm, y = norm_estimate, color = genus, alpha = model_fit), width = 0)  + scale_alpha_manual(values =  c("Good" = 1, "Moderate" = 0.5, "Poor" = 0.2), name = "Model fit", labels =  c("Good", "Moderate", "Poor")) +
  labs(
    title = "",
    x = "90% quantile range of T_norm",
    y = "Spatial sensitivity (days/°C)",
    color = "Genus"
  )+
  theme_minimal()+
  ylim(-10, 0) 
```

#### temporal range vs temporal sensitivity
```{r}
rang_data %>% 
  ggplot()+
  geom_errorbar(aes(xmin = low_anom, xmax = high_anom, y = anom_estimate, color = genus, alpha = model_fit), width = 0)  + scale_alpha_manual(values =  c("Good" = 1, "Moderate" = 0.5, "Poor" = 0.2), name = "Model fit", labels =  c("Good", "Moderate", "Poor")) +
  labs(
    title = "",
    x = "90% quantile range of T_anom",
    y = "Temporal sensitivity (days/°C)",
    color = "Genus"
  )+
  theme_minimal()

```

#### focus on spatial range


whether species growing in **warmer places** also has **wider range**: no
```{r}
rang_data %>% 
  ggplot()+
  geom_point(aes(x = range_norm, y = mean_norm, color = genus), size = 2) +
  geom_smooth(aes(x = range_norm, y = mean_norm), method = "lm", se = TRUE) 
```

species has **wider range** has **weaker sensitivity**

species in **warmer places** has **stronger sensitivity**

```{r}
# Create a named vector for renaming panels
panel_names <- c("mean_norm" = "Temperature normality mean (°C)", "range_norm" = "Temperature normality range (°C)")

# Plot with renamed panels
rang_data_long %>%
  ggplot() +
  geom_point(aes(x = value, y = norm_estimate, color = genus, alpha = model_fit), size = 2) +
  geom_smooth(aes(x = value, y = norm_estimate), method = "lm", se = TRUE) +
  facet_wrap(~variable, scales = "free_x", labeller = labeller(variable = panel_names)) +
  scale_alpha_manual(values = c("Good" = 1, "Moderate" = 0.5, "Poor" = 0.2), name = "Model fit", labels = c("Good", "Moderate", "Poor")) +
  labs(
    title = "",
    x = "",
    y = "Spatial sensitivity (days/°C)",
    color = "Genus"
  ) +
  theme_minimal()
```

whether species growing in a larger area has weaker sensitivity 
```{r}
library(sf)
library(readr)

```

```{r}

atlas_list <- read_csv("/Volumes/seas-zhukai/phenology/USTreeAtlas/Little_datatable.csv") %>%
  rename(latin_name = `Latin Name`)

area_data <- data.frame(latin_name = character(), area = numeric(), area_raw = numeric())
# target_latin_name <- "Acer negundo"
for (target_latin_name in unique(summary_results_wtaxa$species)) {
    shp_name <- atlas_list %>% 
      filter(latin_name == target_latin_name) %>% 
      pull(`SHP/*`)
    
#if sho_name is not empty
if (length(shp_name) > 0 ) {
    shp_path <- paste0("/Volumes/seas-zhukai/phenology/USTreeAtlas/shp/", shp_name, "/", shp_name, ".shp")
    shp_data <- st_read(shp_path)
    
    ggplot() +
  geom_sf(data = shp_data) +
  theme_minimal() +
  ggtitle("Shapefile Plot")
    
      if (is.na(st_crs(shp_data))) {
    st_crs(shp_data) <- st_crs(4326) # Set to 4326 WGS84 or appropriate CRS; 4269 (doesn't matter here)
  }
  
  shp_data <- st_transform(shp_data, crs = st_crs(5070))
  
  # Calculate the area of each feature

# Calculate the area of each feature in the shapefile
area_spe <- st_area(shp_data)
# add area to summary_results_wtaxa
area_data <- rbind(area_data, data.frame(latin_name = target_latin_name, area = sum(as.numeric(area_spe)), area_raw = sum(shp_data$AREA)))
    }
}



summary_results_wtaxa_area <- summary_results_wtaxa %>%
  left_join(area_data, by = c("species" = "latin_name")) %>% 
  mutate(area = area/1e6, area_raw = area_raw*1e4) # convert to km^2


summary_results_wtaxa_area %>%   ggplot() +
  geom_point(aes(x = area, y = area_raw)) +
  theme_minimal() # almost on the same line, so the are units should be 10^8 km^2 or 1.27*10^8 km^2
summary(lm(area_raw ~ area, data = summary_results_wtaxa_area))

```

```{r}

summary_results_wtaxa_area %>%
  ggplot() +
  geom_point(aes(x = area, y = norm_estimate, color = genus, alpha = model_fit), size = 2) +
  geom_smooth(aes(x = area, y = norm_estimate), method = "lm", se = TRUE) +
  labs(
    title = "",
    x = "Area (km²)",
    y = "Spatial sensitivity (days/°C)",
    color = "Genus"
  ) +
  theme_minimal()

```


## summary statistics
```{r}
summary(summary_results_wtaxa)
sum(summary_results_wtaxa$equal)

```

```{r}
summary_results_wtaxa %>%   
  group_by(genus) %>%
  summarise(n = n(), n_equal = sum(equal), p = n_equal/n, n_larger = sum(anom_large), p_anom_large = n_larger/n) %>% 
  arrange(desc(p))
```
  
```{r}
# summary number with anom estimate larger than norm
summary_results_wtaxa %>% 
  mutate(anom_large = (anom_estimate > norm_estimate)) %>% 
  group_by(genus) %>%
  summarise(n = n(), n_larger = sum(anom_large), p = n_larger/n) %>% 
  arrange(desc(p))
```


# get spices composition

```{r}
library(data.tree)
# Example data
species_data <- temperature_data_model %>%
  group_by(species, genus, family) %>%
  summarise(specimen_count = n())

# Aggregate data at genus level
genus_data <- species_data %>%
  group_by(family, genus) %>%
  summarise(specimen_count = sum(specimen_count))

# Aggregate data at family level
family_data <- species_data %>%
  group_by(family) %>%
  summarise(specimen_count = sum(specimen_count))

# Total specimen count
total_specimen_count <- sum(species_data$specimen_count)

# Create hierarchical data
hierarchical_data <- species_data %>%
  mutate(level = "species") %>%
  bind_rows(genus_data %>% mutate(species = "", level = "genus")) %>%
  bind_rows(family_data %>% mutate(genus = "", species = "", level = "family")) %>%
  ungroup() %>%
  arrange(family, genus, species)

# Create a data tree structure
tree_data <- hierarchical_data %>%
  mutate(pathString = paste("Total", family, genus, species, sep = "/")) %>%
  dplyr::select(pathString, specimen_count)

tree <- as.Node(tree_data)
tree$specimen_count <- total_specimen_count

# Print the tree structure to console
print(tree, "specimen_count")
```

# check the assumptions for the model




## total observation and composition (species) change over year
```{r}
temperature_data_model %>%
  ggplot(aes(x = year)) +
  geom_histogram(aes(fill = genus), binwidth = 1, position = "stack") +
  labs(
    title = "Total Observations and Species Composition Over Years",
    x = "Year",
    y = "Count",
    fill = "Genus"
  ) +
  theme_minimal()
```

```{r}
temperature_data_model %>%
  ggplot(aes(x = year)) +
  geom_histogram() +
  facet_wrap(~ genus, scales = "free_y") +
  labs(
    title = "Total Observations and Species Composition Over Years",
    x = "Year",
    y = "Count"
  ) +
  theme_minimal()
```

## check how the sample anomaly change over time
```{r}
temperature_data_model %>%
  ggplot(aes(x = year, y = anom)) +
  geom_point(aes(color = genus), alpha = 0.5) +
  geom_smooth() +
  labs(
    title = "Sample Anomaly Over Time",
    x = "Year",
    y = "Anomaly (°C)",
    color = "Genus"
  ) +
  theme_minimal()
```

```{r}
temperature_data_model %>%
  ggplot(aes(x = year, y = anom)) +
  geom_point(alpha = 0.1) +
  geom_smooth() +
  facet_wrap(~ genus, scales = "free_y") +
  labs(
    title = "Sample Anomaly Over Time",
    x = "Year",
    y = "Anomaly (°C)",
    color = "Genus"
  ) +
  theme_minimal()  

```

The anomaly is increasing over time because the temperature is increasing over time while the normality doesn't change.

Let's check the distribution

```{r}
temperature_data_model %>%
  ggplot(aes(x = anom)) +
  geom_histogram() +
  facet_wrap(~ genus,scales = "free_y") +
  labs(
    title = "Sample Anomaly by genus"
  ) +
  theme_minimal()  
```
We have more sample in recent years (warmer years) which may result the anomaly to be out of 0 but looks like we are fine. Let's check whether the anomaly is significantly different from 0 for each species.

```{r}
temperature_data_model %>%
  group_by(species) %>%
  summarise(t_test = list(t.test(anom))) %>%
  mutate(p_value = purrr::map_dbl(t_test, "p.value")) %>% 
  filter(p_value > 0.01)

# 63/74 species have p-value > 0.01, which means the anomaly is not significantly different from 0 for most species
```


## check how the sample normality change over time

```{r}
temperature_data_model %>%
  ggplot(aes(x = year, y = norm)) +
  geom_point(alpha = 0.1) +
  geom_smooth() +
  facet_wrap(~ genus, scales = "free_y") +
  labs(
    title = "Sample Normality Over Time",
    x = "Year",
    y = "Normality (°C)",
    color = "Genus"
  ) +
  theme_minimal()  

```

```{r}
temperature_data_model %>%
  ggplot(aes(x = norm)) +
  geom_histogram() +
  facet_wrap(~ genus,scales = "free_y") +
  labs(
    title = "Sample Normality by genus"
  ) +
  theme_minimal()  
```

## Whether trees growing in warmer places have larger anomaly (mean)
```{r}
temperature_data_model %>%
  ggplot(aes(x = norm, y = abs(anom))) +
  geom_point(alpha = 0.1) +
  geom_smooth() +
  facet_wrap(~ genus) +
  labs(
    title = "Sample Absolute Anomaly Over Normality",
    x = "Normality (°C)",
    y = "Anomaly (°C)",
    color = "Genus"
  ) +
  theme_minimal()  

```
the slightly down trend shows that warmer places have smaller interannual temperature variation. This make since because we are calculating the average temperature in certain time window. Colder place has a steeper slope when changing from winter to summer therefore has more variation in temperature.

Since the anomaly is centered at 0, so the anomaly mean is the square root of anomaly variance

# check whether we need random temporal slope:
the residual has the relationship with anomaly
```{r eval=FALSE}
unique_species <- unique(temperature_data_model$species)

pdf("../data/species_checkrandomslope_herb.pdf", width = 8, height = 6)

for (species_name in unique_species) {
  model <- temperature_data_model %>%
    filter(species == species_name) %>%
    MASS::rlm(doy ~ norm + anom, data = ., maxit = 30)

  ##############  
  # residuals <- residuals(model)
  # 
  # # Create a data frame for plotting
  # plot_data <- temperature_data_model %>%
  #   filter(species == species_name) %>%
  #   mutate(residual = residuals)
  # 
  # # Plot
  # plot <- ggplot(plot_data, aes(x = anom^2, y = residual^2)) +
  #   geom_point() +
  #   geom_smooth() +
  #   labs(
  #     title = species_name,
  #     x = "Anomaly^2 (°C)",
  #     y = "Residual^2"
  #   ) +
  #   theme_minimal()
  ##############
  
  ########
  
  ###########
  
  print(plot)
}

dev.off()
```

## plot the dignose figure
library(patchwork)

```{r}
unique_species <- unique(temperature_data_model$species)

pdf("../data/species_model_check.pdf", width = 8, height = 6)

for (species_name in unique_species) {
  species_data <- temperature_data_model %>%
    filter(species == species_name)
  
  model <- species_data %>%
    MASS::rlm(doy ~ norm + anom, data = ., maxit = 30)
  
species_data_residual <- species_data %>%
  mutate(residual = residuals(model), fitted = fitted(model))  

p0 <- species_data_residual %>% 
  dplyr::select(norm, anom, doy, year, residual, fitted) %>%
  GGally::ggpairs(title = paste0(species_name, "- Pairwise Correlation Plot")) +
  theme_minimal()

print(p0)
}
dev.off()
```

## check whether we can rewrite the regression
```{r}
cor(species_data$anom, species_data$norm)
model1 <- lm(doy ~ norm+anom, data = species_data)
summary(model1)
```


```{r}
cor(species_data$yeart, species_data$norm)
model2 <- lm(doy ~ norm+yeart, data = species_data)
summary(model2)
```

