---
title: 'complete npn data'
embed-resources: true
author: "Yi Liu"
date: "`r format(Sys.Date(), '%m/%d/%Y')`"
format:
  html:
    code-folding: show
    highlight: textmate
    number-sections: true
    theme: flatly
    toc: TRUE
    toc-depth: 4
    toc-float:
      collapsed: false
      smooth-scroll: true
---

```{r}
library(dplyr)
library(ggplot2)
library(readr)
library(patchwork)
library(ggtext)
```

# get npn data

## download npn

```{r eval = FALSE}
source("download_npn.R")
```

## quality control
```{r}
folder_path <- "/Volumes/seas-zhukai/phenology/NPN/individual_phenometrics/leaf_flower/with_climate/" 
#folder_path <- "E:/phenology/NPN/leaf_flower/climate/" 

# Get list of RDS files in the folder
rds_files <- list.files(path = folder_path, pattern = "\\.rds$", full.names = TRUE)

#rds_files delete these with name include "Ambrosia" or "Poaceae
rds_files <- rds_files[!grepl("Ambrosia", rds_files)]
rds_files <- rds_files[!grepl("Poaceae", rds_files)]

# Initialize an empty data frame to store the combined data
combined_data <- data.frame()

# Loop through each RDS file and combine the data
for (i in seq_along(rds_files)) {
  # Read the RDS file and append to the combined_data
  data <- read_rds(rds_files[i]) %>% 
    mutate(taxa = sub(".*\\/([^/]+)\\.rds$", "\\1", rds_files[i])) 
  combined_data <- rbind(combined_data, data)
}


```   
check how many observations deleted for each step

find a threshold for number of days since prior no to balance between number of data and quality of data

```{r eval = FALSE}
complete_npn_data %>% 
  filter(numdays_since_prior_no>0 & numdays_since_prior_no < 30) %>% 
  select(numdays_since_prior_no) %>%
  ggplot(aes(x = numdays_since_prior_no)) +
  geom_histogram()
```

```{r}
# Now, perform the filtering and processing steps on the combined data
complete_npn_data <- combined_data %>%
  filter(pheno_class_id == 7) %>% #22979
  # Remove rows with status conflicts
  filter(observed_status_conflict_flag == "-9999") %>% #20489
  # Group by individual_id, first_yes_year, and pheno_class_id
  group_by(individual_id, first_yes_year) %>%
  # Keep only the earlist first yes doy
  arrange(first_yes_doy) %>%
  slice(1) %>% # 16086
  ungroup() %>% 
  # Filter rows where numdays_since_prior_no is between 0 and 20
  filter(numdays_since_prior_no <= 7 & numdays_since_prior_no > 0) %>% # 8563
  # Select relevant columns
  dplyr::select(individual_id, first_yes_year, first_yes_doy, species, genus, dataset_id, pheno_class_id, longitude, latitude, taxa) 
```


## reshape doy to number of days since 11.1
```{r eval = FALSE}
flower_data <- complete_npn_data %>%
  rename(lat = latitude, lon = longitude, year = first_yes_year, doy = first_yes_doy) %>%
  mutate(species = paste(genus, species, sep = " ")) %>% 
  mutate(doy = doy + 61) %>%
  mutate(year = ifelse(doy > 365, year+1, year),
         doy = ifelse(doy > 365, doy - 365, doy)) 
```


# extract climate data
```{r eval = FALSE}
library(raster)

# extract the climate normality
complete_period_raster <- raster("../data/prism/complete_period_springmean.tif")

joint_data_flower_normality <- flower_data %>%
  dplyr::select(lat, lon) %>%
  distinct() %>%
  mutate(complete_period_temp = raster::extract(complete_period_raster, cbind(lon, lat)))

# extract the climate anormality
# Initialize an empty data frame to store the results
joint_data_flower_anormality <- data.frame()

# Loop through the specified years
for (fo_year in 2007:2023) {
  # Load the yearly raster file
  yearly_raster <- raster(paste0("../data/prism/", fo_year, "_springmean.tif"))
  
  # Process the joint_data_flower for the current year
  yearly_data <- flower_data %>%
    dplyr::select(year, lat, lon) %>%
    distinct() %>%
    filter(year == fo_year) %>%
    mutate(yearly_temp = raster::extract(yearly_raster, cbind(lon, lat)))
  
  # Append the yearly data to the cumulative data frame
  joint_data_flower_anormality <- rbind(joint_data_flower_anormality, yearly_data)
}

# Combine the normality and anormality data
temperature_data <- joint_data_flower_normality %>%
  right_join(joint_data_flower_anormality, by = c("lat", "lon")) %>%
  rename(norm = complete_period_temp, yeart = yearly_temp) %>%
  mutate(anom = yeart - norm) %>%
  right_join(flower_data, by = c("lat", "lon", "year")) %>%
  filter(!is.na(anom)) %>% #17587->17490
  group_by(species) %>%
  filter(n()>29) %>%   # 
  ungroup()

write.csv(temperature_data, "../data/npn_temperature_data.csv")
```

# fit the model
```{r}
temperature_data <- read.csv("../data/npn_temperature_data.csv")
```

## get data for model by requiring 10 observations for each parameter
```{r}
temperature_data_model <- temperature_data %>%
  group_by(species) %>%
  filter(n_distinct(anom) > 10) %>%  # Use n_distinct() for distinct counting
  filter(n_distinct(norm) > 10) %>%  # Use n_distinct() for distinct counting
  filter(n_distinct(doy, norm, anom) > 30) %>%  # Use n_distinct() for distinct counting
  ungroup() # 7601->6109

# by species colinearity
temperature_data_model %>%
  group_by(species) %>%
  summarise(cor_anom_norm = cor(anom, norm, use = "complete.obs")) %>% 
  arrange(desc(abs(cor_anom_norm)))

# by species unique value of doy, norm, anom and combination
# test <- temperature_data_model %>%
#   group_by(species) %>%
#   summarise(n_doy = n_distinct(doy),
#             n_norm = n_distinct(norm),
#             n_anom = n_distinct(anom),
#             n_comb = n_distinct(paste(doy, norm, anom))) %>%
#   arrange(desc(n_comb))

```
## plot and fit the model
```{r eval=FALSE}
source("../scripts/function_visionalize_summmary_MLmodel.R")

# Apply the function to each species and store the results
results <- list()
unique_species <- unique(temperature_data_model$species)

for (species_name in unique_species) {
  print(species_name)
  results[[species_name]] <- analyze_species(temperature_data_model, species_name)
}

# Combine all summary rows into a single data frame
summary_results <- bind_rows(lapply(results, function(res) res$summary))

# Save all plots to a single PDF file
pdf("../data/species_plots_npn.pdf", width = 8, height = 6)
for (species_name in unique_species) {
  print(results[[species_name]]$plot)
}
dev.off()

write.csv(summary_results, "../data/species_summary_npn.csv", row.names = FALSE)
```
```{r}
summary_results <- read.csv("../data/species_summary_npn.csv")
```

## get taxa
```{r}
summary_results_wtaxa <- temperature_data_model %>%
  distinct(species, taxa) %>% 
  right_join(summary_results, by = "species")  %>%  
  mutate(anom_large = (anom_estimate > norm_estimate)) %>%
  mutate(model_fit = case_when(
    residual <= 20 ~ "Good",
    residual <= 40 ~ "Moderate",
    TRUE ~ "Poor"
  )) %>% # variance of difference
  mutate(alpha_level = case_when(
    diff_var <= 5 ~ "Low",
    diff_var <= 10 ~ "Medium",
    TRUE ~ "High"
  ))
```
## summary figure

### marginal comparason

```{r fig.width=6, fig.height=6}
# Create the density plot
p_density <- ggplot(summary_results_wtaxa) +
  geom_density(aes(x = norm_estimate, fill = "Spatial"), alpha = 0.5, color = NA) +
  geom_density(aes(x = anom_estimate, fill = "Temporal"), alpha = 0.5, color = NA) +
  xlim(-30, 10) +
  labs(
    title = "",
    x = "",
    y = "",
    fill = "Sensitivity type"
  ) +
  scale_fill_manual(values = c("red", "purple")) +
  theme_minimal() +
  theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(),
        axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(),
        panel.grid = element_blank())

# Combine the datasets for the scatter/errorbar plot
summary_results_wtaxa_combined <- summary_results_wtaxa %>%
  mutate(sensitivity_type = "Spatial", estimate_combined = norm_estimate, conf_low_combined = norm_conf_low, conf_high_combined = norm_conf_high) %>%
  bind_rows(
    summary_results_wtaxa %>%
      mutate(sensitivity_type = "Temporal", estimate_combined = anom_estimate, conf_low_combined = anom_conf_low, conf_high_combined = anom_conf_high)
  )



# Create the combined scatter/errorbar plot
p_combined <- summary_results_wtaxa_combined %>% 
    mutate(species_name = forcats::fct_reorder(species, desc(species))) %>%
ggplot(aes(x = estimate_combined, y = species_name, color = taxa, alpha = model_fit, shape = sensitivity_type)) +
  geom_point(size = 2, position = position_dodge(width = 0.5)) + # Adjust width as needed
  coord_cartesian(xlim = c(-30, 10)) +  # This will clip the error bars instead of removing them
  geom_errorbar(aes(xmin = conf_low_combined, xmax = conf_high_combined, alpha = model_fit), width = 0, position = position_dodge(width = 0.5)) +
  scale_alpha_manual(values = c("Good" = 1, "Moderate" = 0.5, "Poor" = 0.2), labels = c("Good", "Moderate", "Poor")) +
  scale_color_discrete(
    labels = function(x) {
      sapply(x, function(label) paste0("*", label, "*"))
    }
  ) +
  labs(
    title = "",
    x = "Sensitivity (days/Â°C)",
    y = "Species",
    color = "Taxa",
    shape = "Sensitivity type",
    alpha = "Model fit"
  ) +
  theme_minimal() +
  theme(
    axis.text.y = element_text(face = "italic"),
    legend.text = element_markdown() # Italicize legend text
  )

# Stack the plots vertically using patchwork
combined_plot <- p_density / plot_spacer() / p_combined + plot_layout(heights = c(1, -2, 30))
print(combined_plot)
```

### joint comparason
```{r}
# Ensure alpha_level is a factor with the correct level order
summary_results_wtaxa$alpha_level <- factor(summary_results_wtaxa$alpha_level, levels = c("Low", "Medium", "High"))
# this is weird but happened a lot

ggplot(summary_results_wtaxa, aes(x = anom_estimate, y = norm_estimate, color = taxa, alpha = factor(alpha_level), shape = as.factor(equal + 3))) +
  geom_point(size = 3) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
    scale_alpha_manual(values = c("Low" = 1, "Medium" = 0.5, "High" = 0.2), labels = c("Low", "Medium", "High")) +
  scale_shape_manual(values = c("3" = 16, "4" = 17), labels = c("3" = "Yes", "4" = "No 69% (22/32)")) +
  scale_color_discrete(
    labels = function(x) {
      sapply(x, function(label) paste0("*", label, "*"))
    }
  ) +
  labs(
    title = "",
    x = "Temporal sensitivity (days/Â°C)",
    y = "Spatial sensitivity (days/Â°C)",
    shape = "Significant difference",
    alpha = "Variance",
    color = "Taxa"
  ) +
  theme_minimal() +
  theme(legend.position = "right",
        legend.text = element_markdown()) # Italicize legend text
```

## summary statistics
```{r}
summary(summary_results_wtaxa)

sum(summary_results_wtaxa$equal)

summary_results_wtaxa %>% 
  group_by(taxa) %>%
  summarise(n = n(), n_equal = sum(equal), p = n_equal/n, n_larger = sum(anom_large), p_anom_large = n_larger/n) %>% 
  arrange(desc(p))
```



## data composition

```{r}
# summarize for each genus, species, indiviudal, how many data points, summarize in each level
data_summary_species <- temperature_data_model %>%
  group_by(taxa, species, individual_id) %>%
  summarise(n = n()) %>%
  group_by(taxa, species) %>%
  summarise(n = sum(n), n_individual = n_distinct(individual_id)) 

data_summary_genus <- temperature_data %>%
  group_by(taxa, individual_id) %>%
  summarise(n = n()) %>%
  group_by(taxa) %>%
  summarise(n = sum(n), n_individual = n_distinct(individual_id)) 

print(data_summary_species)
data_summary_genus
```

# fit the model with differences directly

```{r}
speceis_data <- temperature_data_model %>% filter(species == "Abies balsamea")
model <- MASS::rlm(doy ~ norm + yeart, data = speceis_data,  maxit = 30)

  model_summary <- broom::tidy(model, conf.int = TRUE)
  
  # Extract coefficients and confidence intervals for anom and norm
model_summary %>% filter(term == "yeart") %>% select(estimate, conf.low, conf.high)
model_summary %>% filter(term == "norm") %>% select(estimate, conf.low, conf.high)
  
  # Calculate R-squared
summary(model)$sigma

```


```{r}
unique_species <- unique(temperature_data_model$species)
data_summary_species <- data.frame()

for (speciesname in unique_species) {
  # Filter the data for the specific species
  species_data <- temperature_data_model %>% filter(species == speciesname)
  
  # Fit the robust linear model
  model <- MASS::rlm(doy ~ norm + yeart, data = species_data, maxit = 30)
  
  # Get a tidy summary of the model with confidence intervals
  model_summary <- broom::tidy(model, conf.int = TRUE)
  
  # Extract the estimates and confidence intervals for 'yeart' and 'norm'
  yeart_summary <- model_summary %>% filter(term == "yeart") %>% select(estimate, conf.low, conf.high)
  norm_summary <- model_summary %>% filter(term == "norm") %>% select(estimate, conf.low, conf.high)
  
  # Append the results to the summary data frame
  data_summary_species <- rbind(
    data_summary_species,
    data.frame(
      taxa = species_data$taxa[1],
      species = speciesname,
      norm_estimate = norm_summary$estimate,
      norm_conf_low = norm_summary$conf.low,
      norm_conf_high = norm_summary$conf.high,
      yeart_estimate = yeart_summary$estimate,
      yeart_conf_low = yeart_summary$conf.low,
      yeart_conf_high = yeart_summary$conf.high,
      sig_diff = ifelse(norm_summary$conf.low*norm_summary$conf.high > 0, 0, 1)# same sign: yes, sig diff 0
    )
  )
}

# only 3/32 species show there is significant difference
different <- data_summary_species %>% 
filter(sig_diff == 0) %>% 
  arrange(species)

different
```

```{r}
```



```{r}
library(ggExtra)
p <- data_summary_species %>%
  ggplot(aes(x = yeart_estimate, y = norm_estimate, color = taxa)) +
  geom_point() +
  labs(x = "Temporal sensitivity (days/Â°C)", y = "Difference (Spatial - Temporal, days/Â°C) ", color = "Taxa") +
  theme_minimal() +
  theme(legend.position = "bottom") +
  coord_cartesian(xlim = c(-20, 10), ylim = c(-15, 20)) +
  geom_errorbar(aes(ymin = norm_conf_low, ymax = norm_conf_high), width = 0.1, alpha = 0.5) +
  geom_errorbarh(aes(xmin = yeart_conf_low, xmax = yeart_conf_high), height = 0.1, alpha = 0.5) 



  

ggMarginal(p, type = "density")

```


# fit mixed effect model

## RMLE
```{r RLME_mix_fit_3}
library(lme4)
library(ggplot2)
library(ggExtra)
library(dplyr)
library(tibble)

# Fit the model (as you already did)
temporal_model <- blmer(doy ~ yeart + norm + (1 + yeart + norm | species), 
                        data = temperature_data_model,
                        cov.prior = invwishart(df = 3, scale = diag(c(50, 50, 5), 3)))

# Extract the fixed effects
fixed_effects <- fixef(temporal_model)

# Extract the random effects
random_effects <- ranef(temporal_model)$species

# Extract the posterior variance-covariance matrix for species
post_var <- attr(ranef(temporal_model, condVar = TRUE)$species, "postVar")

# Extract species effects and merge with your summary data
species_effects <- random_effects %>%
  tibble::rownames_to_column(var = "species") %>%
  left_join(data_summary_species %>% dplyr::select(species, taxa), by = "species")

# Calculate standard errors for each species' random effects
yeart_se <- sqrt(post_var[2, 2, ])
norm_se <- sqrt(post_var[3, 3, ])

# Add confidence intervals to species_effects
species_effects <- species_effects %>%
  mutate(yeart_mean = yeart + fixed_effects[2],
         norm_mean = norm + fixed_effects[3],
         yeart_lower = yeart_mean - 1.96 * yeart_se,
         yeart_upper = yeart_mean + 1.96 * yeart_se,
         norm_lower = norm_mean - 1.96 * norm_se,
         norm_upper = norm_mean + 1.96 * norm_se)

# Create the plot with confidence intervals
p <- species_effects %>%
  ggplot(aes(x = yeart_mean, y = norm_mean, color = taxa)) +
  geom_point() +
  geom_errorbar(aes(ymin = norm_lower, ymax = norm_upper), width = 0.1, alpha = 0.5) +
  geom_errorbarh(aes(xmin = yeart_lower, xmax = yeart_upper), height = 0.1, alpha = 0.5) +
  labs(x = "Temporal sensitivity (days/Â°C)", y = "Difference (Spatial - Temporal, days/Â°C)") +
  theme_minimal() +
  coord_cartesian(xlim = c(-20, 10), ylim = c(-15, 20)) +
  theme(legend.position = "bottom")

# Add marginal distributions
p_with_marginals <- ggMarginal(p, type = "density")

# Display the plot
print(p_with_marginals)
```

```{r RLME_mix_boot}
bootstrap_estimate <- function(data, n_bootstrap) {
  bootstrap_estimates <- numeric(n_bootstrap)  
  successful_bootstraps <- 0
  
  units <- unique(data$species) 
  
  while (successful_bootstraps < n_bootstrap) {
    sampled_units <- sample(units, size = length(units), replace = TRUE)
    
    bootstrap_data <- data[data$species %in% sampled_units, ]
    
    fit_attempt <- tryCatch({
temporal_model <- blmer(doy ~ yeart + norm + (1 + yeart + norm | species), data = bootstrap_data,
                        cov.prior = invwishart(df = 3, scale = diag(c(50, 50, 50), 3)))
      
      fixef(temporal_model)["norm"]  
    }, warning = function(w) {
      return(NA)  
    })
    
    if (!is.na(fit_attempt)) {
      bootstrap_estimates[successful_bootstraps + 1] <- fit_attempt  
      successful_bootstraps <- successful_bootstraps + 1 
    }
  }
  
  return(bootstrap_estimates)  
}

n_bootstrap <- 2000

boot_estimates <- bootstrap_estimate(temperature_data_model, n_bootstrap)

CI_lower <- quantile(boot_estimates, probs = 0.025, na.rm = TRUE)  
CI_upper <- quantile(boot_estimates, probs = 0.975, na.rm = TRUE)  

boot_estimates %>% 
  as_tibble() %>%
  ggplot(aes(x = value)) +
  geom_density() +
  geom_vline(xintercept = CI_lower, linetype = "dashed") +
  geom_vline(xintercept = CI_upper, linetype = "dashed") +
  labs(x = "Difference (Spatial - Temporal, days/Â°C)", y = "Density") +
  theme_minimal() +
  # add a red line for the true value
  geom_vline(xintercept = fixed_effects[3], color = "red")
```

```{r RLME_mix_extract}
```

## Bayesian hierarchical

```{r bay_mix_fit}
library(rstan)
set.seed(2)
model_string <- model_string <- "
data {
  int<lower=0> N;         // Number of data points
  int<lower=0> J;         // Number of groups (species)
  int<lower=1, upper=J> species[N];  // Group (species) indicator for each observation
  vector[N] doy;          // Response variable
  vector[N] yeart;        // Predictor 1
  vector[N] norm;         // Predictor 2
}

parameters {
  real mu_a;               // Hyperparameter: mean of intercepts
  real<lower=0> sigma_a;   // Hyperparameter: SD of intercepts
  real mu_b1;              // Hyperparameter: mean of slopes for yeart
  real<lower=0> sigma_b1;  // Hyperparameter: SD of slopes for yeart
  real mu_b2;              // Hyperparameter: mean of slopes for norm
  real<lower=0> sigma_b2;  // Hyperparameter: SD of slopes for norm
  real<lower=0> sigma;     // Standard deviation of the residuals

  vector[J] a;             // Random intercepts for species
  vector[J] b1;            // Random slopes for yeart by species
  vector[J] b2;            // Random slopes for norm by species
}

model {
  // Priors
  mu_a ~ normal(150, 50);
  sigma_a ~ normal(0, 50);
  mu_b1 ~ normal(-5, 50);
  sigma_b1 ~ normal(0, 50);
  mu_b2 ~ normal(0, 50); // slopes for norm, differences
  sigma_b2 ~ normal(0, 50);
  sigma ~ normal(0, 50);

  // Hierarchical structure
  a ~ normal(mu_a, sigma_a);
  b1 ~ normal(mu_b1, sigma_b1);
  b2 ~ normal(mu_b2, sigma_b2);
  
  // Likelihood
  for (i in 1:N) {
    doy[i] ~ normal(a[species[i]] + b1[species[i]] * yeart[i] + b2[species[i]] * norm[i], sigma);
  }
}
"
# reparameterize the species as group and represent the group by index
temperature_data_model_stan <- temperature_data_model %>%
  mutate(group = as.integer(as.factor(species))) 

data_maple_tem = list(N = length(temperature_data_model_stan$yeart), J = max(temperature_data_model_stan$group), species = temperature_data_model_stan$group, doy =temperature_data_model_stan$doy, yeart = temperature_data_model_stan$yeart, norm = temperature_data_model_stan$norm)
stan_samples_tem <- stan(model_code = model_string, data = data_maple_tem, iter = 10000, chains = 4)

stan_samples_tem
write_rds(stan_samples_tem, "../data/bayesian_sample_temporalstorage.rds")

```

```{r bay_mix_extract}
stan_samples_tem <- read_rds("../data/bayesian_sample_temporalstorage.rds")
stan_summary <- summary(stan_samples_tem)
# extract global para
yearts <- stan_summary$summary["mu_b1", "mean"] 
norms <- stan_summary$summary["mu_b2", "mean"]  

CI_norm <- quantile(rstan::extract(stan_samples_tem, "b2")[[1]], probs = c(0.025, 0.975))

# predict_function <- function(x, mu_a, mu_b) {
#   return(mu_a + mu_b * x)
# }

# data_with_predictions <- data %>% 
#   mutate(fit.m = predict_function(springT, mu_a, mu_b))

# extract group specific para
stan_samples <- rstan::extract(stan_samples_tem)

intercepts <- apply(stan_samples$b1, 2, mean)  
slopes <- apply(stan_samples$b2, 2, mean) 
```



```{r}

# Extract posterior samples for b1 and b2
b1_samples <- stan_samples$b1
b2_samples <- stan_samples$b2

# Calculate the posterior means for each species
b1_mean <- colMeans(b1_samples)
b2_mean <- colMeans(b2_samples)

# Calculate 95% credible intervals
b1_ci_lower <- apply(b1_samples, 2, quantile, probs = 0.025)
b1_ci_upper <- apply(b1_samples, 2, quantile, probs = 0.975)
b2_ci_lower <- apply(b2_samples, 2, quantile, probs = 0.025)
b2_ci_upper <- apply(b2_samples, 2, quantile, probs = 0.975)

# Data frame for ggplot2
df <- data.frame(b1 = b1_mean, b2 = b2_mean, 
                 b1_ci_lower = b1_ci_lower, b1_ci_upper = b1_ci_upper,
                 b2_ci_lower = b2_ci_lower, b2_ci_upper = b2_ci_upper)

# Scatter plot with confidence intervals
p <- ggplot(df, aes(x = b1, y = b2)) +
  geom_point() +
  geom_errorbarh(aes(xmin = b1_ci_lower, xmax = b1_ci_upper), height = 0.1, color = "blue") +
  geom_errorbar(aes(ymin = b2_ci_lower, ymax = b2_ci_upper), width = 0.1, color = "red") +
  labs(x = "b1 (yeart slope)", y = "b2 (norm slope)") +
  theme_minimal()


# Scatter plot with marginal distributions
p <- ggplot(df, aes(x = b1, y = b2)) +
  geom_point() +
  labs(x = "b1 (yeart slope)", y = "b2 (norm slope)") +
  theme_minimal()

# Adding marginal distributions
ggMarginal(p, type = "density")
```

# can we fit one model with random intercept only
```{r}
temporal_model <- blmer(doy ~ yeart + norm + (1 | species), 
                        data = temperature_data_model,
                        cov.prior = invwishart(df = 3, scale = diag(c(50), 1)))
summary(temporal_model)
```

```{r}

```

