---
title: 'complete npn data'
embed-resources: true
author: "Yi Liu"
date: "`r format(Sys.Date(), '%m/%d/%Y')`"
format:
  html:
    code-folding: show
    highlight: textmate
    number-sections: true
    theme: flatly
    toc: TRUE
    toc-depth: 4
    toc-float:
      collapsed: false
      smooth-scroll: true
---

```{r}
library(dplyr)
library(ggplot2)
library(readr)
```

# get npn data

## download npn

```{r eval = FALSE}
source("download_npn.R")
```

## quality control
```{r}
folder_path <- "/Volumes/seas-zhukai/phenology/NPN/individual_phenometrics/leaf_flower/with_climate/" 
#folder_path <- "E:/phenology/NPN/leaf_flower/climate/" 

# Get list of RDS files in the folder
rds_files <- list.files(path = folder_path, pattern = "\\.rds$", full.names = TRUE)

#rds_files delete these with name include "Ambrosia" or "Poaceae
rds_files <- rds_files[!grepl("Ambrosia", rds_files)]
rds_files <- rds_files[!grepl("Poaceae", rds_files)]

# Initialize an empty data frame to store the combined data
combined_data <- data.frame()

# Loop through each RDS file and combine the data
for (i in seq_along(rds_files)) {
  # Read the RDS file and append to the combined_data
  data <- read_rds(rds_files[i]) %>% 
    mutate(taxa = sub(".*\\/([^/]+)\\.rds$", "\\1", rds_files[i])) 
  combined_data <- rbind(combined_data, data)
}


```   
check how many observations deleted for each step

find a threshold for number of days since prior no to balance between number of data and quality of data

```{r eval = FALSE}
complete_npn_data %>% 
  filter(numdays_since_prior_no>0 & numdays_since_prior_no < 30) %>% 
  select(numdays_since_prior_no) %>%
  ggplot(aes(x = numdays_since_prior_no)) +
  geom_histogram()
```

```{r}
# Now, perform the filtering and processing steps on the combined data
complete_npn_data <- combined_data %>%
  filter(pheno_class_id == 7) %>% #22979
  # Remove rows with status conflicts
  filter(observed_status_conflict_flag == "-9999") %>% #20489
  # Group by individual_id, first_yes_year, and pheno_class_id
  group_by(individual_id, first_yes_year) %>%
  # Keep only the earlist first yes doy
  arrange(first_yes_doy) %>%
  slice(1) %>% # 16086
  ungroup() %>% 
  # Filter rows where numdays_since_prior_no is between 0 and 20
  filter(numdays_since_prior_no <= 7 & numdays_since_prior_no > 0) %>% # 8563
  # Select relevant columns
  dplyr::select(individual_id, first_yes_year, first_yes_doy, species, genus, dataset_id, pheno_class_id, longitude, latitude, taxa) 
```


## reshape doy to number of days since 11.1
```{r eval = FALSE}
flower_data <- complete_npn_data %>%
  rename(lat = latitude, lon = longitude, year = first_yes_year, doy = first_yes_doy) %>%
  mutate(species = paste(genus, species, sep = " ")) %>% 
  mutate(doy = doy + 61) %>%
  mutate(year = ifelse(doy > 365, year+1, year),
         doy = ifelse(doy > 365, doy - 365, doy)) 
```


# extract climate data
```{r eval = FALSE}
library(raster)

# extract the climate normality
complete_period_raster <- raster("../data/prism/complete_period_springmean.tif")

joint_data_flower_normality <- flower_data %>%
  dplyr::select(lat, lon) %>%
  distinct() %>%
  mutate(complete_period_temp = raster::extract(complete_period_raster, cbind(lon, lat)))

# extract the climate anormality
# Initialize an empty data frame to store the results
joint_data_flower_anormality <- data.frame()

# Loop through the specified years
for (fo_year in 2007:2023) {
  # Load the yearly raster file
  yearly_raster <- raster(paste0("../data/prism/", fo_year, "_springmean.tif"))
  
  # Process the joint_data_flower for the current year
  yearly_data <- flower_data %>%
    dplyr::select(year, lat, lon) %>%
    distinct() %>%
    filter(year == fo_year) %>%
    mutate(yearly_temp = raster::extract(yearly_raster, cbind(lon, lat)))
  
  # Append the yearly data to the cumulative data frame
  joint_data_flower_anormality <- rbind(joint_data_flower_anormality, yearly_data)
}

# Combine the normality and anormality data
temperature_data <- joint_data_flower_normality %>%
  right_join(joint_data_flower_anormality, by = c("lat", "lon")) %>%
  rename(norm = complete_period_temp, yeart = yearly_temp) %>%
  mutate(anom = yeart - norm) %>%
  right_join(flower_data, by = c("lat", "lon", "year")) %>%
  filter(!is.na(anom)) %>% #17587->17490
  group_by(species) %>%
  filter(n()>29) %>%   # 
  ungroup()

write.csv(temperature_data, "../data/npn_temperature_data.csv")
```

# fit the model
```{r}
temperature_data <- read.csv("../data/npn_temperature_data.csv")
```

## using one species as an example
### fit a linear model and dignose
```{r}
# Select a species to use as an example
species_name <- "Tsuga canadensis"
species_data <- temperature_data %>%
  filter(species == species_name)

# plot raw data
ggplot(species_data, aes(x = yeart, y = doy)) +
  geom_point() +
  labs(x = "Spring temperature", y = "Days since Nov 1st") +
  theme_minimal()

# Fit a linear model
model <- lm(doy ~ anom + norm, data = species_data)

# Get the model summary
summary(model)

# Plot the residuals
par(mfrow = c(2,2), oma = c(0, 0, 1.1, 0))
plot(model, las = 1)
```
### fit a robust linear regression and visionalize the weight
```{r}
# Fit a robust linear model
model_robust <- MASS::rlm(doy ~ anom + norm, data = species_data,  maxit = 30)

summary(model_robust)

ggplot(species_data, aes(x = yeart, y = doy)) +
  geom_point(aes(alpha = model_robust$w)) +
  geom_abline(intercept = coef(model_robust)[1], slope = coef(model_robust)[3], color = "blue") +
  labs(x = "Spring temperature", y = "Days since Nov 1st", alpha = "Weight") +
  theme_minimal()

```
## get data for model by requiring 10 observations for each parameter
```{r}
temperature_data_model <- temperature_data %>%
  group_by(species) %>%
  filter(n_distinct(doy) > 10) %>%  # Use n_distinct() for distinct counting
  filter(n_distinct(anom) > 10) %>%  # Use n_distinct() for distinct counting
  filter(n_distinct(norm) > 10) %>%  # Use n_distinct() for distinct counting
  filter(n_distinct(doy, norm, anom) > 30) %>%  # Use n_distinct() for distinct counting
  ungroup() # 7601->6109

# by species colinearity
temperature_data_model %>%
  group_by(species) %>%
  summarise(cor_anom_norm = cor(anom, norm, use = "complete.obs")) %>% 
  arrange(desc(abs(cor_anom_norm)))

# by species unique value of doy, norm, anom and combination
# test <- temperature_data_model %>%
#   group_by(species) %>%
#   summarise(n_doy = n_distinct(doy),
#             n_norm = n_distinct(norm),
#             n_anom = n_distinct(anom),
#             n_comb = n_distinct(paste(doy, norm, anom))) %>%
#   arrange(desc(n_comb))

```
## plot and fit the model
```{r eval=FALSE}
source("../scripts/function_visionalize_summmary_MLmodel.R")

# Apply the function to each species and store the results
results <- list()
unique_species <- unique(temperature_data_model$species)

for (species_name in unique_species) {
  print(species_name)
  results[[species_name]] <- analyze_species(temperature_data_model, species_name)
}

# Combine all summary rows into a single data frame
summary_results <- bind_rows(lapply(results, function(res) res$summary))

# Save all plots to a single PDF file
pdf("../data/species_plots_npn.pdf", width = 8, height = 6)
for (species_name in unique_species) {
  print(results[[species_name]]$plot)
}
dev.off()

write.csv(summary_results, "../data/species_summary_npn.csv", row.names = FALSE)
```
```{r}
summary_results <- read.csv("../data/species_summary_npn.csv")
```

## get taxa
```{r}
summary_results_wtaxa <- temperature_data_model %>%
  distinct(species, taxa) %>% 
  right_join(summary_results, by = "species")  %>%  
  mutate(anom_large = (anom_estimate > norm_estimate)) 

```

## summary statistics
```{r}
summary(summary_results_wtaxa)

sum(summary_results_wtaxa$equal)

summary_results_wtaxa %>% 
  group_by(taxa) %>%
  summarise(n = n(), n_equal = sum(equal), p = n_equal/n, n_larger = sum(anom_large), p_anom_large = n_larger/n) %>% 
  arrange(desc(p))
```


## summary figure
```{r}
ggplot(summary_results_wtaxa, aes(x = norm_estimate, y = species, color = taxa, alpha = -residual)) +
  geom_point(size = 3) +
  geom_errorbar(aes(xmin = norm_conf_low, xmax = norm_conf_high, alpha = -residual), width = 0) +
  labs(
    title = "",
    x = "Spatial sensitivity (days/°C)",
    y = "Species",
    alpha = "-Residual",
    color = "Taxa"
  )+
  theme_minimal()
```

```{r}
ggplot(summary_results_wtaxa, aes(x = anom_estimate, y = species, color = taxa, alpha = -residual)) +
  geom_point(size = 3) +
  geom_errorbar(aes(xmin = anom_conf_low, xmax = anom_conf_high, alpha = -residual), width = 0) +
    labs(
    title = "",
    x = "Temporal sensitivity (days/°C)",
    y = "Species",
    alpha = "-Residual",
    color = "Taxa"
  )+
  theme_minimal()
```
```{r}
# use ggplot
ggplot(summary_results_wtaxa) +
  # Use geom_density to get a density plot
  geom_density(aes(x = norm_estimate, fill = "Spatial"), alpha = 0.5, color = NA) +
  geom_density(aes(x = anom_estimate, fill = "Temporal"), alpha = 0.5, color = NA) +
  xlim(-10, 5) +
  labs(
    title = "",
    x = "Sensitivity (days/°C)",
    y = "Density",
    fill = "Type"
  ) +
  scale_fill_manual(values = c("blue", "red"))+
  theme_minimal()
```

```{r}
ggplot(summary_results_wtaxa, aes(x = anom_estimate, y = norm_estimate, color = taxa, alpha = -residual, shape = as.factor(equal + 3), text = species)) +
  geom_point(size = 3) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
  scale_alpha_continuous(range = c(0.2, 1)) +
  scale_shape_manual(values = c("3" = 16, "4" = 17), labels = c("3" = "False", "4" = "True")) +
  labs(
    title = "",
    x = "Temporal sensitivity (days/°C)",
    y = "Spatial sensitivity (days/°C)",
    shape = "Equal",
    alpha = "-Residual",
    color = "Taxa"
  ) +
  theme_minimal() +
  theme(legend.position = "right")
```

## data composition

```{r}
# summarize for each genus, species, indiviudal, how many data points, summarize in each level
data_summary_species <- temperature_data_model %>%
  group_by(taxa, species, individual_id) %>%
  summarise(n = n()) %>%
  group_by(taxa, species) %>%
  summarise(n = sum(n), n_individual = n_distinct(individual_id)) 

data_summary_genus <- temperature_data %>%
  group_by(taxa, individual_id) %>%
  summarise(n = n()) %>%
  group_by(taxa) %>%
  summarise(n = sum(n), n_individual = n_distinct(individual_id)) 

print(data_summary_species)
data_summary_genus
```



