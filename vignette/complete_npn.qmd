---
title: 'complete npn data'
embed-resources: true
author: "Yi Liu"
date: "`r format(Sys.Date(), '%m/%d/%Y')`"
format:
  html:
    code-folding: show
    highlight: textmate
    number-sections: true
    theme: flatly
    toc: TRUE
    toc-depth: 4
    toc-float:
      collapsed: false
      smooth-scroll: true
---
```{r}
library(dplyr)
library(ggplot2)
library(readr)
```

# get npn data

## download npn

```{r eval = FALSE}
source("function_download_npn.R")
```

## quality control
```{r}
folder_path <- "/Volumes/seas-zhukai/phenology/NPN/individual_phenometrics/leaf_flower/with_climate/" 
#folder_path <- "E:/phenology/NPN/leaf_flower/climate/" 

# Get list of RDS files in the folder
rds_files <- list.files(path = folder_path, pattern = "\\.rds$", full.names = TRUE)

#rds_files delete these with name include "Ambrosia" or "Poaceae
rds_files <- rds_files[!grepl("Ambrosia", rds_files)]
rds_files <- rds_files[!grepl("Poaceae", rds_files)]

# Initialize an empty data frame to store the combined data
combined_data <- data.frame()

# Loop through each RDS file and combine the data
for (i in seq_along(rds_files)) {
  # Read the RDS file and append to the combined_data
  data <- read_rds(rds_files[i])
  combined_data <- rbind(combined_data, data)
}

# Now, perform the filtering and processing steps on the combined data
complete_npn_data <- combined_data %>%
  filter(pheno_class_id %in% c(6, 7, 8)) %>%
  # Remove rows with status conflicts
  filter(observed_status_conflict_flag == "-9999") %>%
  # Group by individual_id, first_yes_year, and pheno_class_id
  group_by(individual_id, first_yes_year, pheno_class_id) %>%
  # Keep only rows with unique combinations
  filter(n() == 1) %>%
  ungroup() %>%
  # Convert numdays_since_prior_no to numeric
  mutate(numdays_since_prior_no = as.numeric(numdays_since_prior_no)) %>%
  # Filter rows where numdays_since_prior_no is between 0 and 20
  filter(numdays_since_prior_no < 20 & numdays_since_prior_no > 0) %>%
  # Select relevant columns
  dplyr::select(individual_id, first_yes_year, first_yes_doy, species, genus, dataset_id, pheno_class_id, longitude, latitude) %>%
  ungroup() %>% # 50000->20000
  # Extend to a wide table by pheno_class_id
  tidyr::spread(key = pheno_class_id, value = first_yes_doy) 
```   
## check the relationship among differetn phenophases

```{r}
cor(complete_npn_data[,8:10], use = "complete.obs")
cor(complete_npn_data[,9:10], use = "complete.obs")
cor(complete_npn_data[,8:9], use = "complete.obs")
cor(complete_npn_data[,c(8,10)], use = "complete.obs")

summary(complete_npn_data)

complete_npn_data[,8:10] %>% 
  sample_frac(0.01) %>% 
  as.matrix() %>%
  reshape2::melt() %>%
  ggplot(aes(Var1, Var2, fill = value)) +
  geom_tile() +
  scale_fill_gradient(low = "white", high = "red") +
  theme_minimal() 
  # plot heatmap
  
```

## generate flower day column 

```{r eval = FALSE}
# Process the data for flowering dates
flower_data <- complete_npn_data %>% 
  # Extend to a wide table by pheno_class_id
  # Calculate the average flowering date
  mutate(doy = rowMeans(dplyr::select(., c("6", "7", "8")), na.rm = TRUE)) %>%
  # Filter out rows with NA in doy
  filter(!is.na(doy)) %>%
  # Select relevant columns and rename them
  dplyr::select(-one_of(c("6", "7", "8"))) %>%
  rename(lat = latitude, lon = longitude, year = first_yes_year) %>%
  mutate(species = paste(genus, species, sep = " "))

```
## reshape doy to number of days since 11.1
```{r}
flower_data <- flower_data %>%
  mutate(doy = doy + 61) %>%
  mutate(year = ifelse(doy > 365, year+1, year),
         doy = ifelse(doy > 365, doy - 365, doy)) 
```


# extract climate data
```{r eval = FALSE}
library(raster)

# extract the climate normality
complete_period_raster <- raster("../data/prism/complete_period_springmean.tif")

joint_data_flower_normality <- flower_data %>%
  dplyr::select(lat, lon) %>%
  distinct() %>%
  mutate(complete_period_temp = raster::extract(complete_period_raster, cbind(lon, lat)))

# extract the climate anormality
# Initialize an empty data frame to store the results
joint_data_flower_anormality <- data.frame()

# Loop through the specified years
for (fo_year in 2007:2023) {
  # Load the yearly raster file
  yearly_raster <- raster(paste0("../data/prism/", fo_year, "_springmean.tif"))
  
  # Process the joint_data_flower for the current year
  yearly_data <- flower_data %>%
    dplyr::select(year, lat, lon) %>%
    distinct() %>%
    filter(year == fo_year) %>%
    mutate(yearly_temp = raster::extract(yearly_raster, cbind(lon, lat)))
  
  # Append the yearly data to the cumulative data frame
  joint_data_flower_anormality <- rbind(joint_data_flower_anormality, yearly_data)
}

# Combine the normality and anormality data
temperature_data <- joint_data_flower_normality %>%
  right_join(joint_data_flower_anormality, by = c("lat", "lon")) %>%
  rename(norm = complete_period_temp, yeart = yearly_temp) %>%
  mutate(anom = yeart - norm) %>%
  right_join(flower_data, by = c("lat", "lon", "year")) %>%
  filter(!is.na(anom)) %>% #17587->17490
  group_by(species) %>%
  filter(n()>29) %>%   #  enough for linear model 17490->17213
  ungroup()

write.csv(temperature_data, "../data/npn_temperature_data.csv")
```

# fit the model

## remove outlier
```{r}
library(mvoutlier)

temperature_data <- read.csv("../data/npn_temperature_data.csv") 

temperature_data_clean <- temperature_data %>%
  group_by(species) %>%
  filter(n_distinct(yeart, doy) > 30) %>%
  group_modify(~ {
    data_matrix <- dplyr::select(.x, yeart, doy) %>% as.matrix()
    outlier_result <- aq.plot(data_matrix)
    .x %>% mutate(outliers = outlier_result$outliers)
  }) %>%
  ungroup()
```

# data composition
## get the family
```{r eval = FALSE}
genus_family <- read.csv("../data/genus_family.csv")
temperature_data <- temperature_data %>%
  left_join(genus_family, by = c("gen
  
```


```{r eval = FALSE}
# summarize for each genus, species, indiviudal, how many data points, summarize in each level
data_summary_species <- temperature_data %>%
  group_by(genus, species, individual_id) %>%
  summarise(n = n()) %>%
  group_by(genus, species) %>%
  summarise(n = sum(n), n_individual = n_distinct(individual_id)) 

data_summary_genus <- temperature_data %>%
  group_by(genus, individual_id) %>%
  summarise(n = n()) %>%
  group_by(genus) %>%
  summarise(n = sum(n), n_individual = n_distinct(individual_id)) 
```
# simple linear regression
if the data is too few, we can't fit a multinorm, then we just keep the raw data
also, one speceis with only two location can't calculate the speaital sensitivity
```{r eval = FALSE}
source("function_visionalize_summmary_MLmodel.R")
```

```{r eval = FALSE}
summary_results <- read.csv("../species_summary_npn.csv")
```
kick the outlier
```{r eval = FALSE}
summary_results <- summary_results %>%
  # Delete rows with NaN values
  filter(!is.na(anom_estimate) & !is.na(norm_estimate))

  result <- aq.plot(summary_results %>%
  # Delete rows with NaN values
  dplyr::select(anom_estimate, norm_estimate) %>%
  as.matrix())
  summary_results_clean <- summary_results[!result$outliers, ]
  
  ggplot(summary_results_clean, aes(x = norm_estimate, y = anom_estimate )) +
  geom_errorbarh(aes(xmin = norm_conf_low, xmax = norm_conf_high, alpha = r_squared), width = 0) +
  geom_errorbar(aes(ymin = anom_conf_low, ymax = anom_conf_high, alpha = r_squared), height = 0) +
  geom_point(aes(alpha = r_squared), size = 3) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +  # Add 1:1 line
  scale_alpha_continuous(range = c(0.2, 1)) +  # Adjust alpha range for better visualization
  labs(
    # title = "Slope Estimates for Anom and Norm by Species",
    x = "Temporal sensitivity",
    y = "Spatial sensitivity",
    alpha = "R^2"
  ) +
  theme_minimal() +
  theme(legend.position = "right")
  
```
```{r eval = FALSE}
summary_results_clean %>% 
#filter for the species that the anom slope and norm slope confidence interval do not overlap
  mutate(anom_conf_low = as.numeric(anom_conf_low),
         anom_conf_high = as.numeric(anom_conf_high),
         norm_conf_low = as.numeric(norm_conf_low),
         norm_conf_high = as.numeric(norm_conf_high)) %>%
  filter(anom_conf_low > norm_conf_high | anom_conf_high < norm_conf_low) %>%
  arrange(desc(r_squared))
```
# apply Bonferroni correction
```{r eval = FALSE}
temperature_data <- read_csv("../data/npn_temperature_data.csv")

temperature_data_with_ids <- temperature_data %>%
  mutate(row_id = row_number())

# Identify outliers for each species
outliers <- temperature_data_with_ids %>%
  group_by(species) %>%
  do({
    data_matrix <- dplyr::select(., yeart, doy) %>% as.matrix()
    outlier_result <- tryCatch({
      aq.plot(data_matrix)
    }, error = function(warning) {
      list(outliers = rep(FALSE, nrow(data_matrix))) # If aq.plot fails, mark no outliers
    })
    data.frame(outliers = outlier_result$outliers, row_id = .$row_id)
  }) %>%
  ungroup()

# Join the outlier results with the original data
data_with_outliers <- temperature_data_with_ids %>%
  left_join(outliers, by = "row_id","species")

# Filter out the outliers, if any
data_clean <- data_with_outliers %>%
  filter(is.na(outliers) | !outliers) %>%
  select(-outliers, -row_id)

  
results <- data_clean %>%
  group_by(species) %>%
  do(tidy(lm(doy ~ anom + norm, data = .), conf.int = TRUE)) %>%
  ungroup()

# Count the number of unique species
num_tests <- temperature_data %>% 
  pull(species) %>% 
  unique() %>% 
  length()

# Bonferroni-adjusted alpha
alpha <- 0.05
adjusted_alpha <- alpha / num_tests

# Calculate the Bonferroni-adjusted critical value for the t-distribution
# Assuming degrees of freedom is the same for each model; you can adjust this part if needed
df <- temperature_data %>% 
  group_by(species) %>% 
  summarize(df = lm(doy ~ anom + norm, data = .)$df.residual) %>%
  pull(df) %>%
  unique() %>%
  mean()

# Get the critical t-value
critical_value <- qt(1 - adjusted_alpha / 2, df)

# Adjust the confidence intervals
results <- results %>%
  mutate(
    conf.low.adjusted = estimate - critical_value * std.error,
    conf.high.adjusted = estimate + critical_value * std.error
  ) %>% 
  dplyr::select(species, term, estimate, conf.low.adjusted, conf.high.adjusted) %>%
  filter(term %in% c("anom", "norm")) %>% 
  tidyr::pivot_wider(names_from = term, values_from = c(estimate, conf.low.adjusted, conf.high.adjusted))
  
results_clean <- results %>%
  filter(p.value_anom < adjusted_alpha | p.value_norm < adjusted_alpha)

result <- aq.plot(results %>% dplyr::select(estimate_anom, estimate_norm) %>% as.matrix())
  results_clean <- results[!result$outliers, ]

results_clean %>% filter(conf.low.adjusted_anom > conf.high.adjusted_norm | conf.low.adjusted_norm > conf.high.adjusted_anom) 
```


# compare herbarium and npn result
```{r eval = FALSE}
herbarium_data <- read.csv("../data/herb_species_summary.csv")
npn_data <- read.csv("../data/npn_species_summary.csv") %>% 
    filter(!is.na(anom_estimate) & !is.na(norm_estimate))


  herb_result <- aq.plot(herbarium_data %>%
  # Delete rows with NaN values
  dplyr::select(anom_estimate, norm_estimate) %>%
  as.matrix())
  herbarium_data_clean <- herbarium_data[!herb_result$outliers, ]

  npn_result <- aq.plot(npn_data %>%
  # Delete rows with NaN values
  dplyr::select(anom_estimate, norm_estimate) %>%
  as.matrix())
  npn_data_clean <- npn_data[!npn_result$outliers, ]
  
  joint_data <- inner_join(herbarium_data_clean, npn_data_clean, by = "species") 
  
  joint_data%>%
  ggplot(aes(x = anom_estimate.x, y = anom_estimate.y)) +  
  geom_point() +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
  geom_errorbar(aes(ymin = anom_conf_low.y, ymax = anom_conf_high.y, alpha = r_squared.y), height = 0) +
  geom_errorbarh(aes(xmin = anom_conf_low.x, xmax = anom_conf_high.x, alpha = r_squared.x), height = 0) +
  scale_alpha_continuous(range = c(0.2, 1)) +  # Adjust alpha range for better visualization
  labs(
    # title = "Slope Estimates for Anom and Norm by Species",
    x = "herb tem sensitivity",
    y = "npn tem sensitivity",
    alpha = "R^2"
  ) +
  theme_minimal() +
  theme(legend.position = "right") +
        coord_fixed(ratio = 1)
  
  inner_join(herbarium_data_clean, npn_data_clean, by = "species") %>%
  ggplot(aes(x = anom_estimate.x, y = anom_estimate.y)) +
  geom_point() +
    geom_smooth() +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
  labs(
    x = "Herbarium Temporal Sensitivity",
    y = "NPN Temporal Sensitivity")+
      theme_minimal() +
    coord_fixed(ratio = 1)
```

```{r eval = FALSE}
  joint_data %>%
#filter for the species that the anom slope and norm slope confidence interval do not overlap
  filter(anom_conf_low.x > anom_conf_high.y | anom_conf_low.y > anom_conf_high.x) 
```

```{r eval = FALSE}
  joint_data%>%
  ggplot(aes(x = norm_estimate.x, y = norm_estimate.y)) +  
  geom_point() +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
  geom_errorbar(aes(ymin = norm_conf_low.y, ymax = norm_conf_high.y, alpha = r_squared.y), height = 0) +
  geom_errorbarh(aes(xmin = norm_conf_low.x, xmax = norm_conf_high.x, alpha = r_squared.x), height = 0) +
  scale_alpha_continuous(range = c(0.2, 1)) +  # Adjust alpha range for better visualization
  labs(
    # title = "Slope Estimates for Anom and Norm by Species",
    x = "herb spa sensitivity",
    y = "npn spa sensitivity",
    alpha = "R^2"
  ) +
  theme_minimal() +
    coord_fixed(ratio = 1)+
  theme(legend.position = "right")
  
  inner_join(herbarium_data_clean, npn_data_clean, by = "species") %>%
  ggplot(aes(x = norm_estimate.x, y = norm_estimate.y)) +
  geom_point() +
    geom_smooth() +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
  labs(
    x = "Herbarium spa Sensitivity",
    y = "NPN Temporal Sensitivity") +      
    theme_minimal() +
    coord_fixed(ratio = 1)
```

```{r eval = FALSE}
  joint_data %>%
#filter for the species that the anom slope and norm slope confidence interval do not overlap
  filter(norm_conf_low.x > norm_conf_high.y | norm_conf_low.y > norm_conf_high.x) %>% 
  select(species,norm_estimate.x, norm_estimate.y, norm_conf_low.x, norm_conf_high.x, norm_conf_low.y, norm_conf_high.y)
```