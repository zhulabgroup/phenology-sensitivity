---
title: 'explore herbarium data'
embed-resources: true
author: "Yi Liu"
date: "`r format(Sys.Date(), '%m/%d/%Y')`"
format:
  html:
    code-folding: show
    highlight: textmate
    number-sections: true
    theme: flatly
    toc: TRUE
    toc-depth: 4
    toc-float:
      collapsed: false
      smooth-scroll: true
---

explore planetscope

# neon only has 2 years (for TREE station, but for other, there are more, why?)
also, some file is empty should we delete them?
```{r}
library(stringr)
library(ggplot2)
library(dplyr)

tree <- read.csv("/Volumes/seas-zhukai/phenology/PS/NEON/metadata.csv") %>% 
  filter(str_detect(species, "saccharum"))

```

```{r}
library(data.table)

# List all files in the directory
file_list <- list.files("/Volumes/seas-zhukai/phenology/PS/NEON/doy/", full.names = TRUE)

# Read all files into a list
data_list <- lapply(file_list, function(file) {
  data <- readRDS(file)
  if (nrow(data) > 0) return(data)
  else return(NULL)
})

# Filter out NULL elements (empty files)
data_list <- Filter(Negate(is.null), data_list)

# Combine all non-empty data frames into a single data table
combined_data_neon <- rbindlist(data_list, fill = TRUE)

neon_maple <- combined_data_neon %>% 
 inner_join(tree, by = "id") %>% 
    filter(direction == "up" & thres == 0.5 )

```

```{r}
library(prism)

neon_maple <- neon_maple %>% 
  rename(longitude = lon, latitude = lat)

coordinate <- neon_maple %>% 
  distinct(longitude, latitude)


results <- data.frame(year = integer(), longitude = numeric(), latitude = numeric(), spring_avg_temp = numeric())
prism_set_dl_dir("../data/prism")

for (focal_year in 2013:2023) {
  # Load the raster files for March, April, and May
  tmean_rast_yr_mo <- prism_archive_subset(temp_period = "monthly", type = "tmean", years = focal_year, mon = 3:5)
  tmean_rast2_yr_mo <- pd_stack(tmean_rast_yr_mo)
  r_mean <- raster::calc(tmean_rast2_yr_mo, mean) # 1:4 mean for focal_yr
  #raster::plot(r_mean)

  tmean_data <- unlist(raster::extract(x = r_mean,
                                       y = coordinate))

  results <- rbind(results, data.frame(year = focal_year,
                                     longitude = coordinate$longitude,
                                     latitude = coordinate$latitude,
                                     spring_avg_temp = tmean_data))
}


norm_data <- results %>%
  group_by(longitude, latitude) %>%
  summarize(norm = mean(spring_avg_temp, na.rm = TRUE), .groups = 'drop') %>%  # Calculate group means and ungroup
  right_join(results, by = c("longitude", "latitude")) %>%  # Join summarized data back to original
  mutate(anom = spring_avg_temp - norm)  # Calculate anomaly

            

pheno_with_climate_neon <- neon_maple %>%
  left_join(norm_data, by = c("longitude", "latitude", "year"))
```


```{r}
# remove doy after 200, and out of us points
pheno_with_climate_neon <- pheno_with_climate_neon %>%
  filter(doy < 200) 

paired_data <- data.frame(
  x_black = pheno_with_climate_neon$spring_avg_temp,
  y_black = pheno_with_climate_neon$doy,
  x_red = pheno_with_climate_neon$norm,
  y_red = pheno_with_climate_neon$doy
)

ggplot(paired_data) +
  geom_point(aes(x = x_black, y = y_black, color = "black")) +
  geom_point(aes(x = x_red, y = y_red, color = "red"), alpha = 0.2) +
  geom_segment(aes(x = x_black, y = y_black, xend = x_red, yend = y_red, color = "red"), alpha = 0.2) +
  xlab("spring_ave_temperature") +
  ylab("doy") +
  scale_color_manual(name = "Legend", 
                     values = c("black" = "black", "red" = "red"),
                     labels = c("Observation", "Normality"))
```
```{r}
ggplot(pheno_with_climate_neon) +
  geom_point(aes(x = spring_avg_temp, y = doy, color = as.factor(year), alpha = 0.2)) +
 
  facet_grid(site ~ ., scales = "free_y") 

ggplot(pheno_with_climate_neon) +
  geom_point(aes(x = spring_avg_temp, y = doy, color = as.factor(site), alpha = 0.2)) +
 
  facet_grid(year ~ ., scales = "free_y") 
```

```{r}
model2 <- lm(doy~norm+anom,pheno_with_climate_neon)
summary(model2)
confint(model2)
```


# check urban

```{r}
combined_data <- read.csv("/Volumes/seas-zhukai/phenology/PS/urban/metadata.csv")
directory_path <- "/Volumes/seas-zhukai/phenology/PS/urban/doy/"
# Get the list of RDS files containing "Acer" in their names
file_list <- list.files(directory_path, pattern = "Acer", full.names = TRUE)

# Function to extract city code from file name
extract_city <- function(file_path) {
  # Extract the city code from the file name
  city_code <- gsub("doy_(\\w+)_Acer\\.rds", "\\1", basename(file_path))
  return(city_code)
}

# Read all RDS files and add city column
ps_urban_list <- lapply(file_list, function(file_path) {
  # Read RDS file
  data <- readRDS(file_path)
  # Add city column
  data$site <- extract_city(file_path)
  return(data)
})

# Combine all dataframes into one
ps_urban <- bind_rows(ps_urban_list)



urban_tree_maple <- ps_urban %>% 
  left_join(combined_data, by = c("id","site")) %>% 
  filter(taxa=="Acer saccharum", thres==0.5, direction == "up")

```
the id is unique for city, so join by both site and id

```{r}
urban_tree_maple <- urban_tree_maple %>% 
  rename(longitude = lon, latitude = lat) 

coordinate <- urban_tree_maple %>% 
  distinct(longitude, latitude)


results <- data.frame(year = integer(), longitude = numeric(), latitude = numeric(), spring_avg_temp = numeric())
prism_set_dl_dir("../data/prism")

for (focal_year in 2013:2023) {
  # Load the raster files for March, April, and May
  tmean_rast_yr_mo <- prism_archive_subset(temp_period = "monthly", type = "tmean", years = focal_year, mon = 3:5)
  tmean_rast2_yr_mo <- pd_stack(tmean_rast_yr_mo)
  r_mean <- raster::calc(tmean_rast2_yr_mo, mean) # 1:4 mean for focal_yr
  #raster::plot(r_mean)

  tmean_data <- unlist(raster::extract(x = r_mean,
                                       y = coordinate))

  results <- rbind(results, data.frame(year = focal_year,
                                     longitude = coordinate$longitude,
                                     latitude = coordinate$latitude,
                                     spring_avg_temp = tmean_data))
}


norm_data <- results %>%
  group_by(longitude, latitude) %>%
  summarize(norm = mean(spring_avg_temp, na.rm = TRUE), .groups = 'drop') %>%  # Calculate group means and ungroup
  right_join(results, by = c("longitude", "latitude")) %>%  # Join summarized data back to original
  mutate(anom = spring_avg_temp - norm)  # Calculate anomaly

            

pheno_with_climate <- urban_tree_maple %>%
  left_join(norm_data, by = c("longitude", "latitude", "year"))
```

```{r}
# remove doy after 200, and out of us points
pheno_with_climate <- pheno_with_climate %>%
  filter(doy < 200) 

paired_data <- data.frame(
  x_black = pheno_with_climate$spring_avg_temp,
  y_black = pheno_with_climate$doy,
  x_red = pheno_with_climate$norm,
  y_red = pheno_with_climate$doy
)

ggplot(paired_data) +
  geom_point(aes(x = x_black, y = y_black, color = "black",alpha = 0.1)) +
  geom_point(aes(x = x_red, y = y_red, color = "red"), alpha = 0.1) +
  geom_segment(aes(x = x_black, y = y_black, xend = x_red, yend = y_red, color = "red"), alpha = 0.1) +
  xlab("spring_ave_temperature") +
  ylab("doy") +
  scale_color_manual(name = "Legend", 
                     values = c("black" = "black", "red" = "red"),
                     labels = c("Observation", "Normality"))

# Plot the black points
ggplot(pheno_with_climate) +
  geom_point(aes(x = spring_avg_temp, y = doy, color = as.factor(year), alpha = 0.2)) +
 
  facet_grid(site ~ ., scales = "free_y") 

ggplot(pheno_with_climate) +
  geom_point(aes(x = spring_avg_temp, y = doy, color = as.factor(site), alpha = 0.2)) +
 
  facet_grid(year ~ ., scales = "free_y") 
```

```{r}
model2 <- lm(doy~norm+anom,pheno_with_climate)
summary(model2)
confint(model2)
```

# check evi for TP_acer
```{r}
tp <- readRDS("/Volumes/seas-zhukai/phenology/PS/urban/evi/evi_TP_Acer.rds")
tp_doy <- readRDS("/Volumes/seas-zhukai/phenology/PS/urban/doy/doy_TP_Acer.rds") %>% 
    filter(direction == "up" & thres == 0.5 ) 

merged_data <- merge(tp, tp_doy, by = c("year", "id"), suffixes = c(".evi", ".doy"))

# Randomly select 20 IDs
set.seed(123) # for reproducibility
selected_ids <- sample(unique(merged_data$id), 20)

# Filter the merged data for the selected IDs
filtered_data <- merged_data %>% filter(id %in% selected_ids)

# Create the plot
ggplot(data = filtered_data) +
  geom_smooth(aes(x = doy.evi, y = evi, color = as.factor(year))) +
  geom_line(aes(x = doy.doy, y = evi, color = as.factor(year)), data = filtered_data, inherit.aes = FALSE) +
  facet_wrap(~id, scales = "free_y") +
  theme_minimal() +
  labs(x = "Day of Year (DOY)", y = "EVI", color = "Year")
```

```{r}
ht <- readRDS("/Volumes/seas-zhukai/phenology/PS/urban/evi/evi_HT_Acer.rds")

ht %>% 
  filter(id == 103422) %>% 
ggplot() +
  geom_smooth(aes(x = doy, y = evi, color = as.factor(year))) +
  theme_minimal()
```
