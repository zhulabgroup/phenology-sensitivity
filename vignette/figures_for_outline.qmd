---
title: "figures for outline"
format: html
editor: visual
---

```{r}
library(ggplot2)
library(dplyr)
library(readr)

my_theme <- function() {
  theme_classic(base_size = 14) +
  theme(
    axis.title = element_text(size = 16),
    axis.text = element_text(size = 14),
   #plot.title = element_text(size = 18, face = "bold"),
    #plot.subtitle = element_text(size = 16),
    #legend.title = element_text(size = 14, face = "bold"),
    #legend.text = element_text(size = 12)
  )
}

theme_set(my_theme())
```

# Figure 1 SFTS concept

## get anomaly data I remember I plot it and sompare it with oneline data, should be able to find it somewhere? Yes, I found it
```{r eval=FALSE}
base_path <- "/Volumes/seas-zhukai/proj-phenology-sensitivity/prism/"
normality_file <- paste0(base_path, "complete_period_springmean.tif")

# Load the normality raster and calculate its mean
normality_raster <- raster(normality_file)
normality_mean <- cellStats(normality_raster, mean, na.rm = TRUE)

# Initialize a data frame to store results
results <- data.frame(year = 1895:2023, avg_anomaly = NA)

# Loop through the years
for (year in 1895:2023) {
  yearly_file <- paste0(base_path, year, "_springmean.tif")
  
  # Load the yearly raster and calculate its mean
  yearly_raster <- raster(yearly_file)
  yearly_mean <- cellStats(yearly_raster, mean, na.rm = TRUE)
  
  # Calculate anomaly
  anomaly <- yearly_mean - normality_mean
  
  # Store the result
  results$avg_anomaly[results$year == year] <- anomaly
}

# Plot the average anomaly over time
ggplot(results, aes(x = year, y = avg_anomaly)) +
  geom_line() +
  geom_point() +
  theme_minimal() +
  labs(title = "Average Spring Mean Temperature Anomaly",
       x = "Year",
       y = "Average Temperature Anomaly (°C)")
```


```{r eval=FALSE}
yearly_anomaly_normality <- rbind(results, c("0000", 10.42731))
write.csv(yearly_anomaly_normality, paste0(base_path, "yearly_anomaly_normality.csv"), row.names = FALSE)
```

## figure 1a

```{r}
base_path <- "/Volumes/seas-zhukai/proj-phenology-sensitivity/prism/"
results <- read.csv(paste0(base_path, "yearly_anomaly_normality.csv")) |> 
           slice(1:(n() - 1))

herb_tem <- read.csv("../data/herb_temperature_data.csv") %>%
  group_by(year) %>%
  summarise(count = n()) %>%
  mutate(dataset = "HERB")

npn_tem <- read.csv("../data/npn_temperature_data.csv") %>%
  group_by(year) %>%
  summarise(count = n()) %>%
  mutate(dataset = "NPN")

```

```{r}
library(patchwork)

# Create a double y-axis plot
temperature_plot <- ggplot() +
  geom_line(data = results, aes(x = year, y = avg_anomaly), color = "purple") +
  geom_point(data = results, aes(x = year, y = avg_anomaly), color = "purple") +
  labs(
    x = "Year",
    y = "Temperature\nanomaly (°C)"
  ) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "black")  # Add dashed horizontal line
  
# Second plot: Number of records
records_plot <- ggplot() +
  geom_col(data = npn_tem, aes(x = year, y = count), fill = "forestgreen", alpha = 0.5) +
  geom_col(data = herb_tem, aes(x = year, y = count), fill = "chocolate4", alpha = 0.5) +
  labs(
    x = "Year",
    y = "Number of\nrecords"
  ) 

# Combine the two plots with a shared x-axis using patchwork
double_y_plot <- temperature_plot / records_plot


# Display the plot
print(double_y_plot)
```

## figure 1b

### get latidude temperature normality data

```{r}
# Load necessary libraries
library(sf)
library(raster)
# Set the path to your downloaded PRISM data

# Read the PRISM data as a raster
prism_raster <- raster("/Volumes/seas-zhukai/proj-phenology-sensitivity/prism/complete_period_springmean.tif")

# Extract temperature values by latitude
lat_values <- seq(24, 50, by = 0.5)  # Adjust range as needed
long_values <- rep(-98, length(lat_values))  # Use a central longitude

temp_by_lat <- raster::extract(prism_raster, cbind(long_values, lat_values))

# Create a data frame with latitude and temperature
result <- data.frame(latitude = lat_values, temperature = temp_by_lat)

```

```{r}


# Optional: Create a plot of temperature by latitude
normality_plot <- ggplot(result, aes(x = temperature, y = latitude)) +
  geom_line(color = "red") +
  theme(
    axis.text.y = element_blank(),
    axis.title.y = element_blank(),
    axis.ticks.y = element_blank(),
    plot.margin = margin(t = 20, r = 5, b = 40, l = 0, unit = "pt")  ) +
  labs(
    x = "Temperature normality (°C)"
  ) +
  scale_y_continuous(limits = c(24, 50))

print(normality_plot)
```


```{r}
# Load and prepare datasets
npn <- read.csv("../data/npn_temperature_data.csv") %>%
  distinct(lat, lon) %>%
  mutate(dataset = "NPN")

herb <- read.csv("../data/herb_temperature_data.csv") %>%
  distinct(lat, lon) %>%
  mutate(dataset = "HERB")

# Load US states as sf object
us_states <- st_as_sf(maps::map("state", plot = FALSE, fill = TRUE))


map_plot <- ggplot() +
  geom_point(data = herb, aes(x = lon, y = lat, color = "Herbarium"), alpha = 0.5, size = 0.5) +
  geom_point(data = npn, aes(x = lon, y = lat, color = "Field observation"), alpha = 0.5, size = 0.5) +
  geom_sf(data = us_states, fill = NA, color = "grey") +
  xlim(-127, -66) + ylim(24, 50) +
  theme(
    legend.position = c(0.15, 0.15),
  ) +
  scale_color_manual(values = c("Herbarium" = "chocolate4", "Field observation" = "forestgreen")) +
  labs(
    color = "Data source",
    x = "Longitude",
    y = "Latitude",
    title = " "
  )

print(map_plot)
```

## figure 1c

```{r}
black <- data.frame(x = c(0, 1), y = c(1, 0), color = "black")
purple_center <- data.frame(x = seq(0.2, 0.8, by = 0.2), y = 1 - seq(0.2, 0.8, by = 0.2))

```

```{r}
tem_sen <- ggplot(data = black) + 
  # geom_point(aes(x = x, y = y)) +
  geom_line(mapping = aes(x = x, y = y), color = "purple", size = 2) +
  theme(axis.text.x = element_blank(), 
        axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        axis.line = element_line(color = "black")) +
  xlim(-0.3, 1) +
  ylim(-0.1, 1) +
labs(
  # x = expression("Temperature anomaly" ~ t[anom]), 
  # y = expression("Flowering day anomaly" ~ d[anom]), 
  x = "Temperature anomaly",
  y = "Flowering day anomaly",
  title = " ") +
annotate("text", x = -0.12, y = 0.1, label = "Early\nflowering", size = 4, hjust = 0.7) +  annotate("text",  x = -0.12 , y = 0.92, label = "Late\nflowering", size = 4, hjust = 0.7) +
  annotate("text", x = 0.1 , y = -0.1, label = "Cold year", size = 4, vjust = 0.2) +
  annotate("text", x = 0.9 , y = -0.1, label = "Hot year", size = 4,  vjust = 0.2)  +
  # add a horizontal and vertical dash line cross 0,0 and label that they represent 0,0
  geom_point(aes(x = 0.5, y = 0.5), color = "purple", size = 4) +
  geom_hline(yintercept = 0.5, linetype = "dashed") +
  geom_vline(xintercept = 0.5, linetype = "dashed") +
  annotate("text", x = 0.65, y = 0.6, label = "(0, 0)", size = 4)

print(tem_sen)
```


## figure 1d
```{r}
library(ggtext)
spa_sen <- ggplot(data = black) + 
  # geom_point(aes(x = x, y = y)) +
  geom_line(mapping = aes(x = x, y = y), color = "red") +
  theme(axis.text.x = element_blank(), 
        axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        axis.line = element_line(color = "black")) +
  xlim(-0.3, 1) +
  ylim(-0.1, 1) +
labs(
  # x = expression("Temperature normality" ~ t[norm]), 
  # y = expression("Flowering day normality" ~ d[norm]), 
  x = "Temperature normality",
  y = "Flowering day normality",
  title = " "
) + 
annotate("text", x = -0.12, y = 0.1, label = "Early\nflowering", size = 4, hjust = 0.7) +  annotate("text",  x = -0.12 , y = 0.92, label = "Late\nflowering", size = 4, hjust = 0.7) +
  annotate("text", x = 0.1 , y = -0.1, label = "Cold place", size = 4, vjust = 0.2) +
  annotate("text", x = 0.85 , y = -0.1, label = "Hot place", size = 4,  vjust = 0.2) 

print(spa_sen)
```



## figure 1e

```{r}
#
# Function to calculate line segments
calculate_segments <- function(center, slope, length) {
  start_x <- center$x - length / 2 * cos(atan(slope))
  start_y <- center$y - length / 2 * sin(atan(slope))
  end_x <- center$x + length / 2 * cos(atan(slope))
  end_y <- center$y + length / 2 * sin(atan(slope))
  
  tibble(start_x = start_x, start_y = start_y, end_x = end_x, end_y = end_y)
}

# Apply the function to all centers
segments_1 <- bind_rows(lapply(1:nrow(purple_center), function(i) 
  calculate_segments(purple_center[i, ], -1.5, 0.18)))
segments_2 <- bind_rows(lapply(1:nrow(purple_center), function(i) 
  calculate_segments(purple_center[i, ], -1, 0.18)))
segments_3 <- bind_rows(lapply(1:nrow(purple_center), function(i) 
  calculate_segments(purple_center[i, ], -0.5, 0.18)))
```

plot
```{r}
# Plot
spa_tem <- ggplot(mapping = aes(x = x, y = y)) + 
  geom_line(data = black, aes(group = 1), color = "red") +
  geom_point(data = purple_center, color = "purple", size = 3) +
  geom_segment(data = segments_2, aes(x = start_x, y = start_y, xend = end_x, yend = end_y), color = "purple", size = 2) +  
  # geom_hline(yintercept = 0.4, linetype = "dashed") +
  # geom_vline(xintercept = 0.6, linetype = "dashed") +
  labs(
    # x = expression(t[observe]), 
    #    y = expression(d[observe]), 
    x = "Temperature observed",
    y = "Flowering day observed",
       title = " ") + 
  theme(axis.text.x = element_blank(), 
        axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        axis.line = element_line(color = "black")
)
print(spa_tem)
```

## figure 1

```{r}
library(patchwork)
layout <- c(
   patchwork::area(t=1,l=1,b=1,r=6),
   patchwork::area(t=1,l=1,b=1,r=6),
   patchwork::area(t=2,l=1,b=3,r=5),
   patchwork::area(t=2,l=6,b=3,r=6),
   patchwork::area(t=1,l=7,b=1,r=8),
   patchwork::area(t=2,l=7,b=2,r=8),
   patchwork::area(t=3,l=7,b=3,r=8)
 )
 
 plot(layout)
```


```{r}
library(patchwork)
layout <- c(
  patchwork::area(t=1,l=1,b=1,r=12),
  patchwork::area(t=2,l=1,b=2,r=12),
  patchwork::area(t=3,l=1,b=6,r=10),
  patchwork::area(t=3,l=11,b=6,r=12),
  patchwork::area(t=1,l=13,b=2,r=16),
  patchwork::area(t=3,l=13,b=4,r=16),
  patchwork::area(t=5,l=13,b=6,r=16)
)

plot(layout)
```


```{r fig.width=18, fig.height=11}


# Adjust the margins and layout
combined_plot <- double_y_plot + map_plot + normality_plot +
                 tem_sen + spa_sen + spa_tem +
  plot_layout(design = layout) +
  plot_annotation(tag_levels = "a") 
  
  


# Print the combined plot
print(combined_plot)
```




# Figure 2: the by group result from the two datasets
## herbairum
prepare data
```{r}
temperature_data <- read.csv("../data/herb_temperature_data.csv")

temperature_data_model <- temperature_data %>%
  group_by(species) %>%
  # filter(n_distinct(doy) > 10) %>%  # hard to justify
  filter(n_distinct(anom) > 10) %>%  # Use n_distinct() for distinct counting
  filter(n_distinct(norm) > 10) %>%  # Use n_distinct() for distinct counting
  filter(n_distinct(doy, norm, anom) > 30) %>%  # Use n_distinct() for distinct counting
  ungroup() 

sample_size <- temperature_data_model %>%
  group_by(species) %>%
  summarise(n = n()) %>%
  ungroup() %>%
  rename(species = species)

summary_results <- read.csv("../data/species_summary_herb.csv")

summary_results_wtaxa <- temperature_data_model %>%
  distinct(species, genus, family) %>% 
  right_join(summary_results, by = "species") %>% 
  mutate(taxa = genus) %>%
  left_join(sample_size, by = "species") 

summary_results_wtaxa_combined <- summary_results_wtaxa %>%
  mutate(sensitivity_type = "Spatial", estimate_combined = norm_estimate, conf_low_combined = norm_conf_low, conf_high_combined = norm_conf_high) %>%
  bind_rows(
    summary_results_wtaxa %>%
      mutate(sensitivity_type = "Temporal", estimate_combined = anom_estimate, conf_low_combined = anom_conf_low, conf_high_combined = anom_conf_high)
  ) %>% 
  arrange(taxa, species) %>%
  mutate(species_name = forcats::fct_reorder(species, desc(species))) # Reorder species alphabetically within taxa

```

plot
```{r fig.width=15, fig.height=6}
herb_byspecies_plot <- summary_results_wtaxa_combined %>%
  ggplot(aes(x = species_name, y = estimate_combined, color = sensitivity_type)) +  
  # define the color
  scale_color_manual(values = c("Spatial" = "red", "Temporal" = "purple")) +
  
  # Points with dodging for groups
  geom_point(size = 2, position = position_dodge(width = 0.5), shape = 3) +
  
  # Error bars with the same dodging as points
  geom_errorbar(aes(ymin = conf_low_combined, ymax = conf_high_combined), 
                width = 0, position = position_dodge(width = 0.5)) +
  
  geom_text(aes(y = -26, label = ifelse(equal == 0, "*", "")), vjust = 0.75, color = "black") +
  
  # Add horizontal line at sensitivity = 0
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
  
  # Facet by taxa to group species
  facet_grid(. ~ taxa, scales = "free_x", space = "free_x") + 

  # Clip the plot to specific y-limits
  coord_cartesian(ylim = c(-25, 10)) +
  
  # Set axis labels, title, and color legend
  labs(
    title = "", 
    x = "Species", 
    y = "Sensitivity (days/°C)", 
    color = "Sensitivity type"
  ) +
  
  # Apply themes for classic look, italics, and markdown legend
  theme_classic() +
  theme(
    axis.text.x = element_text(face = "italic", angle = 90, hjust = 1, vjust = 0.5), 
    strip.text = element_text(face = "italic"),  # Italicize facet panel labels
    legend.text = element_markdown(),
    legend.position = "top"
  )

```

## NPN
prepare data
```{r}
temperature_data <- read.csv("../data/npn_temperature_data.csv") 

temperature_data_model <- temperature_data %>%
  group_by(species) %>%
  # filter(n_distinct(doy) > 10) %>%  # hard to justify
  filter(n_distinct(anom) > 10) %>%  # Use n_distinct() for distinct counting
  filter(n_distinct(norm) > 10) %>%  # Use n_distinct() for distinct counting
  filter(n_distinct(doy, norm, anom) > 30) %>%  # Use n_distinct() for distinct counting
  ungroup() 

sample_size <- temperature_data_model %>%
  group_by(species) %>%
  summarise(n = n()) %>%
  ungroup() %>%
  rename(species = species)

summary_results <- read.csv("../data/species_summary_npn.csv")

summary_results_wtaxa <- temperature_data_model %>%
  distinct(species, genus, taxa) %>% 
  right_join(summary_results, by = "species") %>% 
  left_join(sample_size, by = "species") 

summary_results_wtaxa_combined <- summary_results_wtaxa %>%
  mutate(sensitivity_type = "Spatial", estimate_combined = norm_estimate, conf_low_combined = norm_conf_low, conf_high_combined = norm_conf_high) %>%
  bind_rows(
    summary_results_wtaxa %>%
      mutate(sensitivity_type = "Temporal", estimate_combined = anom_estimate, conf_low_combined = anom_conf_low, conf_high_combined = anom_conf_high)
  ) %>% 
  arrange(taxa, species) %>%
  mutate(species_name = forcats::fct_reorder(species, desc(species))) # Reorder species alphabetically within taxa

```

plot
```{r fig.width=15, fig.height=6}
npn_byspecies_plot <- summary_results_wtaxa_combined %>%
  ggplot(aes(x = species_name, y = estimate_combined, color = sensitivity_type)) +  
  # define the color
  scale_color_manual(values = c("Spatial" = "red", "Temporal" = "purple")) +
  
  # Points with dodging for groups
  geom_point(size = 2, position = position_dodge(width = 0.5), shape = 3) +
  
  # Error bars with the same dodging as points
  geom_errorbar(aes(ymin = conf_low_combined, ymax = conf_high_combined), 
                width = 0, position = position_dodge(width = 0.5)) +
  
  geom_text(aes(y = -26, label = ifelse(equal == 0, "*", "")), vjust = 0.75, color = "black") +
  
  # Add horizontal line at sensitivity = 0
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
  
  # Facet by taxa to group species
  facet_grid(. ~ taxa, scales = "free_x", space = "free_x") + 

  # Clip the plot to specific y-limits
  coord_cartesian(ylim = c(-25, 10)) +
  
  # Set axis labels, title, and color legend
  labs(
    title = " ", 
    x = "Species", 
    y = "Sensitivity (days/°C)", 
    color = "Sensitivity type"
  ) +
  
  # Apply themes for classic look, italics, and markdown legend
  theme_classic() +
  theme(
    axis.text.x = element_text(face = "italic", angle = 90, hjust = 1, vjust = 0.5), 
    strip.text = element_text(face = "italic"),  # Italicize facet panel labels
    legend.text = element_markdown(),
    legend.position = "none"
  )
npn_byspecies_plot
```

## combine
```{r fig.width=15, fig.height=12}
herb_byspecies_plot / npn_byspecies_plot 
```
# Figure 3: the HMM and PMM results
## HMM
```{r}
library(ape)
library(ggtree)
library(phytools)
library(rstan)
library(ggplot2)
library(dplyr)
library(ggtext)
HMM <- readRDS("../data/phylogenetics/fit_model_HMM_all.rds")
# summarize the results
HMM_summary <- summary(HMM) 
  
# Extract the summary information into a data frame
HMM_group <- as.data.frame(HMM_summary$summary)

# get genus information
taxa_info <- read.csv("../data/phylogenetics/total_species.csv")

diff_sensitivity_HMM <- HMM_group[grepl("b_chill", rownames(HMM_group)), ] %>% 
  dplyr::select(mean, `2.5%`, `97.5%`) %>%
  dplyr::rename(mean_diff = mean, lower_diff = `2.5%`, upper_diff = `97.5%`) %>% 
  cbind(phylo_species_id) %>% 
  left_join(taxa_info, by = "species")

```


## PMM
```{r}
PMM <- readRDS("../data/phylogenetics/fit_model_PMM_all.rds")
# summarize the results
PMM_summary <- summary(PMM)

# Extract the summary information into a data frame
PMM_group <- as.data.frame(PMM_summary$summary)

diff_sensitivity_PMM <- PMM_group[grepl("b_chill", rownames(PMM_group)), ] %>% 
  dplyr::select(mean, `2.5%`, `97.5%`) %>%
  dplyr::rename(mean_diff = mean, lower_diff = `2.5%`, upper_diff = `97.5%`) %>% 
  cbind(phylo_species_id) %>% 
  left_join(taxa_info, by = "species")
```


## combined plot

combined density
```{r}
# Extract posterior samples and create combined data frame
posterior_HMM <- as.data.frame(extract(HMM)$b_zc) %>%
  rename(Difference =  "extract(HMM)$b_zc") %>%
  mutate(Model = "HMM")
posterior_PMM <- as.data.frame(extract(PMM)$b_zc) %>%
  rename(Difference =  "extract(PMM)$b_zc") %>%
  mutate( Model = "PMM")
combined_posterior <- bind_rows(posterior_HMM, posterior_PMM) 

# Compute 95% CI for each model
HMM_ci <- quantile(posterior_HMM$Difference, probs = c(0.025, 0.975))
PMM_ci <- quantile(posterior_PMM$Difference, probs = c(0.025, 0.975))

# Create combined density plot with facets for HMM and PMM
combined_density <- ggplot(combined_posterior, aes(x = Difference, fill = Model)) +
      scale_fill_manual(values = c("HMM" = "grey", "PMM" = "lightgreen"))  +
  geom_density(alpha = 0.5) +
  geom_vline(xintercept = HMM_ci, linetype = "dashed", color = "grey", size = 1, 
             data = data.frame(Model = "HMM", x = HMM_ci)) +
  geom_vline(xintercept = PMM_ci, linetype = "dashed", color = "lightgreen", size = 1, 
             data = data.frame(Model = "PMM", x = PMM_ci)) +
  xlim(-5, 6) +  # Optional: adjust if needed
  labs(title = " ", 
       x = "Difference (Temporal - Spatial, days/°C)", 
       y = "Density") +
  theme_classic() +
  theme(legend.position = c(0.9, 0.8))

print(combined_density)
```



# Figure 4: Estimated sensitivity for wind pollinated trees flower time with their phylogenetic signal

```{r}
# get the phylo_species_id
tree <- read.tree("../data/phylogenetics/PhyloMaker_tree_scenario1_total.nwk") 
tree_species <- rownames(vcv(tree, corr = TRUE)) %>% 
  gsub("_", " ", .) 

phylo_species_id <- data.frame(species = tree_species, sppid = seq_along(tree_species))

```

## tree
```{r fig.width=5, fig.height=15}
tree$tip.label <- tree$tip.label %>% gsub("_", " ", .)

diff_color <- data.frame(
  species = diff_sensitivity_PMM$species,
  diff = diff_sensitivity_PMM$mean_diff
) 
# Assuming `tree` is a phylogenetic tree object and `lam_bc_pmm` contains the lambda values for the leaves
# You can use the `phytools` package to compute ancestral node values by averaging over descendant leaves.

# Load required libraries
library(phytools)

# Step 1: Create a named vector for the lambda values (`lam_bc_pmm`), with species names as names
lambda_tips <- setNames(diff_color$diff, tree$tip.label) # Assuming `lam_bc_pmm` contains species' lambda values

# Step 2: Use `fastAnc` to calculate ancestral states (lambda values) for internal nodes
lambda_nodes <- fastAnc(tree, diff_color$diff) # Computes the ancestral values by averaging the lambda values of descendants

# Step 3: Combine tip and node lambda values into one vector for plotting
lambda_all <- c(lambda_tips, lambda_nodes)

# Step 4: Create the ggtree plot and color the tips and nodes based on their lambda values
tree_plot <- ggtree(tree, aes(color = lambda_all)) +  # Shrink branch lengths with xscale
  geom_tree() + 
  scale_color_gradient2(low = "blue", mid = "black", high = "red", midpoint = 0, 
                        name = "Difference\n(Temporal - Spatial,\ndays/°C)") +  # Darker color gradient
  theme_tree()+
theme(
  plot.margin = margin(t = 5, r = 0, b = 30, l = 0),
  legend.position = c(0.05, 0.95),  # Position legend inside plot area
  legend.justification = c(0, 1),   # Align legend to top-left
  legend.direction = "horizontal",    # Display legend vertically
  legend.background = element_rect(fill = "white", color = NA),  # Optional: add background
  legend.title = element_text(size = 10),  # Adjust title size if needed
  legend.key = element_rect(color = NA),   # Remove key borders
  legend.margin = margin(0, 0, 0, 0)       # Remove legend margins
) +
guides(color = guide_colorbar(title.position = "top", title.hjust = 0.5, label.position = "bottom"))

print(tree_plot)
```
## PMM
```{r}
# Load necessary libraries
library(ggtree)
library(dplyr)

# Plot your tree using ggtree
tree_plot <- ggtree(tree) + geom_tiplab()

# Extract the order of tip labels as they are plotted
tip_order <- tree_plot$data %>% 
  filter(isTip) %>% 
  arrange(y) %>% 
  pull(label)

# Use this order to reorder your species in the second figure
diff_sensitivity_PMM$species <- factor(diff_sensitivity_PMM$species, levels = tip_order)


sensitivity_plot <- diff_sensitivity_PMM %>% 
  ggplot(aes(x = mean_diff, y = species, color = mean_diff)) +  
  geom_point(shape = 20, size = 2, position = position_dodge(width = 0.5)) +
  geom_errorbar(aes(xmin = lower_diff, xmax = upper_diff), width = 0.2) + # Removed redundant color
  scale_color_gradient2(
    low = "blue", mid = "black", high = "red", midpoint = 0, 
    name = "Difference\n(Temporal - Spatial,\ndays/°C)"
  ) +  
  geom_vline(xintercept = 0, linetype = "dashed") +
  labs(
    title = NULL, # Clearer to use NULL for an empty title
    y = NULL,     # Clearer to use NULL for an empty y-axis label
    x = "Difference (Temporal - Spatial, days/°C)"
  ) +
  xlim(-6, 8) +  # Optional: adjust if needed
  # facet_grid(genus ~ ., scales = "free_y", space = "free_y") + # Optional facet
  theme_classic() +
  theme(
    legend.position = "none",
    axis.text.y = element_text(face = "italic"), # Ensure italics for species names
    legend.text = element_text() # Use element_text instead of element_markdown
  )
```

## HMM
```{r}
# Use this order to reorder your species in the second figure
diff_sensitivity_HMM$species <- factor(diff_sensitivity_HMM$species, levels = tip_order)


HMM_sensitivity_plot <- diff_sensitivity_HMM %>% 
  ggplot(aes(x = mean_diff, y = species)) +  
  geom_point(shape = 20, size = 2, position = position_dodge(width = 0.5), color = "black") +
  geom_errorbar(aes(xmin = lower_diff, xmax = upper_diff), width = 0.2, color = "black") + # Removed redundant color
  geom_vline(xintercept = 0, linetype = "dashed") +
  labs(
    title = NULL, # Clearer to use NULL for an empty title
    y = NULL,     # Clearer to use NULL for an empty y-axis label
    x = "Difference (Temporal - Spatial, days/°C)"
  ) +
  xlim(-6, 8) +  # Optional: adjust if needed
  # facet_grid(genus ~ ., scales = "free_y", space = "free_y") + # Optional facet
  theme_classic() +
  theme(
    legend.position = "none",
    axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(),
    legend.text = element_text() # Use element_text instead of element_markdown
  )
```

## combined
```{r fig.width=10, fig.height=15}
gridExtra::grid.arrange(tree_plot, sensitivity_plot, HMM_sensitivity_plot, nrow = 1, widths = c(1, 2, 1.5))

```

# Supplementary Figure 1: sensitivity consistency among species

```{r}
summary_results_herb <- read.csv("../data/species_summary_herb.csv") %>%
  select(species, norm_estimate, anom_estimate) %>%
  rename(Spatial = norm_estimate, Temporal = anom_estimate) %>% 
  pivot_longer(
    cols = c(Spatial, Temporal), 
    names_to = "sensitivity_type", 
    values_to = "estimate"
  ) %>%
  mutate(dataset = "Herbarium")

summary_results_npn <- read.csv("../data/species_summary_npn.csv") %>%
  select(species, norm_estimate, anom_estimate) %>%
  rename(Spatial = norm_estimate, Temporal = anom_estimate) %>% 
  pivot_longer(
    cols = c(Spatial, Temporal), 
    names_to = "sensitivity_type", 
    values_to = "estimate"
  ) %>%
  mutate(dataset = "Field observation")
```

```{r}
library(ggdist)

bind_rows(summary_results_herb, summary_results_npn) %>%
  ggplot(aes(x = sensitivity_type, y = estimate, fill = sensitivity_type)) +
  geom_half_boxplot(
    side = "l", # Left side for the boxplot
    alpha = 0.5,
    width = 0.3
  ) +
  geom_half_violin(
    side = "r", # Right side for the density plot
    alpha = 0.5,
    width = 1
  ) +
    # geom_half_dotplot(method="histodot", stackdir="up", dotsize = 0.5) +
  facet_grid(~dataset, scales = "free") +
  scale_fill_manual(values = c("Spatial" = "red", "Temporal" = "purple")) +
  labs(
    title = " ",
    x = "Sensitivity type",
    y = "Sensitivity (days/°C)",
    fill = ""
  ) +
  theme_classic() +
  theme(
    legend.position = "none"
  )
```

# Supplimentary Figure 2 compare two dataset raw data
```{r}
npn_data <- read.csv("../data/npn_temperature_data.csv") %>% 
  mutate(dataset = "Field observation") %>% 
  dplyr::select(yeart, norm, anom, doy, species, genus, dataset)
herb_data <- read.csv("../data/herb_temperature_data.csv") %>% 
  mutate(dataset = "Herbarium") %>%
  dplyr::select(yeart, norm, anom, doy, species, genus, dataset)

shared_species <- inner_join(npn_data %>% distinct(species), herb_data %>% distinct(species)) 

joint_data <- rbind(npn_data, herb_data) %>%
  filter(species %in% shared_species$species) %>%
  mutate(dataset = factor(dataset, levels = c("Field observation", "Herbarium")))
```


```{r fig.width=10, fig.height=8}
joint_data %>%
  ggplot(aes(x = yeart, y = doy, color = dataset)) +
  scale_color_manual(values = c("Field observation" = "forestgreen", "Herbarium" = "brown")) + # Use scale_color_manual
  geom_point(alpha = 0.1) +
  geom_smooth(aes(group = dataset), method = "lm", se = FALSE, size = 1) +
  labs(
    title = " ",
    x = "Spring average temperature (°C)",
    y = "Day of year",
    color = "Dataset" # Legend title corresponds to color aesthetic
  ) +
  facet_wrap(~species) +
  theme_classic() +
  theme(
    legend.position = c(0.8, 0.05),
    strip.text = element_text(face = "italic"),  # Italicize facet panel labels
    legend.text = element_markdown() # Italicize legend text
  )
```
# Supplimentary Figure 3 compare two dataset sensitivity

```{r}
herbarium_data <- read.csv("../data/species_summary_herb.csv") %>% 
  mutate(dataset = "Herbarium")
npn_data <- read.csv("../data/species_summary_npn.csv") %>% 
  mutate(dataset = "Field observation") 
species_list <- inner_join(herbarium_data, npn_data, by = "species") %>%
  dplyr::select(species) %>%
  distinct()



temperature_data <- read.csv("../data/npn_temperature_data.csv")

joint_data <- temperature_data %>% distinct(species, taxa) %>%
  right_join(rbind(herbarium_data, npn_data), by = "species") %>% 
  filter(species %in% species_list$species) 

joint_data_long <- joint_data %>%
  mutate(sensitivity_type = "Spatial", estimate_combined = norm_estimate, conf_low_combined = norm_conf_low, conf_high_combined = norm_conf_high) %>%
  bind_rows(
    joint_data %>%
      mutate(sensitivity_type = "Temporal", estimate_combined = anom_estimate, conf_low_combined = anom_conf_low, conf_high_combined = anom_conf_high)
  ) %>% 
  dplyr::select(species, taxa, dataset, sensitivity_type, estimate_combined, conf_low_combined, conf_high_combined, residual) %>% 
  group_by(species, sensitivity_type) %>%
  mutate(equal = ifelse(max(conf_low_combined) < min(conf_high_combined), 1, 0)) %>%
  arrange(taxa, species) %>%
  mutate(species_name = forcats::fct_reorder(species, desc(species))) # Reorder species alphabetically within taxa


```

```{r fig.width=9, fig.height=10}


joint_data_long %>% 
  ggplot(aes(x = estimate_combined, y = species_name, color = dataset)) +
    scale_color_manual(values = c("Herbarium" = "brown", "Field observation" = "forestgreen")) +
  geom_point(shape = 3, size = 2, position = position_dodge(width = 0.5)) + # Adjust width as needed
  coord_cartesian(xlim = c(-20, 10)) +  # This will clip the error bars instead of removing them
  geom_errorbar(aes(xmin = conf_low_combined, xmax = conf_high_combined), width = 0, position = position_dodge(width = 0.5)) +
  geom_vline(xintercept = 0, linetype = "dashed") +
  geom_text(aes(x = -21, label = ifelse(equal == 0, "*", "")), vjust = 0.75, color = "black") +
  labs(
    title = "",
    x = "Sensitivity (days/°C)",
    y = "Species",
    color = "Dataset"
  ) +
  facet_grid(taxa ~ sensitivity_type, scales = "free_y", space = "free_y") + 
  theme_minimal() +
  theme(
    axis.text.y = element_text(face = "italic"),
    legend.text = element_markdown() # Italicize legend text
  )  +
  # Apply themes for classic look, italics, and markdown legend
  theme_classic() +
  theme(
    axis.text.y = element_text(face = "italic"), 
    legend.position = "top"
  ) 
```