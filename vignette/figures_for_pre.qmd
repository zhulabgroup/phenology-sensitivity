---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(tidyverse)

```

# concept figures

```{r}

# Combined data frame
black <- data.frame(x = c(0, 1), y = c(1, 0), color = "black")
purple_center <- data.frame(x = seq(0.2, 0.8, by = 0.2), y = 1 - seq(0.2, 0.8, by = 0.2))

# Function to calculate line segments
calculate_segments <- function(center, slope, length) {
  start_x <- center$x - length / 2 * cos(atan(slope))
  start_y <- center$y - length / 2 * sin(atan(slope))
  end_x <- center$x + length / 2 * cos(atan(slope))
  end_y <- center$y + length / 2 * sin(atan(slope))
  
  tibble(start_x = start_x, start_y = start_y, end_x = end_x, end_y = end_y)
}

# Apply the function to all centers
segments_1 <- bind_rows(lapply(1:nrow(purple_center), function(i) 
  calculate_segments(purple_center[i, ], -1.5, 0.18)))
segments_2 <- bind_rows(lapply(1:nrow(purple_center), function(i) 
  calculate_segments(purple_center[i, ], -1, 0.18)))
segments_3 <- bind_rows(lapply(1:nrow(purple_center), function(i) 
  calculate_segments(purple_center[i, ], -0.5, 0.18)))
# Plot
ggplot(mapping = aes(x = x, y = y)) + 
  geom_line(data = black, aes(group = 1), color = "red") +
  geom_point(data = purple_center, color = "purple", size = 3) +
  geom_segment(data = segments_2, aes(x = start_x, y = start_y, xend = end_x, yend = end_y), color = "purple", size = 2) +  
  # geom_hline(yintercept = 0.4, linetype = "dashed") +
  # geom_vline(xintercept = 0.6, linetype = "dashed") +
  labs(x = expression(t[observe]), y = expression(d[observe])) + 
  theme_classic() + 
  theme(axis.text.x = element_blank(), 
        axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        axis.line = element_line(color = "black"),
        axis.title.x = element_text(size = 18), axis.title.y = element_text(size = 18))
```

```{r}
library(ggtext)
ggplot(data = black) + 
  # geom_point(aes(x = x, y = y)) +
  geom_line(mapping = aes(x = x, y = y), color = "red") +
  theme_classic() + 
  theme(axis.text.x = element_blank(), 
        axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        axis.line = element_line(color = "black")) +
  xlim(-0.3, 1) +
  ylim(-0.1, 1) +
labs(x = expression("Temperature normality" ~ t[norm]), y = expression("Flowering day normality" ~ d[norm])) +
  theme(axis.title.x = element_text(size = 18), axis.title.y = element_text(size = 18)) +
  annotate("text", x = -0.12 , y = 0.02,, label = "Early flowering", size = 6, hjust = 0.7) +
  annotate("text",  x = -0.12 , y = 1, label = "Late flowering", size = 6, hjust = 0.7) +
  annotate("text", x = 0.1 , y = -0.1, label = "Cold place", size = 6, vjust = 0.2) +
  annotate("text", x = 0.9 , y = -0.1, label = "Hot place", size = 6,  vjust = 0.2)  
```

```{r}

ggplot(data = black) + 
  # geom_point(aes(x = x, y = y)) +
  geom_line(mapping = aes(x = x, y = y), color = "purple", size = 2) +
  theme_classic() + 
  theme(axis.text.x = element_blank(), 
        axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        axis.line = element_line(color = "black")) +
  xlim(-0.3, 1) +
  ylim(-0.1, 1) +
labs(x = expression("Temperature anomaly" ~ t[anom]), y = expression("Flowering day anomaly" ~ d[anom])) +
  theme(axis.title.x = element_text(size = 18), axis.title.y = element_text(size = 18)) +
  annotate("text", x = -0.12 , y = 0.02,, label = "Early flowering", size = 6, hjust = 0.7) +
  annotate("text",  x = -0.12 , y = 1, label = "Late flowering", size = 6, hjust = 0.7) +
  annotate("text", x = 0.1 , y = -0.1, label = "Cold year", size = 6, vjust = 0.2) +
  annotate("text", x = 0.9 , y = -0.1, label = "Hot year", size = 6,  vjust = 0.2)  +
  # add a horizontal and vertical dash line cross 0,0 and label that they represent 0,0
  geom_point(aes(x = 0.5, y = 0.5), color = "purple", size = 4) +
  geom_hline(yintercept = 0.5, linetype = "dashed") +
  geom_vline(xintercept = 0.5, linetype = "dashed") +
  annotate("text", x = 0.55, y = 0.55, label = "(0, 0)", size = 5)
 # annotate("text", x = 0.62, y = 0.55, label = "(t[norm]*', '*d[norm])", parse = TRUE, size = 5) 
```

### demonstrate the bell curve

```{r}
# Load necessary libraries

# Define means and standard deviations for two normal distributions
mean1 <- 0
sd1 <- 1
mean2 <- 4.5
sd2 <- 1.5

# Create a sequence of x values for the plot
x_values <- seq(min(mean1 - 4 * sd1, mean2 - 4 * sd2), max(mean1 + 4 * sd1, mean2 + 4 * sd2), length.out = 1000)

# Calculate the density values for both distributions
y_values1 <- dnorm(x_values, mean = mean1, sd = sd1)
y_values2 <- dnorm(x_values, mean = mean2, sd = sd2)

# Create a data frame for plotting
data <- data.frame(x = x_values, y1 = y_values1, y2 = y_values2)

# Calculate the 95% confidence intervals
ci1_lower <- mean1 - 1.96 * sd1
ci1_upper <- mean1 + 1.96 * sd1
ci2_lower <- mean2 - 1.96 * sd2
ci2_upper <- mean2 + 1.96 * sd2

# Create the plot
p <- ggplot(data, aes(x = x)) +
  # Plot the two bell curves
  geom_line(aes(y = y1), color = "blue", size = 1) +
  geom_line(aes(y = y2), color = "red", size = 1) +
  
  # Add the 95% confidence interval for the first distribution
  geom_vline(xintercept = ci1_lower, color = "blue", linetype = "dashed") +
  geom_vline(xintercept = ci1_upper, color = "blue", linetype = "dashed") +
  
  # Add the 95% confidence interval for the second distribution
  geom_vline(xintercept = ci2_lower, color = "red", linetype = "dashed") +
  geom_vline(xintercept = ci2_upper, color = "red", linetype = "dashed") +
  
  # Shade the overlapping area
  geom_ribbon(data = subset(data, y1 > 0 & y2 > 0), aes(ymin = 0, ymax = pmin(y1, y2), fill = "Overlap"), alpha = 0.3) +
  
  
  # Customize the plot
  labs(title = "",
       x = "x", y = "Density") +
  theme_minimal() +
  scale_fill_manual(name = "Overlap", values = c("Overlap" = "purple"))

# Display the plot
print(p)
```

## marginal comparason

```{r}
summary_results_wtaxa %>% 
  filter(genus == "Acer") %>%
    mutate(species_name = forcats::fct_reorder(species, desc(species))) %>%
ggplot(aes(x = norm_estimate, y = species_name, color = genus, alpha = model_fit, shape = "16")) +
  geom_point(size = 2, position = position_dodge(width = 0.5)) + # Adjust width as needed
  coord_cartesian(xlim = c(-30, 10)) +  # This will clip the error bars instead of removing them
  geom_errorbar(aes(xmin = norm_conf_low, xmax = norm_conf_high, alpha = model_fit), width = 0, position = position_dodge(width = 0.5)) +
  scale_alpha_manual(values = c("Good" = 1, "Moderate" = 0.5, "Poor" = 0.2), labels = c("Good", "Moderate", "Poor")) +
  scale_color_discrete(
    labels = function(x) {
      sapply(x, function(label) paste0("*", label, "*"))
    }
  ) +
  labs(
    title = "",
    x = "Sensitivity (days/째C)",
    y = "Species",
    color = "genus",
    shape = "Sensitivity type",
    alpha = "Model fit"
  ) +
  theme_minimal() +
  theme(
    axis.text.y = element_text(face = "italic"),
    legend.text = element_markdown() # Italicize legend text
  )

```

```{r}
 ggplot(summary_results_wtaxa) +
  geom_density(aes(x = norm_estimate, fill = "Spatial"), alpha = 0.5, color = NA) +
  xlim(-30, 10) +
  labs(
    title = "",
    x = "Spatial sensitivity (days/째C)",
    y = "",
    fill = "Sensitivity type"
  ) +
  scale_fill_manual(values = c( "red")) +
  theme_minimal() +
  theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(),
        panel.grid = element_blank(), legend.position = "none")
```

```{r}
 ggplot(summary_results_wtaxa) +
  geom_density(aes(x = anom_estimate, fill = "Spatial"), alpha = 0.5, color = NA) +
  xlim(-30, 10) +
  labs(
    title = "",
    x = "Temporal sensitivity (days/째C)",
    y = "",
    fill = "Sensitivity type"
  ) +
  scale_fill_manual(values = c( "purple")) +
  theme_minimal() +
  theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(),
        panel.grid = element_blank(), legend.position = "none")
```

```{r fig.width=6, fig.height=6}

# Create the density plot
p_density <- ggplot(summary_results_wtaxa) +
  geom_density(aes(x = norm_estimate, fill = "Spatial"), alpha = 0.5, color = NA) +
  xlim(-30, 10) +
  labs(
    title = "",
    x = "",
    y = "",
    fill = "Sensitivity type"
  ) +
  scale_fill_manual(values = c( "red")) +
  theme_minimal() +
  theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(),
        axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(),
        panel.grid = element_blank())

# Combine the datasets for the scatter/errorbar plot
summary_results_wtaxa_combined <- summary_results_wtaxa %>%
  mutate(sensitivity_type = "Spatial", estimate_combined = norm_estimate, conf_low_combined = norm_conf_low, conf_high_combined = norm_conf_high) 


# Create the combined scatter/errorbar plot
p_combined <- summary_results_wtaxa_combined %>% 
    mutate(species_name = forcats::fct_reorder(species, desc(species))) %>%
ggplot(aes(x = estimate_combined, y = species_name, color = taxa, alpha = model_fit, shape = sensitivity_type)) +
  geom_point(size = 2, position = position_dodge(width = 0.5)) + # Adjust width as needed
  coord_cartesian(xlim = c(-30, 10)) +  # This will clip the error bars instead of removing them
  geom_errorbar(aes(xmin = conf_low_combined, xmax = conf_high_combined, alpha = model_fit), width = 0, position = position_dodge(width = 0.5)) +
  scale_alpha_manual(values = c("Good" = 1, "Moderate" = 0.5, "Poor" = 0.2), labels = c("Good", "Moderate", "Poor")) +
  scale_color_discrete(
    labels = function(x) {
      sapply(x, function(label) paste0("*", label, "*"))
    }
  ) +
  labs(
    title = "",
    x = "Sensitivity (days/째C)",
    y = "Species",
    color = "Taxa",
    shape = "Sensitivity type",
    alpha = "Model fit"
  ) +
  theme_minimal() +
  theme(
    axis.text.y = element_text(face = "italic"),
    legend.text = element_markdown() # Italicize legend text
  )

# Stack the plots vertically using patchwork
combined_plot <- p_density / plot_spacer() / p_combined + plot_layout(heights = c(1, -2, 30))
print(combined_plot)
```

```{r fig.width=6, fig.height=6}

# Create the density plot
p_density <- ggplot(summary_results_wtaxa) +
  geom_density(aes(x = anom_estimate, fill = "Temporal"), alpha = 0.5, color = NA) +
  xlim(-30, 10) +
  labs(
    title = "",
    x = "",
    y = "",
    fill = "Sensitivity type"
  ) +
  scale_fill_manual(values = c( "purple")) +
  theme_minimal() +
  theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(),
        axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(),
        panel.grid = element_blank())

# Combine the datasets for the scatter/errorbar plot
summary_results_wtaxa_combined <- summary_results_wtaxa %>%
  mutate(sensitivity_type = "Temporal", estimate_combined = anom_estimate, conf_low_combined = anom_conf_low, conf_high_combined = anom_conf_high) 


# Create the combined scatter/errorbar plot
p_combined <- summary_results_wtaxa_combined %>% 
    mutate(species_name = forcats::fct_reorder(species, desc(species))) %>%
ggplot(aes(x = estimate_combined, y = species_name, color = taxa, alpha = model_fit)) +
  geom_point(size = 2, position = position_dodge(width = 0.5), shape = 17) + # Adjust width as needed
  coord_cartesian(xlim = c(-30, 10)) +  # This will clip the error bars instead of removing them
  geom_errorbar(aes(xmin = conf_low_combined, xmax = conf_high_combined, alpha = model_fit), width = 0, position = position_dodge(width = 0.5)) +
  scale_alpha_manual(values = c("Good" = 1, "Moderate" = 0.5, "Poor" = 0.2), labels = c("Good", "Moderate", "Poor")) +
  scale_color_discrete(
    labels = function(x) {
      sapply(x, function(label) paste0("*", label, "*"))
    }
  ) +
  labs(
    title = "",
    x = "Sensitivity (days/째C)",
    y = "Species",
    color = "Taxa",
    shape = "Sensitivity type",
    alpha = "Model fit"
  ) +
  theme_minimal() +
  theme(
    axis.text.y = element_text(face = "italic"),
    legend.text = element_markdown() # Italicize legend text
  )

# Stack the plots vertically using patchwork
combined_plot <- p_density / plot_spacer() / p_combined + plot_layout(heights = c(1, -2, 30))
print(combined_plot)
```

```{r }
# Create the density plot
ggplot(summary_results_wtaxa) +
  geom_density(aes(x = norm_estimate, fill = "Spatial"), alpha = 0.5, color = NA) +
  geom_density(aes(x = anom_estimate, fill = "Temporal"), alpha = 0.5, color = NA) +
  xlim(-30, 10) +
  labs(
    title = "",
    x = "Sensitivity (days/째C)",
    y = "",
    fill = "Sensitivity type"
  ) +
  scale_fill_manual(values = c("red", "purple")) +
  theme_minimal() +
  theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(),
        panel.grid = element_blank(), legend.position = "none")
```

```{r fig.width=6, fig.height=6}

# Create the density plot
p_density <- ggplot(summary_results_wtaxa) +
  geom_density(aes(x = anom_estimate, fill = "Temporal"), alpha = 0.5, color = "black") +
  xlim(-30, 10) +
  labs(
    title = "",
    x = "",
    y = "",
    fill = "Sensitivity type"
  ) +
  scale_fill_manual(values = c( "purple")) +
  theme_minimal() +
  theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(),
        axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(),
        panel.grid = element_blank())

# Combine the datasets for the scatter/errorbar plot
summary_results_wtaxa_combined <- summary_results_wtaxa %>%
  mutate(sensitivity_type = "Temporal", estimate_combined = anom_estimate, conf_low_combined = anom_conf_low, conf_high_combined = anom_conf_high) 


# Create the combined scatter/errorbar plot
p_combined <- summary_results_wtaxa_combined %>% 
    mutate(species_name = forcats::fct_reorder(species, desc(species))) %>%
ggplot(aes(x = estimate_combined, y = species_name, fill = taxa, alpha = model_fit)) +
  geom_point(size = 2, position = position_dodge(width = 0.5), shape = 24, color = "black") + # Adjust width as needed
  coord_cartesian(xlim = c(-30, 10)) +  # This will clip the error bars instead of removing them
  geom_errorbar(aes(xmin = conf_low_combined, xmax = conf_high_combined, alpha = model_fit, color = taxa), width = 0, position = position_dodge(width = 0.5)) +
  scale_alpha_manual(values = c("Good" = 1, "Moderate" = 0.5, "Poor" = 0.2), labels = c("Good", "Moderate", "Poor")) +
  scale_color_discrete(
    labels = function(x) {
      sapply(x, function(label) paste0("*", label, "*"))
    }
  ) +
  labs(
    title = "",
    x = "Sensitivity (days/째C)",
    y = "Species",
    fill = NULL,
    shape = "Sensitivity type",
    alpha = "Model fit",
    color = "Taxa"
  ) +
  theme_minimal() +
  theme(
    axis.text.y = element_text(face = "italic"),
    legend.text = element_markdown() # Italicize legend text
  ) +
  guides(fill = "none")

# Stack the plots vertically using patchwork
combined_plot <- p_density / plot_spacer() / p_combined + plot_layout(heights = c(1, -2, 30))
print(combined_plot)
```

# two sample figure

```{r}
joint_data_total <- readRDS("../data/phylogenetics/joint_data_total.rds")
library(MASS)

acer_ru <- joint_data_total %>% 
  filter(species == "Acer rubrum") 

acer_ru_her <- acer_ru %>% 
  filter(dataset == "Herbarium")

acer_ru_fil <- acer_ru %>%
  filter(dataset == "Field observation")

lm(doy ~ yeart+anom, data = acer_ru) %>% 
  summary()
lm(doy ~ yeart+anom, data = acer_ru_her) %>% 
  summary()
lm(doy ~ yeart+anom, data = acer_ru_fil) %>% 
  summary()

```

```{r}
acer_ru <- joint_data_total %>% 
  filter(species == "Acer macrophyllum") 

acer_ru_her <- acer_ru %>% 
  filter(dataset == "Herbarium")

acer_ru_fil <- acer_ru %>%
  filter(dataset == "Field observation")

lm(doy ~ yeart+anom, data = acer_ru) %>% 
  summary()
lm(doy ~ yeart+anom, data = acer_ru_her) %>% 
  summary()
lm(doy ~ yeart+anom, data = acer_ru_fil) %>% 
  summary()
```

```{r}
acer_ma <- joint_data_total %>% 
  filter(species == "Acer rubrum")

ggplot(acer_ma, aes(x = yeart, y = doy,color = dataset)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(
    title = "Acer macrophyllum",
    x = "Year",
    y = "Day of year"
  )
```

```{r}
```

```{r}
acer_ma <- joint_data_total %>% 
  filter(species == "Acer macrophyllum")
rlm(doy ~ anom+yeart, data = acer_ma) %>% 
  summary()
```

## check whether the data itself is consistent

```{r}
joint_data_total %>% 
  group_by(species) %>%
  filter(n_distinct(dataset) > 1) %>%
  ungroup() %>%
  ggplot(aes(x = yeart, y = doy, color = dataset)) +
  geom_smooth(method = "lm", se = FALSE) +
  geom_point(alpha = 0.5) +
  facet_wrap(~species) +
  theme_minimal()
```

# show PMM and HMM result together

## HMM

```{r}
library(ape)
library(ggtree)
library(phytools)
library(rstan)
library(ggplot2)
library(dplyr)
library(ggtext)
HMM <- readRDS("../data/phylogenetics/fit_model_HMM_all.rds")
# summarize the results
HMM_summary <- summary(HMM) 
  
# Extract the summary information into a data frame
HMM_group <- as.data.frame(HMM_summary$summary)

# get genus information
taxa_info <- read.csv("../data/phylogenetics/total_species.csv")

# get the phylo_species_id
tree <- read.tree("../data/phylogenetics/PhyloMaker_tree_scenario1_total.nwk") 
tree_species <- rownames(vcv(tree, corr = TRUE)) %>% 
  gsub("_", " ", .) 

phylo_species_id <- data.frame(species = tree_species, sppid = seq_along(tree_species))


diff_sensitivity_HMM <- HMM_group[grepl("b_chill", rownames(HMM_group)), ] %>% 
  dplyr::select(mean, `2.5%`, `97.5%`) %>%
  dplyr::rename(mean_diff = mean, lower_diff = `2.5%`, upper_diff = `97.5%`) %>% 
  cbind(phylo_species_id) %>% 
  left_join(taxa_info, by = "species")
```

```{r fig.width=9, fig.height=30}
HMM <- diff_sensitivity_HMM %>% 
  ggplot(aes(x = mean_diff, y = species)) +  # Swapped x and y
  geom_point(shape = 3, size = 2, position = position_dodge(width = 0.5)) +
  geom_errorbar(aes(xmin = lower_diff, xmax = upper_diff)) +  # Changed to xmin and xmax
  geom_vline(xintercept = 0, linetype = "dashed") +  # Changed to vline
  labs(
    title = "",
    y = "Species",  # Swapped x and y labels
    x = "Difference (Temporal - Spatial, days/째C)",
    color = "Dataset"
  ) +
  facet_grid(genus ~ ., scales = "free_y", space = "free_y") +  # Changed to facet by rows
  theme_classic() +
  theme(
    axis.text.y = element_text(face = "italic"),  # Changed to y-axis text
    legend.text = element_markdown()
  )

print(HMM)
```

## PMM

```{r}
PMM <- readRDS("../data/phylogenetics/fit_model_PMM_all.rds")
# summarize the results
PMM_summary <- summary(PMM)

# Extract the summary information into a data frame
PMM_group <- as.data.frame(PMM_summary$summary)

diff_sensitivity_PMM <- PMM_group[grepl("b_chill", rownames(PMM_group)), ] %>% 
  dplyr::select(mean, `2.5%`, `97.5%`) %>%
  dplyr::rename(mean_diff = mean, lower_diff = `2.5%`, upper_diff = `97.5%`) %>% 
  cbind(phylo_species_id) %>% 
  left_join(taxa_info, by = "species")
```

```{r fig.width=9, fig.height=30}
PMM <- diff_sensitivity_PMM %>% 
  ggplot(aes(x = mean_diff, y = species)) +  # Swapped x and y
  geom_point(shape = 3, size = 2, position = position_dodge(width = 0.5)) +
  geom_errorbar(aes(xmin = lower_diff, xmax = upper_diff)) +  # Changed to xmin and xmax
  geom_vline(xintercept = 0, linetype = "dashed") +  # Changed to vline
  labs(
    title = "",
    y = "Species",  # Swapped x and y labels
    x = "Difference (Temporal - Spatial, days/째C)",
    color = "Dataset"
  ) +
  facet_grid(genus ~ ., scales = "free_y", space = "free_y") +  # Changed to facet by rows
  theme_classic() +
  theme(
    axis.text.y = element_text(face = "italic"),  # Changed to y-axis text
    legend.text = element_markdown()
  )

print(PMM)

```

## Tree

### with label version

```{r fig.width=5, fig.height=30}
tree_plot_full <- ggtree(tree, aes(color = lambda_all)) +  # Color the edges based on lambda
  geom_tree() + 
  hexpand(0.9) +
  geom_tiplab(angle = 0, size = 5, offset = 0.2) +  # Adjust angle, size, and offset for tip labels
  scale_color_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0, name = "Difference\n(Temporal - Spatial,\ndays/째C)") +  # Use scale_color_gradient2 for three colors
  theme_tree() +
theme(
  legend.position = c(0.05, 0.95),  # Position legend inside plot area
  legend.justification = c(0, 1),   # Align legend to top-left
  legend.direction = "horizontal",    # Display legend vertically
  legend.background = element_rect(fill = "white", color = NA),  # Optional: add background
  legend.title = element_text(size = 10),  # Adjust title size if needed
  legend.key = element_rect(color = NA),   # Remove key borders
  legend.margin = margin(0, 0, 0, 0)       # Remove legend margins
) +
guides(color = guide_colorbar(title.position = "top", title.hjust = 0.5, label.position = "bottom"))
       
print(tree_plot_full)
```

### condense version

```{r fig.width=5, fig.height=15}
tree$tip.label <- tree$tip.label %>% gsub("_", " ", .)

diff_color <- data.frame(
  species = diff_sensitivity_PMM$species,
  diff = diff_sensitivity_PMM$mean_diff
) 
# Assuming `tree` is a phylogenetic tree object and `lam_bc_pmm` contains the lambda values for the leaves
# You can use the `phytools` package to compute ancestral node values by averaging over descendant leaves.

# Load required libraries
library(phytools)

# Step 1: Create a named vector for the lambda values (`lam_bc_pmm`), with species names as names
lambda_tips <- setNames(diff_color$diff, tree$tip.label) # Assuming `lam_bc_pmm` contains species' lambda values

# Step 2: Use `fastAnc` to calculate ancestral states (lambda values) for internal nodes
lambda_nodes <- fastAnc(tree, diff_color$diff) # Computes the ancestral values by averaging the lambda values of descendants

# Step 3: Combine tip and node lambda values into one vector for plotting
lambda_all <- c(lambda_tips, lambda_nodes)

# Step 4: Create the ggtree plot and color the tips and nodes based on their lambda values
tree_plot <- ggtree(tree, aes(color = lambda_all)) +  # Shrink branch lengths with xscale
  geom_tree() + 
  scale_color_gradient2(low = "blue", mid = "black", high = "red", midpoint = 0, 
                        name = "Difference\n(Temporal - Spatial,\ndays/째C)") +  # Darker color gradient
  theme_tree()+
theme(
  plot.margin = margin(t = 20, r = 0, b = 30, l = 0),
  legend.position = c(0.05, 0.95),  # Position legend inside plot area
  legend.justification = c(0, 1),   # Align legend to top-left
  legend.direction = "horizontal",    # Display legend vertically
  legend.background = element_rect(fill = "white", color = NA),  # Optional: add background
  legend.title = element_text(size = 10),  # Adjust title size if needed
  legend.key = element_rect(color = NA),   # Remove key borders
  legend.margin = margin(0, 0, 0, 0)       # Remove legend margins
) +
guides(color = guide_colorbar(title.position = "top", title.hjust = 0.5, label.position = "bottom"))

print(tree_plot)
```

### another color

```{r}
tree_plot <- ggtree(tree, aes(color = lambda_all)) +  # Color the edges based on lambda
  geom_tree() + 
  geom_tiplab(angle = 0, size = 5, offset = 0.2) +  # Adjust angle, size, and offset for tip labels
  scale_color_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0, name = "Difference\n(Temporal - Spatial,\ndays/째C)") +  # Use scale_color_gradient2 for three colors
  theme_tree() +
  theme(legend.position = "right", plot.margin = margin(t = 50, r = 5, b = 5, l = 5))  # Adjust legend position

print(tree_plot)
```

### PMM reorder

```{r fig.width=5, fig.height=15}
# Load necessary libraries
library(ggtree)
library(dplyr)

# Plot your tree using ggtree
tree_plot <- ggtree(tree) + geom_tiplab()

# Extract the order of tip labels as they are plotted
tip_order <- tree_plot$data %>% 
  filter(isTip) %>% 
  arrange(y) %>% 
  pull(label)

# Use this order to reorder your species in the second figure
diff_sensitivity_PMM$species <- factor(diff_sensitivity_PMM$species, levels = tip_order)

# Now create your PMM plot with the reordered species
PMM <- diff_sensitivity_PMM %>% 
  ggplot(aes(x = mean_diff, y = species, color = mean_diff)) +  
  geom_point(shape = 20, size = 2, position = position_dodge(width = 0.5)) +
  geom_errorbar(aes(xmin = lower_diff, xmax = upper_diff), width = 0.2) + # Removed redundant color
  scale_color_gradient2(
    low = "blue", mid = "black", high = "red", midpoint = 0, 
    name = "Difference\n(Temporal - Spatial,\ndays/째C)"
  ) +  
  geom_vline(xintercept = 0, linetype = "dashed") +
  labs(
    title = NULL, # Clearer to use NULL for an empty title
    y = NULL,     # Clearer to use NULL for an empty y-axis label
    x = "Difference (Temporal - Spatial, days/째C)"
  ) +
  # facet_grid(genus ~ ., scales = "free_y", space = "free_y") + # Optional facet
  theme_classic() +
  theme(
    legend.position = "none",
    axis.text.y = element_text(face = "italic"), # Ensure italics for species names
    legend.text = element_text() # Use element_text instead of element_markdown
  )
# +
#   theme(
#     axis.text.y = element_blank(),
#     axis.ticks.y = element_blank(),
#     legend.text = element_markdown(),
#     strip.background = element_blank(),
#     strip.text.y = element_blank()
#   )

print(PMM)
```

### combined figure

```{r fig.width=9, fig.height=15}
combined_plot <- plot_grid(tree_plot, PMM, ncol=2)

# Print combined plot
print(combined_plot)
```

### HMM reorder

```{r fig.width=5, fig.height=15}
diff_sensitivity_HMM$species <- factor(diff_sensitivity_HMM$species, levels = tip_order)

HMM <- diff_sensitivity_HMM %>% 
  ggplot(aes(x = mean_diff, y = species, color = mean_diff)) +  
  geom_point(shape = 20, size = 2, position = position_dodge(width = 0.5)) +
  geom_errorbar(aes(xmin = lower_diff, xmax = upper_diff, color = mean_diff), width = 0.2) +
    scale_color_gradient2(low = "blue", mid = "black", high = "red", midpoint = 0, 
                        name = "Difference\n(Temporal - Spatial,\ndays/째C)") +  # Darker color gradient
  geom_vline(xintercept = 0, linetype = "dashed") +
  labs(
    title = "",
    y = " ",
    x = "Difference (Temporal - Spatial, days/째C)",
  ) +
  # facet_grid(genus ~ ., scales = "free_y", space = "free_y") +
  theme_classic() +
  theme(legend.position = "none",     
        axis.text.y = element_text(face = "italic"),  # Changed to y-axis text
    legend.text = element_markdown())
# +
#   theme(
#     axis.text.y = element_blank(),
#     axis.ticks.y = element_blank(),
#     legend.text = element_markdown(),
#     strip.background = element_blank(),
#     strip.text.y = element_blank()
#   )

print(HMM)
```

```{r}
# Load necessary libraries
library(ggtree)
library(ggplot2)
library(dplyr)

# Assuming 'tree' is your phylogenetic tree and 'diff_sensitivity_PMM' is your data frame
# Create a base ggtree plot
p <- ggtree(tree) + geom_tiplab()

# Prepare the data for the second plot
d1 <- diff_sensitivity_PMM %>%
  mutate(species = factor(species, levels = tip_order)) %>% # Ensure species order matches
  # make speceis column the first column
  select(species, everything())
  
# Use facet_plot to add a scatter plot to the ggtree
p2 <- facet_plot(p, panel = "dot", data = d1, geom = geom_point,
                 aes(x = mean_diff))

# Adjust the theme if necessary to ensure both plots are visually aligned
p2 <- p2 + theme(
  axis.title.x = element_blank(), # Remove redundant x-axis titles
  axis.text.x = element_text(size = 10), # Adjust x-axis text size for clarity
  strip.background = element_blank(), # Remove background for cleaner look
  strip.text.y = element_text(angle = 0) # Align facet labels if needed
)

# Print the combined plot
print(p2)
```

```{r}

```

## sensitivity

```{r}
PMM_app <- readRDS("../data/phylogenetics/fit_model_PMM_all_app.rds")
# summarize the results
PMM_app_summary <- summary(PMM_app)

# Extract the summary information into a data frame
PMM_app_group <- as.data.frame(PMM_app_summary$summary)

diff_sensitivity_PMM_app <- PMM_app_group[grepl("b_force", rownames(PMM_app_group)), ] %>% 
  dplyr::select(mean, `2.5%`, `97.5%`) %>%
  dplyr::rename(mean_diff = mean, lower_diff = `2.5%`, upper_diff = `97.5%`) %>% 
  cbind(phylo_species_id) %>% 
  left_join(taxa_info, by = "species")
```

### sensitivity

```{r fig.width=9, fig.height=30}
diff_sensitivity_PMM_app$species <- factor(diff_sensitivity_PMM_app$species, levels = tip_order)

# Now create your PMM plot with the reordered species
PMM <- diff_sensitivity_PMM %>% 
  ggplot(aes(x = mean_diff, y = species, color = mean_diff)) +  
  geom_point(shape = 20, size = 2, position = position_dodge(width = 0.5)) +
  geom_errorbar(aes(xmin = lower_diff, xmax = upper_diff, color = mean_diff), width = 0.2) +
    scale_color_gradient2(low = "blue", mid = "black", high = "red", midpoint = 0, 
                        name = "Difference\n(Temporal - Spatial,\ndays/째C)") +  # Darker color gradient
  geom_vline(xintercept = 0, linetype = "dashed") +
  labs(
    title = "",
    y = " ",
    x = "Difference (Temporal - Spatial, days/째C)",
  ) +
  # facet_grid(genus ~ ., scales = "free_y", space = "free_y") +
  theme_classic() +
  theme(legend.position = "none",     
        axis.text.y = element_text(face = "italic"),  # Changed to y-axis text
    legend.text = element_markdown())

PMM_app_figure <- diff_sensitivity_PMM_app %>% 
  ggplot(aes(x = mean_diff, y = species, color = mean_diff)) +  
  geom_point(shape = 3, size = 2, position = position_dodge(width = 0.5)) +
  geom_errorbar(aes(xmin = lower_diff, xmax = upper_diff)) +  # Changed to xmin and xmax
  geom_vline(xintercept = 0, linetype = "dashed") +  # Changed to vline
  labs(
    title = "",
    y = "Species",  # Swapped x and y labels
    x = "Sensitivity (days/째C)"
  ) +
  facet_grid(genus ~ ., scales = "free_y", space = "free_y") +  # Changed to facet by rows
  theme_classic() +
  theme(
    axis.text.y = element_text(face = "italic"),  # Changed to y-axis text
    legend.text = element_markdown()
  )

print(PMM_app_figure)

```

## Tree

### with label version

```{r fig.width=5, fig.height=30}
tree$tip.label <- tree$tip.label %>% gsub("_", " ", .)

diff_color <- data.frame(
  species = diff_sensitivity_PMM_app$species,
  diff = diff_sensitivity_PMM_app$mean_diff
) 
# Assuming `tree` is a phylogenetic tree object and `lam_bc_pmm` contains the lambda values for the leaves
# You can use the `phytools` package to compute ancestral node values by averaging over descendant leaves.

# Load required libraries
library(phytools)

# Step 1: Create a named vector for the lambda values (`lam_bc_pmm`), with species names as names
lambda_tips <- setNames(diff_color$diff, tree$tip.label) # Assuming `lam_bc_pmm` contains species' lambda values

# Step 2: Use `fastAnc` to calculate ancestral states (lambda values) for internal nodes
lambda_nodes <- fastAnc(tree, diff_color$diff) # Computes the ancestral values by averaging the lambda values of descendants

# Step 3: Combine tip and node lambda values into one vector for plotting
lambda_all <- c(lambda_tips, lambda_nodes)

tree_plot_full <- ggtree(tree, aes(color = lambda_all)) +  # Color the edges based on lambda
  geom_tree() + 
  hexpand(0.9) +
  geom_tiplab(angle = 0, size = 5, offset = 0.2) +  # Adjust angle, size, and offset for tip labels
  scale_color_gradient2(low = "red", mid = "blue", high = "white", name = "Sensitivity (days/째C)") +  # Use scale_color_gradient2 for three colors
  theme_tree() +
theme(
  legend.position = c(0.05, 0.95),  # Position legend inside plot area
  legend.justification = c(0, 1),   # Align legend to top-left
  legend.direction = "horizontal",    # Display legend vertically
  legend.background = element_rect(fill = "white", color = NA),  # Optional: add background
  legend.title = element_text(size = 10),  # Adjust title size if needed
  legend.key = element_rect(color = NA),   # Remove key borders
  legend.margin = margin(0, 0, 0, 0)       # Remove legend margins
) +
guides(color = guide_colorbar(title.position = "top", title.hjust = 0.5, label.position = "bottom"))
       
print(tree_plot_full)
```

### condense version

```{r fig.width=3, fig.height=10}


# Step 4: Create the ggtree plot and color the tips and nodes based on their lambda values
tree_plot <- ggtree(tree, aes(color = lambda_all)) +  # Shrink branch lengths with xscale
  geom_tree() + 
  scale_color_gradient2(low = "blue", mid = "black", high = "red", midpoint = 0, 
                        name = "Difference\n(Temporal - Spatial,\ndays/째C)") +  # Darker color gradient
  theme_tree()+
theme(
  legend.position = c(0.05, 0.95),  # Position legend inside plot area
  legend.justification = c(0, 1),   # Align legend to top-left
  legend.direction = "horizontal",    # Display legend vertically
  legend.background = element_rect(fill = "white", color = NA),  # Optional: add background
  legend.title = element_text(size = 10),  # Adjust title size if needed
  legend.key = element_rect(color = NA),   # Remove key borders
  legend.margin = margin(0, 0, 0, 0)       # Remove legend margins
) +
guides(color = guide_colorbar(title.position = "top", title.hjust = 0.5, label.position = "bottom"))

print(tree_plot)
```

```{r}
tree_plot <- ggtree(tree, aes(color = lambda_all)) +  # Color the edges based on lambda
  geom_tree() + 
  geom_tiplab(angle = 0, size = 5, offset = 0.2) +  # Adjust angle, size, and offset for tip labels
  scale_color_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0, name = "Difference\n(Temporal - Spatial,\ndays/째C)") +  # Use scale_color_gradient2 for three colors
  theme_tree() +
  theme(legend.position = "right", plot.margin = margin(t = 50, r = 5, b = 5, l = 5))  # Adjust legend position

print(tree_plot)
```

```{r fig.width=9, fig.height=30}
# Load necessary libraries
library(ggtree)
library(dplyr)

# Plot your tree using ggtree
tree_plot <- ggtree(tree) + geom_tiplab()

# Extract the order of tip labels as they are plotted
tip_order <- tree_plot$data %>% 
  filter(isTip) %>% 
  arrange(y) %>% 
  pull(label)

# Use this order to reorder your species in the second figure
diff_sensitivity_PMM$species <- factor(diff_sensitivity_PMM$species, levels = tip_order)

# Now create your PMM plot with the reordered species
PMM <- diff_sensitivity_PMM %>% 
  ggplot(aes(x = mean_diff, y = species)) +  
  geom_point(shape = 3, size = 2, position = position_dodge(width = 0.5)) +
  geom_errorbar(aes(xmin = lower_diff, xmax = upper_diff)) +
  geom_vline(xintercept = 0, linetype = "dashed") +
  labs(
    title = "",
    y = "Species",
    x = "Difference (Temporal - Spatial, days/째C)",
    color = "Dataset"
  ) +
  # facet_grid(genus ~ ., scales = "free_y", space = "free_y") +
  theme_classic() +
  theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    legend.text = element_markdown(),
    strip.background = element_blank(),
    strip.text.y = element_blank()
  )

print(PMM)
```

```{r fig.width=9, fig.height=30}
combined_plot <- plot_grid(tree_plot, PMM, ncol=2)

# Print combined plot
print(combined_plot)
```

```{r}
# Load necessary libraries
library(ggtree)
library(ggplot2)
library(dplyr)

# Assuming 'tree' is your phylogenetic tree and 'diff_sensitivity_PMM' is your data frame
# Create a base ggtree plot
p <- ggtree(tree) + geom_tiplab()

# Prepare the data for the second plot
d1 <- diff_sensitivity_PMM %>%
  mutate(species = factor(species, levels = tip_order)) %>% # Ensure species order matches
  # make speceis column the first column
  select(species, everything())
  
# Use facet_plot to add a scatter plot to the ggtree
p2 <- facet_plot(p, panel = "dot", data = d1, geom = geom_point,
                 aes(x = mean_diff))

# Adjust the theme if necessary to ensure both plots are visually aligned
p2 <- p2 + theme(
  axis.title.x = element_blank(), # Remove redundant x-axis titles
  axis.text.x = element_text(size = 10), # Adjust x-axis text size for clarity
  strip.background = element_blank(), # Remove background for cleaner look
  strip.text.y = element_text(angle = 0) # Align facet labels if needed
)

# Print the combined plot
print(p2)
```

```{r}

```

# figure to show the data spatial and temporal coverage of the three datasets

```{r}
nab <- read.csv("/Volumes/seas-zhukai/datasets/vegetation/NAB/clean/2023-04-25/renew_station_info.csv") %>%
  select(lat, lon) %>%
  filter(!is.na(lat)) %>%
  mutate(dataset = "NAB")
```

```{r}
npn <- read.csv("../data/npn_temperature_data.csv") %>%
  select(lat, lon) %>%
  distinct() %>%
  mutate(dataset = "NPN")
```

```{r}
herb <- read.csv("../data/herb_temperature_data.csv") %>%
  select(lat, lon) %>%
  distinct() %>%
  mutate(dataset = "HERB")
```

```{r}
library(sf)
library(ggplot2)
library(dplyr)

# Load US states from a built-in shapefile dataset
us_states <- st_read(system.file("shape/nc.shp", package = "sf")) %>%
  st_transform(crs = 4326)  # Ensure the coordinate system matches your points

# Alternatively, use a package like 'maps' for a quick boundary plot
us_states <- st_as_sf(maps::map("state", plot = FALSE, fill = TRUE))
```

```{r}
# show the spatial coverage of the three datasets in the us map

# Plot
p1 <- ggplot() +
  
  # Add HERB data with colored pixels to show density
  geom_bin2d(data = herb, aes(x = lon, y = lat), bins = 80) + 
  scale_fill_gradient(low = "lightgreen", high = "darkgreen", name = "Herbarium",) +
  
  # Add NAB data with larger dots
  geom_point(data = nab, aes(x = lon, y = lat, color = "NAB"), size = 1) +
  
  # Add NPN data as regular dots
  geom_point(data = npn, aes(x = lon, y = lat, color = "NPN"), size = 0.1) +
  xlim(-130, -60) + ylim(24, 50) +  # Adjust the limits as needed
  # Customize colors
  scale_color_manual(values = c("NAB" = "red", "NPN" = "darkblue")) +
    geom_sf(data = us_states, fill = NA, color = "black") +

  theme_minimal() +
  theme(legend.position = "right") +
  labs(color = " ", fill = "Herbarium", x = "Longitude", y = "Latitude")
```

```{r}
herb_tem <- read.csv("../data/herb_temperature_data.csv") %>%
  group_by(year) %>%
  summarise(count = n()) %>%
  mutate(dataset = "HERB")

npn_tem <- read.csv("../data/npn_temperature_data.csv") %>%
  group_by(year) %>%
  summarise(count = n()) %>%
  mutate(dataset = "NPN")

# histogram the herb and npn data number year change
p2 <- ggplot() +
  geom_histogram(data = npn_tem, aes(x = year, y = count, fill = "NPN"), alpha = 0.5, stat = "identity", position = "dodge") +
    geom_histogram(data = herb_tem, aes(x = year, y = count, fill = "Herbarium"), alpha = 0.5, stat = "identity", position = "dodge") +

  scale_fill_manual(values = c("Herbarium" = "lightgreen", "NPN" = "lightblue")) +
  # vertical line to show the NAB starts to observe
geom_vline(xintercept = 2000, linetype = "dashed", color = "red") +    # label the line: NAB starts to observe
  annotate("text", x = 1965, y = 900, label = "NAB starts to observe", hjust = 0, vjust = 0, size = 3, color = "red") +
  theme_minimal() +
  labs(x = "Year", y = "Number of records", fill = "") 

```

```{r}
library(patchwork)

```

```{r}

# Combine p1 and p2 with labels "a" and "b"
p1 / p2 + 
  plot_layout(heights = c(2, 1)) +
  plot_annotation(tag_levels = "a")
```

```{r}
```
