---
title: "Untitled"
format: html
editor: visual
---
# first method: set 90 days flowering window
```{r}
count_in_window <- function(start_day, doy_values) {
  end_day <- start_day + 89
  sum(doy_values >= start_day & doy_values <= end_day)
}

# Function to find the best 60-day window for a given species
find_best_window <- function(df) {
  doy_values <- sort(unique(df$doy))
  
  best_start_day <- NA
  max_observations <- 0
  
  for (start_day in doy_values) {
    num_observations <- count_in_window(start_day, df$doy)
    if (num_observations > max_observations) {
      best_start_day <- start_day
      max_observations <- num_observations
    }
  }
  
  best_end_day <- best_start_day + 89
  
  df <- df %>%
    mutate(outlier = doy < best_start_day | doy > best_end_day)
  
  return(df)
}

# Apply the function to each species
temperature_data_clean <- temperature_data %>%
  group_by(species) %>%
  filter(n() >= 30) %>%
  group_modify(~ find_best_window(.x)) %>%
  ungroup()
```

```{r}
# Split the cleaned data by species
species_list <- temperature_data_clean %>%
  group_by(species) %>%
  group_split()

# Create a named list of plots
plot_list <- lapply(species_list, function(df) {
  species_name <- unique(df$species)
  plot <- ggplot(df, aes(x = yeart, y = doy, color = outlier)) +
    geom_point() +
    ggtitle(species_name) +
    theme_minimal()
  list(species = species_name, plot = plot)
})

# Convert the list of lists to a named list of plots
plot_list <- setNames(lapply(plot_list, `[[`, "plot"), sapply(plot_list, `[[`, "species")) 

# Save the plots to a PDF
pdf("../data/herb_doy_check.pdf", width = 8, height = 6)
for (species_name in names(plot_list)) {
  print(plot_list[[species_name]])
}
dev.off()
```

# second method: Wilks' Lambda test

```{r}
test <- temperature_data %>% 
  filter(species == "Quercus sadleriana") %>% 
  dplyr::select(yeart, doy)

Wilks.function <- function(dat){
  n <- nrow(dat)
  p <- ncol(dat)
  # beta distribution
  u <- n * mahalanobis(dat, center = colMeans(dat), cov = cov(dat))/(n-1)^2
  w <- 1 - u
  F.stat <- ((n-p-1)/p) * (1/w-1) # computing F statistic
  p <- 1 - round( pf(F.stat, p, n-p-1), 3) # p value for each row
  cbind(w, F.stat, p)
}

plot(test, 
     col = "blue", 
     pch = c(15,16,17)[as.numeric(iris$Species)])

dat.rows <- Wilks.function(test); head(dat.rows)

outliers <- which(dat.rows[,"p"] < 0.05)

points(test[outliers,], 
       col = "red", 
       pch = c(15,16,17)[as.numeric(iris$Species[outliers])])
```

```{r}
# Define the Wilks function
Wilks.function <- function(dat) {
  n <- nrow(dat)
  p <- ncol(dat)
  u <- n * mahalanobis(dat, center = colMeans(dat), cov = cov(dat)) / (n - 1)^2
  w <- 1 - u
  F.stat <- ((n - p - 1) / p) * (1 / w - 1) # computing F statistic
  p_values <- 1 - round(pf(F.stat, p, n - p - 1), 3) # p-value for each row
  cbind(w, F.stat, p_values)
}

# Split the data by species
species_list <- temperature_data %>%
  group_by(species) %>%
  filter(n() >= 30) %>%
  group_split()

# Open a PDF device
pdf("../data/herb_doy_check_multinorm_woseeds.pdf", width = 8, height = 6)

# Loop through each species
for (species_df in species_list) {
  species_name <- unique(species_df$species)
  
  # Select relevant columns for analysis
  test <- species_df %>% dplyr::select(yeart, doy)
  
  # Apply the Wilks function
  dat_rows <- Wilks.function(test)
  
  # Identify outliers
  outliers <- which(dat_rows[,"p_values"] < 0.01)
  
  # Create a plot
  plot <- ggplot(test, aes(x = yeart, y = doy)) +
    geom_point(color = "blue") +
    geom_point(data = test[outliers,], color = "red") +
    ggtitle(paste("Species:", species_name)) +
    theme_minimal()
  
  # Print the plot to the PDF
  print(plot)
}

# Close the PDF device
dev.off()
```

# check whether delete fruiting will help
```{r eval=FALSE}
raw <- read.csv("/Volumes/seas-zhukai/phenology/phenology_leaf_flower_lag/Herbarim_flower/combined_occ_img_downloaded.csv") %>% 
  dplyr::select(day, month, year, startDayOfYear, coordinateUncertaintyInMeters, decimalLongitude, decimalLatitude, filename_image, species, genus,family)

phenology <- read.csv("/Volumes/seas-zhukai/phenology/phenology_leaf_flower_lag/Herbarim_flower/phenology.csv") %>% 
  mutate(filename_image = gsub(".txt", "", file_name))

joint_data <- left_join(phenology,raw, by = "filename_image")

```

## fillter flowering time
```{r eval=FALSE}
joint_data_flower <- joint_data %>% #116805
  filter(flower_one > 0 & flower_many > 0 & seed_fruit_one == 0 & seed_fruit_many == 0) %>% 
  filter(!is.na(startDayOfYear)) %>% 
  filter(year>=1895) %>% 
  dplyr::select(decimalLongitude, decimalLatitude, startDayOfYear, year, species, genus, family) %>%
  # delete family Pinaceae and Cupressaceae
  rename(lon = decimalLongitude, lat = decimalLatitude, doy = startDayOfYear) %>% 
  distinct()  # clear herbarium data for repeat file and repeat file with different phenology

# two repeated component:
# 1. completely the same ~300
# 2. same specimen (different name) with different phenology (as long as the flower is consistent, we will keep them) ~2000

```

## extract the climate normality

```{r eval=FALSE}
library(raster)

# extract the climate normality
complete_period_raster <- raster("../data/prism/complete_period_springmean.tif")

joint_data_flower_normality <- joint_data_flower %>%
  dplyr::select(lat, lon) %>%
  distinct() %>%
  mutate(complete_period_temp = extract(complete_period_raster, cbind(lon, lat)))

# extract the climate anormality
# Initialize an empty data frame to store the results
joint_data_flower_anormality <- data.frame()

# Loop through the specified years
for (fo_year in 1895:2023) {
  # Load the yearly raster file
  yearly_raster <- raster(paste0("../data/prism/", fo_year, "_springmean.tif"))
  
  # Process the joint_data_flower for the current year
  yearly_data <- joint_data_flower %>%
    dplyr::select(year, lat, lon) %>%
    distinct() %>%
    filter(year == fo_year) %>%
    mutate(yearly_temp = extract(yearly_raster, cbind(lon, lat)))
  
  # Append the yearly data to the cumulative data frame
  joint_data_flower_anormality <- rbind(joint_data_flower_anormality, yearly_data)
}

# Combine the normality and anormality data
temperature_data <- joint_data_flower_normality %>%
  right_join(joint_data_flower_anormality, by = c("lat", "lon")) %>%
  rename(norm = complete_period_temp, yeart = yearly_temp) %>%
  mutate(anom = yeart - norm) %>%
  right_join(joint_data_flower, by = c("lat", "lon", "year")) %>%
  filter(!is.na(anom)) 

# write.csv(temperature_data, "../data/herb_temperature_data.csv")
```


